{
    "version": "https://jsonfeed.org/version/1",
    "title": "DzcGood • All posts by \"leetcode\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/11/02/BinarySearch/",
            "url": "http://example.com/2021/11/02/BinarySearch/",
            "title": "二分查找",
            "date_published": "2021-11-01T16:41:36.000Z",
            "content_html": "<h1 id=\"leetcode-t704-二分查找\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-t704-二分查找\">#</a> Leetcode T704 二分查找</h1>\n<h2 id=\"关于\"><a class=\"markdownIt-Anchor\" href=\"#关于\">#</a> 关于</h2>\n<p>第一篇刷题<s>水文</s>当然要从最简单的数组开始啦～</p>\n<h2 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<blockquote>\n<p>一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n<p>示例 1:</p>\n<blockquote>\n<p>输入: nums = [-1,0,3,5,9,12], target = 9<br>\n 输出: 4<br>\n 解释: 9 出现在 nums 中并且下标为 4</p>\n</blockquote>\n<p>示例 2:</p>\n<blockquote>\n<p>输入: nums = [-1,0,3,5,9,12], target = 2<br>\n 输出: -1<br>\n 解释: 2 不存在 nums 中因此返回 -1</p>\n</blockquote>\n<p>提示：</p>\n<blockquote>\n<p>你可以假设 nums 中的所有元素是不重复的。<br>\nn 将在 [1, 10000] 之间。<br>\nnums 的每个元素都将在 [-9999, 9999] 之间。</p>\n</blockquote>\n<p>来源：力扣（LeetCode）<br>\n链接：<a href=\"https://leetcode-cn.com/problems/binary-search\">https://leetcode-cn.com/problems/binary-search</a></p>\n</blockquote>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<p>这是一个数组的题，考察的知识点是二分查找，<s>这不是废话吗？题目明摆写着呢。</s></p>\n<p>还是好好分析一下，这类题目如果直接暴力遍历的话，时间复杂度为 O (n)，数组元素比较多的情况下，应该会超时吧</p>\n<p>这时要关注一下题目给的条件：</p>\n<ul>\n<li>有序的（升序）整型数组</li>\n<li>可以假设 nums 中的所有元素是不重复的</li>\n</ul>\n<p>这两个条件就是为二分查找量身打造的，对于二分查找，一定要满足<em><strong>元素有序</strong></em>的条件，不然得到的结果<s>肯定</s>是错的，那这题当然是用<strong>二分查找</strong>啦</p>\n<h2 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\">#</a> 思路</h2>\n<p>先定义两个整型变量 left，right 和 mid，约定要查找的目标 index 的索引位置在区间 [left, right] 内（注意，这里是闭区间，如果是左闭右开的话，对应的算法有所不同）。对于每一对 left 和 right 值，始终让 mid =  (left + right) / 2，比较 nums [mid] 和 target 的大小：</p>\n<ul>\n<li>target &lt;nums [mid]：说明 target 的索引位置在 [left, mid)，此时更新 right 为 mid - 1</li>\n<li>target = nums [mid]：此时的 mid 就是所求值</li>\n<li>target &gt; nums [mid]：说明 target 的索引位置在 (mid, right]，此时更新 left 为 mid + 1</li>\n</ul>\n<h2 id=\"复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#复杂度分析\">#</a> 复杂度分析</h2>\n<ul>\n<li>时间复杂度：O (logn)，其中 n 是数组的长度</li>\n<li>空间复杂度：O (1)</li>\n</ul>\n<h2 id=\"代码java语言描述\"><a class=\"markdownIt-Anchor\" href=\"#代码java语言描述\">#</a> 代码（Java 语言描述）</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> T704;<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 简单地不能再简单的二分查找</span><br><span class=\"hljs-comment\"> * */</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//这里假设nums[target]的索引在区间[left, right]内，注意这里是闭区间</span><br>        <span class=\"hljs-keyword\">int</span> left = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">int</span> right = nums.length;<br>        <span class=\"hljs-keyword\">int</span> mid;<br>        <span class=\"hljs-keyword\">while</span>(left &lt;= right)&#123;<br>            mid = (left + right) / <span class=\"hljs-number\">2</span>;<br>            <span class=\"hljs-comment\">//找到</span><br>            <span class=\"hljs-keyword\">if</span>(nums[mid] == target)&#123;<br>                <span class=\"hljs-keyword\">return</span> mid;<br>            &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(target &lt; nums[mid])&#123;<br>                <span class=\"hljs-comment\">//说明target在左边</span><br>                right = mid - <span class=\"hljs-number\">1</span>;<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>                <span class=\"hljs-comment\">//说明target在右边</span><br>                left = mid + <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-comment\">//没找到，返回-1</span><br>        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"算法对比\"><a class=\"markdownIt-Anchor\" href=\"#算法对比\">#</a> 算法对比</h2>\n<p>这么简单的二分查找肯定是标准答案啦（<s>等到别的题我就知道错了</s>）</p>\n<p><img src=\"https://gitee.com/dzcgood/img-bed/raw/master/img/image-20211102010323501.png\" alt=\"执行用时分布图表\"></p>\n<p><img src=\"https://gitee.com/dzcgood/img-bed/raw/master/img/image-20211102010414508.png\" alt=\"执行消耗内存分布图表\"></p>\n",
            "tags": [
                "leetcode",
                "数组",
                "二分查找"
            ]
        }
    ]
}