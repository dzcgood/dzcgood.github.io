{
    "version": "https://jsonfeed.org/version/1",
    "title": "DzcGood • All posts by \"linux\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/12/11/Lock/",
            "url": "http://example.com/2021/12/11/Lock/",
            "title": "锁",
            "date_published": "2021-12-11T15:45:14.000Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"962746a3e7c0b72fc3226ff705b08cdf2bcaac8ea8f23e13e8375cfa5fa9d459\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-shrink\">\n      <input class=\"hbe hbe-input-field hbe-input-field-shrink\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-shrink\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-shrink\">您好, 这里需要密码，如果你确实想看，可以联系我</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "Linux",
                "锁"
            ]
        },
        {
            "id": "http://example.com/2021/11/15/SystemCall_ProcessCommunication/",
            "url": "http://example.com/2021/11/15/SystemCall_ProcessCommunication/",
            "title": "系统调用与进程通信",
            "date_published": "2021-11-15T02:07:24.000Z",
            "content_html": "<h1 id=\"系统调用与进程通信\"><a class=\"markdownIt-Anchor\" href=\"#系统调用与进程通信\">#</a> 系统调用与进程通信</h1>\n<h2 id=\"系统调用\"><a class=\"markdownIt-Anchor\" href=\"#系统调用\">#</a> 系统调用</h2>\n<h3 id=\"查询sys_call_table的地址\"><a class=\"markdownIt-Anchor\" href=\"#查询sys_call_table的地址\">#</a> 查询 sys_call_table 的地址</h3>\n<p>通过命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">sudo cat /proc/kallsyms | grep sys_call_table<br></code></pre></div></td></tr></table></figure>\n<p>查找到 sys_call_table 的地址为<strong> 0xffffffffb48001e0</strong>：</p>\n<p><img src=\"https://blog-img-1308044888.cos.ap-shanghai.myqcloud.com/img/image-20211115090038725.png\" alt=\"sys_call_table地址\"></p>\n<h3 id=\"查询可用的系统调用号\"><a class=\"markdownIt-Anchor\" href=\"#查询可用的系统调用号\">#</a> 查询可用的系统调用号</h3>\n<p>通过命令打开<strong> unistd_32.h</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">vim /usr/include/asm/unistd_32.h<br></code></pre></div></td></tr></table></figure>\n<p>如图所示，可以看到<strong> 387 号</strong>是可用的系统调用号：</p>\n<p><img src=\"https://blog-img-1308044888.cos.ap-shanghai.myqcloud.com/img/image-20211115090150894.png\" alt=\"unistd_32.h\"></p>\n<h3 id=\"创建dzc_testc文件\"><a class=\"markdownIt-Anchor\" href=\"#创建dzc_testc文件\">#</a> 创建 dzc_test.c 文件</h3>\n<p>创建 dzc_test.c 文件，在文件内定义系统调用，其中使用到的 sys_call_table 地址和可用系统调用号为上述的<strong> 0xffffffffb48001e0</strong> 以及<strong> 387</strong></p>\n<p>代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;linux/kernel.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;linux/init.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;linux/module.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;linux/unistd.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;linux/sched.h&gt;</span></span><br>  <br>MODULE_LICENSE(<span class=\"hljs-string\">&quot;Dual BSD/GPL&quot;</span>);<br><span class=\"hljs-comment\">//sys_call_table地址</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> SYS_CALL_TABLE_ADDRESS 0xffffffffb48001e0  </span><br><span class=\"hljs-comment\">//系统调用号为387</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> NUM 387  </span><br><span class=\"hljs-comment\">//用来存储cr0寄存器原来的值</span><br><span class=\"hljs-keyword\">int</span> orig_cr0;  <br><span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> *sys_call_table_my=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-comment\">//定义一个函数指针，用来保存一个系统调用</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-title\">int</span><span class=\"hljs-params\">(*anything_saved)</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span></span>;  <br><span class=\"hljs-comment\">//使cr0寄存器的第17位设置为0（内核空间可写）</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">clear_cr0</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> cr0=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> ret;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">asm</span> <span class=\"hljs-title\">volatile</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;movq %%cr0,%%rax&quot;</span>:<span class=\"hljs-string\">&quot;=a&quot;</span>(cr0))</span></span>;<br>    ret=cr0;<br>    cr0&amp;=<span class=\"hljs-number\">0xfffffffffffeffff</span>;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">asm</span> <span class=\"hljs-title\">volatile</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;movq %%rax,%%cr0&quot;</span>::<span class=\"hljs-string\">&quot;a&quot;</span>(cr0))</span></span>;<br>    <span class=\"hljs-keyword\">return</span> ret;<br>&#125;<br><br><span class=\"hljs-comment\">//使cr0寄存器设置为内核不可写</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setback_cr0</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> val)</span> </span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">asm</span> <span class=\"hljs-title\">volatile</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;movq %%rax,%%cr0&quot;</span>::<span class=\"hljs-string\">&quot;a&quot;</span>(val))</span></span>;<br>&#125;<br><br><span class=\"hljs-comment\">//定义自己的系统调用</span><br><span class=\"hljs-function\">asmlinkage <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">sys_mycall</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span><br><span class=\"hljs-function\"></span>&#123;   <br>    <span class=\"hljs-comment\">//在这里输出我的学号和姓名</span><br>    printk(<span class=\"hljs-string\">&quot;20192121026_邓智超\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> current-&gt;pid;    <br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> __init <span class=\"hljs-title\">call_init</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    sys_call_table_my=(<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span>*)(SYS_CALL_TABLE_ADDRESS);<br>    printk(<span class=\"hljs-string\">&quot;开始执行系统调用\\n&quot;</span>);<br>    <span class=\"hljs-comment\">//保存系统调用表中的NUM位置上的系统调用</span><br>    anything_saved=(<span class=\"hljs-keyword\">int</span>(*)(<span class=\"hljs-keyword\">void</span>))(sys_call_table_my[NUM]);<br>    <span class=\"hljs-comment\">//使内核地址空间可写</span><br>    orig_cr0=clear_cr0();<br>    <span class=\"hljs-comment\">//用自己的系统调用替换NUM位置上的系统调用</span><br>    sys_call_table_my[NUM]=(<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span>) &amp;sys_mycall;<br>    <span class=\"hljs-comment\">//使内核地址空间不可写</span><br>    setback_cr0(orig_cr0);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br> <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> __exit <span class=\"hljs-title\">call_exit</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    printk(<span class=\"hljs-string\">&quot;系统调用结束\\n&quot;</span>);<br>    orig_cr0=clear_cr0();<br>    <span class=\"hljs-comment\">//将系统调用恢复</span><br>    sys_call_table_my[NUM]=(<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span>)anything_saved;<br>    setback_cr0(orig_cr0);<br>&#125;<br> <br>module_init(call_init);<br>module_exit(call_exit);<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"创建makefile文件\"><a class=\"markdownIt-Anchor\" href=\"#创建makefile文件\">#</a> 创建 Makefile 文件</h3>\n<p>查询到内核源码的路径为 **/usr/src/kernels/4.18.0-193.14.2.el8_2.x86_64**</p>\n<p>使用 vim Makefile 命令创建 Makefile 文件，并在其中添加内容为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">obj-m:=dzc_test.o<br>CURRENT_PATH:=$(shell pwd)<br>LINUX_KERNEL_PATH:=/usr/src/kernels/4.18.0-193.14.2.el8_2.x86_64<br>all:<br>        make -C  $(LINUX_KERNEL_PATH) M=$(CURRENT_PATH) modules<br>clean:<br>        make -C  $(LINUX_KERNEL_PATH) M=$(CURRENT_PATH) clean<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"安装内核模块\"><a class=\"markdownIt-Anchor\" href=\"#安装内核模块\">#</a> 安装内核模块</h3>\n<p>执行命令<strong> make</strong>，并通过命令 **ls | grep ‘dzc_test.*’** 查看是否执行成功</p>\n<p><img src=\"https://blog-img-1308044888.cos.ap-shanghai.myqcloud.com/img/image-20211115090308520.png\" alt=\"make结果\"></p>\n<p>使用如下命令插入模块：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">insmod dzc_test.ko<br></code></pre></div></td></tr></table></figure>\n<p>使用如下命令检查插入是否成功：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">lsmod<br></code></pre></div></td></tr></table></figure>\n<p><img src=\"https://blog-img-1308044888.cos.ap-shanghai.myqcloud.com/img/image-20211115090421309.png\" alt=\"插入结果\"></p>\n<p>可以看到名为<strong> dzc_test</strong> 的模块，说明插入成功。</p>\n<h3 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\">#</a> 测试</h3>\n<p>创建 test.c 并在其中添加代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;linux/kernel.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;sys/syscall.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;unistd.h&gt;</span></span><br> <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> x = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">//测试387号调用</span><br>\tx = syscall(<span class=\"hljs-number\">387</span>);    <br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;20192121026_邓智超：%d\\n&quot;</span>, x);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>\n<p>使用<strong> gcc test.c</strong> 和 <strong>./a.out</strong> 命名查看运行结果：</p>\n<p><img src=\"https://blog-img-1308044888.cos.ap-shanghai.myqcloud.com/img/image-20211115090504128.png\" alt=\"运行结果\"></p>\n<p>通过<strong> dmesg</strong> 命令查看系统调用的结果：</p>\n<p><img src=\"https://blog-img-1308044888.cos.ap-shanghai.myqcloud.com/img/image-20211115090725356.png\" alt=\"dmesg命令\"></p>\n<p>可见输出 &quot;20192121026_邓智超&quot;，说明添加系统调用成功</p>\n<h2 id=\"进程通信\"><a class=\"markdownIt-Anchor\" href=\"#进程通信\">#</a> 进程通信</h2>\n<h3 id=\"代码实践1\"><a class=\"markdownIt-Anchor\" href=\"#代码实践1\">#</a> 代码实践 1</h3>\n<h4 id=\"信号-signal\"><a class=\"markdownIt-Anchor\" href=\"#信号-signal\">#</a> 信号 - SIGNAL</h4>\n<p>创建 signal.c 文件，并在其中添加以下代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;signal.h&gt;</span></span><br><span class=\"hljs-keyword\">int</span> k;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">int_func</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> sig)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    k = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;int_func\\n&quot;</span>);<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    signal(SIGINT, int_func);<br>    k = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span>(k == <span class=\"hljs-number\">1</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hello!\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;OK!\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>通过<strong> gcc signal.c</strong> 和 **./a.out** 命令运行得到以下结果：</p>\n<p><img src=\"https://blog-img-1308044888.cos.ap-shanghai.myqcloud.com/img/image-20211114172111407.png\" alt=\"signal运行结果\"></p>\n<h4 id=\"管道-pipe\"><a class=\"markdownIt-Anchor\" href=\"#管道-pipe\">#</a> 管道 - PIPE</h4>\n<p>创建 pipe.c 文件，并在其中添加以下代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> p1,fd[<span class=\"hljs-number\">2</span>];<br>    <span class=\"hljs-comment\">//定义读缓冲区</span><br>    <span class=\"hljs-keyword\">char</span> outpipe[<span class=\"hljs-number\">50</span>];<br>    <span class=\"hljs-comment\">//定义写缓冲区</span><br>    <span class=\"hljs-keyword\">char</span> inpipe[<span class=\"hljs-number\">50</span>];<br>    <span class=\"hljs-comment\">//创建无名管道fd</span><br>    pipe(fd);<br>    <span class=\"hljs-keyword\">while</span>((p1 = fork()) == <span class=\"hljs-number\">-1</span>);<br>    <span class=\"hljs-comment\">//子进程返回</span><br>    <span class=\"hljs-keyword\">if</span>(p1 == <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">strcpy</span>(inpipe, <span class=\"hljs-string\">&quot;This is a message!&quot;</span>);<br>        <span class=\"hljs-comment\">//写信息到管道</span><br>        write(fd[<span class=\"hljs-number\">1</span>], inpipe, <span class=\"hljs-number\">50</span>);<br>        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><span class=\"hljs-comment\">//父进程返回</span><br>    &#123;<br>        <span class=\"hljs-comment\">//等待子进程终止</span><br>        wait(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-comment\">//从管道读信息到缓冲区</span><br>        read(fd[<span class=\"hljs-number\">0</span>], outpipe, <span class=\"hljs-number\">50</span>);<br>        <span class=\"hljs-comment\">//显示读到的信息</span><br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>,outpipe);<br>        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>通过<strong> gcc pipe.c</strong> 和 **./a.out** 命令运行得到以下结果：</p>\n<p><img src=\"https://blog-img-1308044888.cos.ap-shanghai.myqcloud.com/img/image-20211114173812416.png\" alt=\"pipe运行结果\"></p>\n<h4 id=\"消息传递\"><a class=\"markdownIt-Anchor\" href=\"#消息传递\">#</a> 消息传递</h4>\n<p>创建 Sndfile.c 文件，并在其中添加以下代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;unistd.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;sys/types.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;linux/msg.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAXMSG 512</span><br><span class=\"hljs-comment\">//定义消息缓冲区数据结构</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">my_msg</span></span><br><span class=\"hljs-class\">&#123;</span><br>\t<span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> my_msg_type;<br>\t<span class=\"hljs-keyword\">int</span> i;<br>\t<span class=\"hljs-keyword\">char</span> some_text[MAXMSG];<br>&#125;msg;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//定义消息换冲突内部标识</span><br>\t<span class=\"hljs-keyword\">int</span> msgid;<br>    <span class=\"hljs-comment\">//定义用户缓冲区\t</span><br>\t<span class=\"hljs-keyword\">char</span> buffer[BUFSIZ];<br>    <span class=\"hljs-comment\">//创建消息队列，key为12</span><br>\tmsgid = msgget(<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">0666</span>|IPC_CREAT);<br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>    &#123;<br>        <span class=\"hljs-comment\">//提示键入消息内容</span><br>    \t<span class=\"hljs-built_in\">puts</span> ( <span class=\"hljs-string\">&quot;Enter some text:&quot;</span>);<br>        <span class=\"hljs-comment\">//标准输入送buffer</span><br>        fgets (buffer,BUFSIZ,<span class=\"hljs-built_in\">stdin</span>);<br>        msg.i++;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;i=%d\\n&quot;</span> , msg.i);<br>        msg.my_msg_type=<span class=\"hljs-number\">3</span>;<br>        <span class=\"hljs-comment\">//buffer中的内容送信息缓冲</span><br>        <span class=\"hljs-built_in\">strcpy</span>(msg.some_text,buffer); <br>        <span class=\"hljs-comment\">//发送消息到消息队列</span><br>        msgsnd(msgid, &amp;msg,MAXMSG,<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-comment\">//消息为end结束</span><br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strncmp</span>(msg.some_text, <span class=\"hljs-string\">&quot;end&quot;</span>,<span class=\"hljs-number\">3</span>)==<span class=\"hljs-number\">0</span>)<br>        \t<span class=\"hljs-keyword\">break</span>;<br>\t&#125;<br>\t<span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>通过<strong> gcc Sndfile.c</strong> 和 **./a.out** 命令运行得到以下结果：</p>\n<p><img src=\"https://blog-img-1308044888.cos.ap-shanghai.myqcloud.com/img/image-20211114175040124.png\" alt=\"Sndfile运行结果\"></p>\n<p>创建 Recfile.c 文件，并在其中添加以下代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;unistd.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;sys/types.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;linux/msg.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAXMSG 512</span><br><span class=\"hljs-comment\">//定义消息换冲突数据结构</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">my_msg</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> my_msg_type;<br>    <span class=\"hljs-keyword\">int</span> i;<br>    <span class=\"hljs-keyword\">char</span> some_text[MAXMSG];<br>&#125;msg;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> msgid;<br>   \tmsg.my_msg_type=<span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-comment\">//获取消息队列，key为1234</span><br>    msgid=msgget(<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">0666</span>|IPC_CREAT);<br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>)<br>    &#123;<br>        <span class=\"hljs-comment\">//接收消息</span><br>        msgrcv(msgid,&amp;msg,BUFSIZ,msg.my_msg_type,<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-comment\">//显示消息</span><br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;You wrote:%s and i=%d\\n&quot;</span>,msg.some_text,msg.i);<br>        <span class=\"hljs-comment\">//消息为end则结束</span><br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strncmp</span>(msg.some_text, <span class=\"hljs-string\">&quot;end&quot;</span> ,<span class=\"hljs-number\">3</span>)==<span class=\"hljs-number\">0</span>)<br>        \t<span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>    <span class=\"hljs-comment\">//删除消息队列</span><br>    msgctl(msgid,IPC_RMID,<span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-built_in\">exit</span> (<span class=\"hljs-number\">0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>通过<strong> gcc Recfile.c</strong> 和 **./a.out** 命令运行得到以下结果：</p>\n<p><img src=\"https://blog-img-1308044888.cos.ap-shanghai.myqcloud.com/img/image-20211114175351513.png\" alt=\"Recfile运行结果\"></p>\n<h4 id=\"共享内存\"><a class=\"markdownIt-Anchor\" href=\"#共享内存\">#</a> 共享内存</h4>\n<p>创建 Sndshm.c 文件，并在其中添加以下代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;unistd.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;sys/types.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;linux/shm.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> shmid;<br>    <span class=\"hljs-keyword\">char</span> *viraddr;<br>    <span class=\"hljs-keyword\">char</span> buffer[BUFSIZ];<br>    <span class=\"hljs-comment\">//创建共享内存</span><br>    shmid = shmget(<span class=\"hljs-number\">1234</span>, BUFSIZ, <span class=\"hljs-number\">0666</span> | IPC_CREAT);<br>    <span class=\"hljs-comment\">//附接到共享内存</span><br>    viraddr = (<span class=\"hljs-keyword\">char</span>*)shmat(shmid, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>)<br>    &#123;<br>        <span class=\"hljs-comment\">//提示用户输入信息</span><br>        <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Enter some text:\\n&quot;</span>);<br>        <span class=\"hljs-comment\">//将标准输入送入到缓冲区中</span><br>        fgets(buffer, BUFSIZ, <span class=\"hljs-built_in\">stdin</span>);<br>        <span class=\"hljs-comment\">//采用追加方式写到共享内存</span><br>        <span class=\"hljs-built_in\">strcat</span>(viraddr, buffer);<br>        <span class=\"hljs-comment\">//当输入的字符串为&quot;end&quot;时，终止循环</span><br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strncmp</span>(buffer, <span class=\"hljs-string\">&quot;end&quot;</span>, <span class=\"hljs-number\">3</span>) == <span class=\"hljs-number\">0</span>)<br>            <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>    <span class=\"hljs-comment\">//切断与共享内存的链接</span><br>    shmdt(viraddr);<br>    <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>通过<strong> gcc Sndshm.c</strong> 和 **./a.out** 命令运行得到以下结果：</p>\n<p><img src=\"https://blog-img-1308044888.cos.ap-shanghai.myqcloud.com/img/image-20211114182155111.png\" alt=\"Sndshm运行结果\"></p>\n<p>创建 Revshm.c 文件，并在其中添加以下代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;unistd.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;sys/types.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;sys/shm.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">int</span> shmid;<br>\t<span class=\"hljs-keyword\">char</span> *viraddr;<br>\t<span class=\"hljs-comment\">//创建共享内存</span><br>\tshmid=shmget(<span class=\"hljs-number\">1234</span>, BUFSIZ, <span class=\"hljs-number\">0666</span> | IPC_CREAT);<br>    <span class=\"hljs-comment\">//附接到共享内存</span><br>\tviraddr=(<span class=\"hljs-keyword\">char</span>*)shmat(shmid, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>\t<span class=\"hljs-comment\">//输出共享内存的内容</span><br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Your message is :\\n%s&quot;</span>, viraddr);<br>    <span class=\"hljs-comment\">//切断与共享内存的链接</span><br>\tshmdt(viraddr);<br>    <span class=\"hljs-comment\">//释放共享内存</span><br>\tshmctl(shmid,IPC_RMID, <span class=\"hljs-number\">0</span>);<br>\t<span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\t<br>&#125;<br><br></code></pre></div></td></tr></table></figure>\n<p>通过<strong> gcc Revshm.c</strong> 和 **./a.out** 命令运行得到以下结果：</p>\n<p><img src=\"https://blog-img-1308044888.cos.ap-shanghai.myqcloud.com/img/image-20211114184820214.png\" alt=\"Revshm运行结果\"></p>\n<h3 id=\"代码实践2\"><a class=\"markdownIt-Anchor\" href=\"#代码实践2\">#</a> 代码实践 2</h3>\n<h4 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\">#</a> 思路</h4>\n<ul>\n<li>为 M1，M2 分别建立两个共享空间，创建三个进程，父进程，A 进程，B 进程，将共享内存连接到当前进程的地址空间，使得三个进程都能访问 M1,M2。</li>\n<li>设置两个信号量<strong> A_ENABLE，B_ENABLE</strong>，分别表示允许 A 执行和允许 B 执行。程序开始的时候，A_ENABLE = 1，B_ENABLE = 0。每次 A 执行时，对 A_ENABLE 执行<strong> P 操作</strong>，A 结束时，对 B_ENABLE 执行<strong> V 操作</strong>；每次 B 执行时，对 B_ENABLE 执行<strong> P 操作</strong>，B 结束时，对 A_ENABLE 执行<strong> V 操作</strong>，这样就可以达到 A 和 B 轮流执行的效果。</li>\n<li>为了使程序能够有较好的效果且能够停止，这里设置 A 和 B<strong> 分别执行 4 次</strong>操作</li>\n<li>此代码参考<a href=\"https://www.cnblogs.com/harrypotterjackson/p/11997774.html\">生产者消费者问题 多进程共享内存 - LightningStar - 博客园 (cnblogs.com)</a> 并按照题目要求做了修改以符合作业要求</li>\n</ul>\n<h4 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\">#</a> 代码</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;unistd.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;sys/types.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;sys/stat.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;fcntl.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;sys/types.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;sys/shm.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;time.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;sys/ipc.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;sys/sem.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;sys/wait.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAX_NUM 4096</span><br><br><span class=\"hljs-comment\">//共享内存缓冲区资源的循环队列</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Resource</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">int</span> message[MAX_NUM];<br>    <span class=\"hljs-keyword\">int</span> front;<br>    <span class=\"hljs-keyword\">int</span> rear;<br>&#125;;<br><br><span class=\"hljs-comment\">//M1 M2</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Resource</span> <span class=\"hljs-title\">M</span>[2];</span><br><br><span class=\"hljs-comment\">//信号量数据结构</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">semun</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">int</span> value;<br>&#125;;<br><br><span class=\"hljs-comment\">//用于映射信号量编号与对应意义的映射</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">MUTEX</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-comment\">//是否允许A操作</span><br>    A_ENABLE,<br>    <span class=\"hljs-comment\">//是否允许B操作</span><br>    B_ENABLE,<br>    <span class=\"hljs-comment\">//信号量相关</span><br>    NUM_MUX<br>&#125;;<br><br><span class=\"hljs-comment\">//信号量集合描述符</span><br><span class=\"hljs-keyword\">int</span> semid;<br><br><span class=\"hljs-comment\">//共享空间描述符，M1,M2各占一个空间</span><br><span class=\"hljs-keyword\">int</span> shmid[<span class=\"hljs-number\">2</span>];<br><br><span class=\"hljs-comment\">//共享空间首地址</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Resource</span> *<span class=\"hljs-title\">shm</span>[2];</span><br><br><span class=\"hljs-comment\">//绑定共享内存</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">attach_shm</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//将共享内存连接到当前进程的地址空间</span><br>    shm[<span class=\"hljs-number\">0</span>] = (struct Resource *)shmat(shmid[<span class=\"hljs-number\">0</span>], <span class=\"hljs-literal\">NULL</span>, <span class=\"hljs-number\">0</span>);<br>    shm[<span class=\"hljs-number\">1</span>] = (struct Resource *)shmat(shmid[<span class=\"hljs-number\">1</span>], <span class=\"hljs-literal\">NULL</span>, <span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-keyword\">if</span> (shm[<span class=\"hljs-number\">0</span>] == (struct Resource *)<span class=\"hljs-number\">-1</span> || shm[<span class=\"hljs-number\">1</span>] == (struct Resource *)<span class=\"hljs-number\">-1</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;shmat failed\\n&quot;</span>);<br>        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//解绑共享内存</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">detach_shm</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//把共享内存从当前进程中分离</span><br>    <span class=\"hljs-keyword\">if</span> (shmdt((<span class=\"hljs-keyword\">void</span> *)shm[<span class=\"hljs-number\">0</span>]) == <span class=\"hljs-number\">-1</span> || shmdt((<span class=\"hljs-keyword\">void</span> *)shm[<span class=\"hljs-number\">1</span>]) == <span class=\"hljs-number\">-1</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;shmdt failed\\n&quot;</span>);<br>        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//获取资源，对应信号量实施P操作</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">P</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">short</span> <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> num)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sembuf</span> <span class=\"hljs-title\">sb</span> =</span><br>        &#123;<br>            num, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">//0表示信号量编号,-1表示P操作,SEM_UNDO表示进程退出后，该进程对sem进行的操作将被撤销</span><br>        &#125;;<br>    <span class=\"hljs-comment\">//修改集合中，一个或多个信号量值</span><br>    semop(semid, &amp;sb, <span class=\"hljs-number\">1</span>);<br>&#125;<br><br><span class=\"hljs-comment\">//释放资源，对应信号量实施V操作</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">V</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">short</span> <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> num)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sembuf</span> <span class=\"hljs-title\">sb</span> =</span> &#123;<br>        num, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">//</span><br>    &#125;;<br>    semop(semid, &amp;sb, <span class=\"hljs-number\">1</span>);<br>&#125;<br><br><span class=\"hljs-comment\">//读取数据，id为0，表示A在操作，id为2，表示B在操作</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">readMessage</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">// id = 0，读取M[1]，id = 1，读取M[0]</span><br>    <span class=\"hljs-keyword\">int</span> message = <span class=\"hljs-number\">0</span>;<br>    message = shm[-id + <span class=\"hljs-number\">1</span>]-&gt;message[shm[-id + <span class=\"hljs-number\">1</span>]-&gt;front];<br>    shm[-id + <span class=\"hljs-number\">1</span>]-&gt;front = (shm[-id + <span class=\"hljs-number\">1</span>]-&gt;front + <span class=\"hljs-number\">1</span>) % MAX_NUM;<br>    <span class=\"hljs-comment\">// printf(&quot;M%d -&gt; front = %d\\n&quot;, -id + 2, shm[-id + 1]-&gt;front);</span><br>    <span class=\"hljs-keyword\">return</span> message;<br>&#125;<br><br><span class=\"hljs-comment\">//写入数据，id为0，表示A在操作，id为2，表示B在操作</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">writeMessage</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//随机生成一个范围在[1,4096]的message</span><br>    <span class=\"hljs-keyword\">int</span> message = rand() % <span class=\"hljs-number\">4096</span> + <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-comment\">//id为0，向M[0]写入，id为1，向M[1]写入</span><br>    shm[id]-&gt;message[shm[id]-&gt;rear] = message;<br>    shm[id]-&gt;rear = (shm[id]-&gt;rear + <span class=\"hljs-number\">1</span>) % MAX_NUM;<br>    <span class=\"hljs-comment\">// printf(&quot;M%d -&gt; rear = %d\\n&quot;, id + 1, shm[id]-&gt;rear);</span><br>    <span class=\"hljs-keyword\">return</span> message;<br>&#125;<br><br><span class=\"hljs-comment\">//进程A的工作</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">processA</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    attach_shm();<br>\t<span class=\"hljs-comment\">//这里让A执行4次</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> m = <span class=\"hljs-number\">0</span>; m &lt; <span class=\"hljs-number\">4</span>; m++)<br>    &#123;<br>        P(A_ENABLE);<br>        <span class=\"hljs-comment\">//当前M1中元素个数</span><br>        <span class=\"hljs-keyword\">int</span> ele1Number = (shm[<span class=\"hljs-number\">0</span>]-&gt;rear - shm[<span class=\"hljs-number\">0</span>]-&gt;front + MAX_NUM) % MAX_NUM;<br>        <span class=\"hljs-comment\">//最多写入个数</span><br>        <span class=\"hljs-keyword\">int</span> maxNum = MAX_NUM - ele1Number;<br>        <span class=\"hljs-keyword\">int</span> randInt = rand() % <span class=\"hljs-number\">10</span> + <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-comment\">//选一个小的数作为写入的信息数</span><br>        <span class=\"hljs-keyword\">int</span> times = maxNum &lt; randInt ? maxNum : randInt;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; times; i++)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;A write message %d to M1\\n&quot;</span>, writeMessage(<span class=\"hljs-number\">0</span>));<br>        &#125;<br>        <span class=\"hljs-comment\">//如果M2队列为空，也就是刚刚开始A向B，B还没向A发送过信息</span><br>        <span class=\"hljs-comment\">//所以只在M2有消息的时候才读取</span><br>        <span class=\"hljs-keyword\">if</span> (shm[<span class=\"hljs-number\">1</span>]-&gt;front != shm[<span class=\"hljs-number\">1</span>]-&gt;rear)<br>        &#123;<br>            <span class=\"hljs-comment\">//当前M2中元素个数</span><br>            <span class=\"hljs-keyword\">int</span> eleNumber = (shm[<span class=\"hljs-number\">1</span>]-&gt;rear - shm[<span class=\"hljs-number\">1</span>]-&gt;front + MAX_NUM) % MAX_NUM;<br>            <span class=\"hljs-comment\">//随机读取[1, eleNumber]次</span><br>            <span class=\"hljs-keyword\">int</span> times = rand() % eleNumber + <span class=\"hljs-number\">1</span>;<br><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; times; i++)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;A read message %d from M2\\n&quot;</span>, readMessage(<span class=\"hljs-number\">0</span>));<br>            &#125;<br>        &#125;<br>        V(B_ENABLE);<br>    &#125;<br>    detach_shm();<br>&#125;<br><br><span class=\"hljs-comment\">//进程B的工作</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">processB</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    attach_shm();<br>    <span class=\"hljs-comment\">//这里让B执行4次</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> m = <span class=\"hljs-number\">0</span>; m &lt; <span class=\"hljs-number\">4</span>; m++)<br>    &#123;<br>        P(B_ENABLE);<br>        <span class=\"hljs-comment\">//当前M1中元素个数</span><br>        <span class=\"hljs-keyword\">int</span> eleNumber = (shm[<span class=\"hljs-number\">0</span>]-&gt;rear - shm[<span class=\"hljs-number\">0</span>]-&gt;front + MAX_NUM) % MAX_NUM;<br>        <span class=\"hljs-keyword\">int</span> randInt = rand() % <span class=\"hljs-number\">10</span> + <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-comment\">//选一个小的数作为读取的信息数</span><br>        <span class=\"hljs-keyword\">int</span> times = eleNumber &lt; randInt ? eleNumber : randInt;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; times; i++)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;B read message %d from M1\\n&quot;</span>, readMessage(<span class=\"hljs-number\">1</span>));<br>        &#125;<br>        <span class=\"hljs-comment\">//向M2写times个信息</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; times; i++)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;B write message %d to M2\\n&quot;</span>, writeMessage(<span class=\"hljs-number\">1</span>));<br>        &#125;<br>        V(A_ENABLE);<br>    &#125;<br>    detach_shm();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span> <span class=\"hljs-keyword\">const</span> *argv[])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//记录父进程pid</span><br>    <span class=\"hljs-keyword\">pid_t</span> ppid = getpid();<br>    <span class=\"hljs-comment\">//信号集名字，信号集中信号量的个数，信号量集合的权限</span><br>    semid = semget((<span class=\"hljs-keyword\">key_t</span>)<span class=\"hljs-number\">1234</span>, NUM_MUX, IPC_CREAT | <span class=\"hljs-number\">0600</span>); <span class=\"hljs-comment\">//创建信号量</span><br>    <span class=\"hljs-keyword\">if</span> (semid == <span class=\"hljs-number\">-1</span>)<br>    &#123;<br>        perror(<span class=\"hljs-string\">&quot;semget&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-comment\">// 初始化信号量</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-title\">semun</span> <span class=\"hljs-title\">s</span>;</span><br>    <span class=\"hljs-comment\">//初始时，允许A执行</span><br>    s.value = <span class=\"hljs-number\">1</span>;<br>    semctl(semid, A_ENABLE, SETVAL, s);<br>    <span class=\"hljs-comment\">//初始时，不允许B执行</span><br>    s.value = <span class=\"hljs-number\">0</span>;<br>    semctl(semid, B_ENABLE, SETVAL, s);<br><br>    <span class=\"hljs-comment\">//创建共享内存</span><br>    shmid[<span class=\"hljs-number\">0</span>] = shmget((<span class=\"hljs-keyword\">key_t</span>)<span class=\"hljs-number\">1234</span>, <span class=\"hljs-keyword\">sizeof</span>(M[<span class=\"hljs-number\">0</span>]), <span class=\"hljs-number\">0666</span> | IPC_CREAT);<br>    shmid[<span class=\"hljs-number\">1</span>] = shmget((<span class=\"hljs-keyword\">key_t</span>)<span class=\"hljs-number\">5678</span>, <span class=\"hljs-keyword\">sizeof</span>(M[<span class=\"hljs-number\">1</span>]), <span class=\"hljs-number\">0666</span> | IPC_CREAT);<br><br>    <span class=\"hljs-keyword\">if</span> (shmid[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">-1</span> || shmid[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">-1</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;shmget failed\\n&quot;</span>);<br>        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    attach_shm();<br>    <span class=\"hljs-comment\">//初始化共享内存</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">memset</span>(shm[i]-&gt;message, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span>(shm[i]-&gt;message));<br>        shm[i]-&gt;front = <span class=\"hljs-number\">0</span>;<br>        shm[i]-&gt;rear = <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-comment\">//创建3个进程：1个父进程 + 1个A + 1个B</span><br>    <span class=\"hljs-keyword\">pid_t</span> child_pid[<span class=\"hljs-number\">2</span>];<br>    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i++)<br>    &#123;<br>        child_pid[i] = fork();<br>        <span class=\"hljs-comment\">//子进程</span><br>        <span class=\"hljs-keyword\">if</span> (child_pid[i] == <span class=\"hljs-number\">0</span>) <br>        &#123;<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>\t<span class=\"hljs-comment\">//A</span><br>    <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span>) <br>    &#123;<br>        processA();<br>    &#125;<br>    <span class=\"hljs-comment\">//B</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">1</span>) <br>    &#123;<br>        processB();<br>    &#125;<br>\t<span class=\"hljs-comment\">//父进程</span><br>    <span class=\"hljs-keyword\">if</span> (getpid() == ppid) <br>    &#123;<br>        <span class=\"hljs-comment\">//等待子进程结束</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i++) <br>        &#123;<br>            waitpid(child_pid[i], <span class=\"hljs-literal\">NULL</span>, <span class=\"hljs-number\">0</span>);<br>        &#125;<br>        detach_shm();<br>        <span class=\"hljs-comment\">//删除共享内存</span><br>        <span class=\"hljs-keyword\">if</span> (shmctl(shmid[<span class=\"hljs-number\">0</span>], IPC_RMID, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">-1</span> || shmctl(shmid[<span class=\"hljs-number\">1</span>], IPC_RMID, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">-1</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;shmctl(IPC_RMID) failed\\n&quot;</span>);<br>            <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"运行截图\"><a class=\"markdownIt-Anchor\" href=\"#运行截图\">#</a> 运行截图</h4>\n<p><img src=\"https://blog-img-1308044888.cos.ap-shanghai.myqcloud.com/img/image-20211115013818473.png\" alt=\"M1M2运行截图1\"></p>\n<p><img src=\"https://blog-img-1308044888.cos.ap-shanghai.myqcloud.com/img/image-20211115013923471.png\" alt=\"M1M2运行截图2\"></p>\n<p><img src=\"https://blog-img-1308044888.cos.ap-shanghai.myqcloud.com/img/image-20211115013953657.png\" alt=\"M1M2运行截图3\"></p>\n",
            "tags": [
                "Linux",
                "学习笔记"
            ]
        }
    ]
}