<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2021/11/06/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89/"/>
    <url>/2021/11/06/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql学习记录"><a class="markdownIt-Anchor" href="#mysql学习记录">#</a> MySQL 学习记录</h1><h2 id="服务的启动与关闭"><a class="markdownIt-Anchor" href="#服务的启动与关闭">#</a> 服务的启动与关闭</h2><ul><li><p>启动：net start 服务名</p></li><li><p>关闭：net stop 服务名</p></li></ul><h2 id="服务端的登录和退出"><a class="markdownIt-Anchor" href="#服务端的登录和退出">#</a> 服务端的登录和退出</h2><ul><li><p>方法一：</p><p><strong>登录</strong>：打开 MySQL 8.0 Command Line Client，输入密码即可。这种方式只能是 root 用户使用，不推荐</p><p><strong>退出</strong>：exit</p></li><li><p>方法二：</p><p><strong>登录</strong>：通过 windows cmd 输入指令 mysql -h 服务器 ip -P 端口号 -u 用户 -p 密码</p><p><strong>例如</strong>： mysql -h localhost -P 3306 -u root -p 123456</p><p><strong>注意</strong>：-p 和空格之间<strong>不能有空格</strong> 如果是本机登录，则 - h，-P 可以省略</p><p><strong>退出</strong>：exit</p></li></ul><h2 id="常见命令"><a class="markdownIt-Anchor" href="#常见命令">#</a> 常见命令</h2><ul><li><p>查看当前所有数据库：<em>show databases;</em></p></li><li><p>打开指定的库：<em>use 库名；</em></p></li><li><p>查看当前库所有表：<em>show tables;</em></p></li><li><p>查看其他库所有表：<em>show tables from 库名；</em></p></li><li><p>创建表：<em>create table 表名 (</em></p><p>​<em>列名 列类型，</em></p><p>​<em>列名 列类型，</em></p><p>​<em>…</em></p><p>​<em>);</em></p></li><li><p>查看表结构：<em>desc 表名；</em></p></li><li><p>查看服务器版本</p><ul><li><p>方式一：</p><p>登录到 mysql 服务端后，select version ();</p></li><li><p>方式二：</p><p>windows cmd 出入<em> mysql --version</em> 或<em> mysql -V</em></p></li></ul></li></ul><h2 id="mysql的语法规范"><a class="markdownIt-Anchor" href="#mysql的语法规范">#</a> MySQL 的语法规范</h2><ul><li><p><em><strong>不区分</strong></em>大小写，但建议关键字大写，表名和列名小写</p></li><li><p>每条命令最好用分号结尾</p></li><li><p>每条命令根据需要，可以进行<em><strong>缩进或换行</strong></em></p></li><li><p>注释</p><p>单行注释：# 注释文字</p><p>单行注释：-- 注释文字（注意‘–’后必须有空格）</p><p>多行注释：/* 注释文字 */</p></li></ul><h2 id="dql语言"><a class="markdownIt-Anchor" href="#dql语言">#</a> DQL 语言</h2><h3 id="基础查询"><a class="markdownIt-Anchor" href="#基础查询">#</a> 基础查询</h3><ul><li>语法：SELECT 查询列表 FROM 表名；</li><li>查询列表可以是：表中的字段</li><li>查询的结果是一个虚拟的表格</li><li><strong>字符型</strong>和<strong>日期型</strong>的常量值必须用<strong>引号</strong>引起来</li></ul><h4 id="举例"><a class="markdownIt-Anchor" href="#举例">#</a> 举例</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 查询单个字段<br><span class="hljs-keyword">SELECT</span> last_name <span class="hljs-keyword">FROM</span> employees;<br># 查询多个字段<br><span class="hljs-keyword">SELECT</span> last_name, salary, email <span class="hljs-keyword">FROM</span> employees;<br># 查询所有字段<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees;<br># 查询常量<br><span class="hljs-keyword">SELECT</span> <span class="hljs-number">100</span>;<br># 查询表达式<br><span class="hljs-keyword">SELECT</span> <span class="hljs-number">100</span> <span class="hljs-operator">*</span> <span class="hljs-number">98</span>;<br># 查询函数<br><span class="hljs-keyword">SELECT</span> VERSION();<br># 为字段起别名<br><span class="hljs-keyword">SELECT</span> last_name <span class="hljs-keyword">AS</span> 姓, first_name <span class="hljs-keyword">AS</span> 名 <span class="hljs-keyword">FROM</span> employees; # 方式一<br><span class="hljs-keyword">SELECT</span> last_name 姓, first_name 名 <span class="hljs-keyword">FROM</span> employees; # 方式二<br># 特殊情况：查询salary，显示结果为<span class="hljs-keyword">out</span> put<br># 有特殊符号的，建议加上双引号<br><span class="hljs-keyword">SELECT</span> salary <span class="hljs-keyword">AS</span> &quot;out put&quot; <span class="hljs-keyword">FROM</span> employees;<br># 去重<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> department_id <span class="hljs-keyword">FROM</span> employees;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">&#x27;+&#x27;号的作用，在MySQL中，&#x27;+&#x27;只有加法运算的作用</span><br><span class="hljs-comment">SELECT &#x27;123&#x27; + 90:如果出现字符型，试图转换成数值型，转换成功则继续做加法；转换失败，就会把字符型看成0</span><br><span class="hljs-comment">SELECT &#x27;John&#x27; + 90 结果是90</span><br><span class="hljs-comment">SELECT NULL + 90 只要出现NULL，结果一定是NULL</span><br><span class="hljs-comment">*/</span><br># CONCAT()函数<br># 案例：查询员工姓名连接成一个字段，并显示为&quot;姓名&quot;<br><span class="hljs-keyword">SELECT</span> CONCAT(last_name, first_name) <span class="hljs-keyword">AS</span> 姓名 <span class="hljs-keyword">FROM</span> employees;<br># IFNULL函数<br><span class="hljs-keyword">SELECT</span> IFNULL(exp1, exp2) # 如果exp1为空，就返回exp2；否则返回exp1<br></code></pre></div></td></tr></table></figure><h3 id="条件查询"><a class="markdownIt-Anchor" href="#条件查询">#</a> 条件查询</h3><ul><li><p>语法：SELECT 查询列表 FROM 表名 WHERE 筛选条件；</p></li><li><p>筛选条件包括：</p><ul><li>条件表达式： &gt;  &lt;=  !=  &lt;&gt;  &gt;=  &lt;=</li><li>逻辑表达式：&amp;&amp;，||，!，and，or，not</li><li>模糊查询：like，between and，not between and，in，is null,，is not null</li></ul></li></ul><h4 id="举例-2"><a class="markdownIt-Anchor" href="#举例-2">#</a> 举例</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">********************************************</span><br><span class="hljs-comment">条件表达式</span><br><span class="hljs-comment">********************************************</span><br><span class="hljs-comment">*/</span><br># 查询员工工资大于<span class="hljs-number">10000</span>的员工信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> salary <span class="hljs-operator">&gt;</span> <span class="hljs-number">10000</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">********************************************</span><br><span class="hljs-comment">逻辑表达式</span><br><span class="hljs-comment">********************************************</span><br><span class="hljs-comment">*/</span><br># 查询工资在<span class="hljs-number">10000</span>到<span class="hljs-number">20000</span>之间的员工信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> salary <span class="hljs-operator">&gt;=</span> <span class="hljs-number">10000</span> <span class="hljs-keyword">AND</span> salary <span class="hljs-operator">&lt;=</span> <span class="hljs-number">20000</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">********************************************</span><br><span class="hljs-comment">模糊查询</span><br><span class="hljs-comment">********************************************</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">模糊查询：LIKE，一般和通配符配合使用。不但可以查字符型，也可以查数值型</span><br><span class="hljs-comment">&#x27;%&#x27;代表0或n个字符</span><br><span class="hljs-comment">&#x27;_&#x27;代表一个字符</span><br><span class="hljs-comment">\_代表转义字符&#x27;_&#x27;</span><br><span class="hljs-comment">*/</span><br># 查询员工名中包含<span class="hljs-string">&#x27;a&#x27;</span>的员工信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> first_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%a%&#x27;</span>;<br># 查询员工名第三个字符为<span class="hljs-string">&#x27;a&#x27;</span>，第五个字符为<span class="hljs-string">&#x27;e&#x27;</span>的员工信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> first_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;__a_e%&#x27;</span><br># 查询员工名第三个字符为<span class="hljs-string">&#x27;_&#x27;</span>的员工信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> first_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;_\_%&#x27;</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> first_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;_$_%&#x27;</span> <span class="hljs-keyword">ESCAPE</span> <span class="hljs-string">&#x27;$&#x27;</span>; # 这里表示<span class="hljs-string">&#x27;$&#x27;</span>是转义字符，推荐使用这种<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">BETWEEN a AND b 的区间是闭区间[a,b]</span><br><span class="hljs-comment">b必须&gt;=a，否则筛选出来的结果是0条</span><br><span class="hljs-comment">*/</span><br># 查询工资在<span class="hljs-number">10000</span>到<span class="hljs-number">20000</span>之间的员工信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> salary <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">10000</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">20000</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">IN列表的值类型必须一致或兼容</span><br><span class="hljs-comment">不支持通配符</span><br><span class="hljs-comment">*/</span><br># 查询员工的工种编号是IT_PROG, AD_VP, AD_PRES中的一个的员工信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> job_id <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;IT_PROG&#x27;</span>, <span class="hljs-string">&#x27;AD_VP&#x27;</span>, <span class="hljs-string">&#x27;AD_PRES&#x27;</span>)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#x27;=&#x27;不能用于判断NULL值，要使用IS NULL或IS NOT NULL</span><br><span class="hljs-comment">*/</span><br># 查询没有奖金的员工信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> commission_pac <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;# 必须写成<span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>，不能写成 <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span><br># 查询有奖金的员工信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> commission_pac <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;# 必须写成<span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>，不能写成 <span class="hljs-operator">!=</span> <span class="hljs-keyword">null</span><br># 安全等于<span class="hljs-string">&#x27;&lt;=&gt;&#x27;</span><br># <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span> 可以写成<span class="hljs-operator">&lt;=&gt;</span> <span class="hljs-keyword">NULL</span><br># 查询工资为<span class="hljs-number">12000</span>的员工信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> salary <span class="hljs-operator">&lt;=&gt;</span> <span class="hljs-number">12000</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">IS NULL只能判断NULL值</span><br><span class="hljs-comment">&lt;=&gt; 既可以判断NULL值，也可以判断普通的数值，但可读性较低</span><br><span class="hljs-comment">*/</span><br># ISNULL(expr)如果expr是<span class="hljs-keyword">NULL</span>，就返回<span class="hljs-number">1</span>，否则返回<span class="hljs-number">0</span><br><span class="hljs-keyword">SELECT</span> ISNULL(commission_pac) <span class="hljs-keyword">FROM</span> employees;<br></code></pre></div></td></tr></table></figure><h4 id="一个坑"><a class="markdownIt-Anchor" href="#一个坑">#</a> 一个坑</h4><blockquote><p><strong>问</strong>：SELECT * FROM employees 和 SELECT * FROM employees WHERE first_name LIKE ‘%%’ AND last_name LIKE '%%' 效果一样吗？</p><p><strong>答</strong>：不一样，如果 first_name 或 last_name 中包含 NULL 值，则不一样。因为 NULL LIKE ’%%‘是错的。</p></blockquote><h3 id="排序查询"><a class="markdownIt-Anchor" href="#排序查询">#</a> 排序查询</h3><ul><li>语法：SELECT 查询列表 FROM 表名 [WHERE 子句] ORDER BY 排序列表 [asc | desc]；</li><li>默认是从小到大排序</li><li>如果排序列表有多个，则优先按写在前面的排序列表排序。对每个排序列表，可以分别指定是升序或者降序</li></ul><h4 id="举例-3"><a class="markdownIt-Anchor" href="#举例-3">#</a> 举例</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 查询员工信息，要求工资从高到低排序<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary <span class="hljs-keyword">ASC</span>;<br># 查询员工信息，要求工资从低到高排序<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary <span class="hljs-keyword">DESC</span>;<br># 查询部门编号大于等于<span class="hljs-number">90</span>的员工信息，要求按入职时间从小到大排序<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> department_id <span class="hljs-operator">&gt;=</span> <span class="hljs-number">90</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> hire_date <span class="hljs-keyword">ASC</span>;<br># 按年薪的高低显示员工信息（按表达式排序）<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary <span class="hljs-operator">*</span> <span class="hljs-number">12</span> <span class="hljs-operator">*</span> (<span class="hljs-number">1</span> <span class="hljs-operator">+</span> IFNULL(commision_pac, <span class="hljs-number">0</span>)) <span class="hljs-keyword">ASC</span>;<br># 按姓的长度显示员工信息（按函数排序）<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> LENGTH(last_name) <span class="hljs-keyword">ASC</span>;<br># 查询员工信息，按照工资排序，若工资相同，则按员工编号排序（多个字段排序）<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary <span class="hljs-keyword">ASC</span>, employee_id <span class="hljs-keyword">DESC</span>;<br></code></pre></div></td></tr></table></figure><h3 id="常见函数"><a class="markdownIt-Anchor" href="#常见函数">#</a> 常见函数</h3><p>语法：SELECT 函数名 () [FROM 表]；</p><p>分类：</p><ul><li>单行函数</li><li>分组函数：用作统计用，输入多个数据，输出一个数据</li></ul><h4 id="字符函数"><a class="markdownIt-Anchor" href="#字符函数">#</a> 字符函数</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">#<span class="hljs-number">1</span>、LENGTH()：用于获取参数值的字节个数<br><span class="hljs-keyword">SELECT</span> LENGTH(<span class="hljs-string">&#x27;john&#x27;</span>);<br><span class="hljs-keyword">SELECT</span> LENGTH(<span class="hljs-string">&#x27;张三丰hahaha&#x27;</span>); # utf<span class="hljs-number">-8</span>中一个汉字占<span class="hljs-number">3</span>个字节<br># <span class="hljs-number">2</span>、CONCAT（）：拼接字符串<br><span class="hljs-keyword">SELECT</span> CONCAT(first_name, <span class="hljs-string">&#x27;_&#x27;</span>, last_name) <span class="hljs-keyword">AS</span> 姓名 <span class="hljs-keyword">FROM</span> employees;<br>#<span class="hljs-number">3</span>、<span class="hljs-built_in">UPPER</span>(),<span class="hljs-built_in">LOWER</span>():将字符转成大写、小写<br><span class="hljs-keyword">SELECT</span> CONCAT(<span class="hljs-built_in">UPPER</span>(first_name), <span class="hljs-built_in">LOWER</span>(last_name)) <span class="hljs-keyword">AS</span> 姓名 <span class="hljs-keyword">FROM</span> employees;<br># <span class="hljs-number">4</span>、SUBSTR,SUBSTRING<br># 注意：<span class="hljs-keyword">SQL</span>语言中，索引从<span class="hljs-number">1</span>开始！！！！！！<br><span class="hljs-keyword">SELECT</span> SUBSTR(<span class="hljs-string">&#x27;12345678&#x27;</span>, <span class="hljs-number">6</span>) # 截取从索引位置为<span class="hljs-number">6</span>开始的字串<br><span class="hljs-keyword">SELECT</span> SUBSTR(<span class="hljs-string">&#x27;12345678&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>) # 截取从索引位置为<span class="hljs-number">1</span>，字符长度为<span class="hljs-number">3</span>的字串<br># <span class="hljs-number">5</span>、INSTR(expr1, expr2)：判断expr2在expr1首次出现的起始索引位置，若不存在，则返回<span class="hljs-number">0</span><br><span class="hljs-keyword">SELECT</span> INSTR(<span class="hljs-string">&#x27;12341234&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>); # 输出是<span class="hljs-number">1</span><br># <span class="hljs-number">6</span>、<span class="hljs-built_in">TRIM</span>()<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">TRIM</span>(<span class="hljs-string">&#x27;   1234   &#x27;</span>); # 去除字符前后的空格<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">TRIM</span>(<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;aaaa1234aaaaaaa&#x27;</span>); # 去除字符前后的<span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">TRIM</span>(<span class="hljs-string">&#x27;aa&#x27;</span> <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;aaaaa1234aaaaaaa&#x27;</span>); # 以<span class="hljs-string">&#x27;aa&#x27;</span>为单位去除字符前后的<span class="hljs-string">&#x27;aa&#x27;</span>，这里的输出是<span class="hljs-string">&#x27;a1234a&#x27;</span><br># <span class="hljs-number">7</span>、LPAD()：用指定的字符实现左填充到指定长度<br><span class="hljs-keyword">SELECT</span> LPAD(<span class="hljs-string">&#x27;ABC&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;*&#x27;</span>); # 输出是<span class="hljs-string">&#x27;*******ABC&#x27;</span><br><span class="hljs-keyword">SELECT</span> LPAD(<span class="hljs-string">&#x27;ABC&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;*&#x27;</span>); # 输出是<span class="hljs-string">&#x27;AB&#x27;</span><br># <span class="hljs-number">8</span>、RPAD()：用指定的字符实现左填充到指定长度<br># <span class="hljs-number">9</span>、REPLACE():替换<br><span class="hljs-keyword">SELECT</span> REPLACE(<span class="hljs-string">&#x27;ABC&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>) # 把<span class="hljs-string">&#x27;ABC&#x27;</span>中的所有<span class="hljs-string">&#x27;A&#x27;</span>换成<span class="hljs-string">&#x27;C&#x27;</span><br></code></pre></div></td></tr></table></figure><h4 id="数学函数"><a class="markdownIt-Anchor" href="#数学函数">#</a> 数学函数</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># <span class="hljs-number">1</span>、round(x)：四舍五入<br><span class="hljs-keyword">SELECT</span> ROUND(<span class="hljs-number">1.65</span>); # <span class="hljs-number">2</span><br><span class="hljs-keyword">SELECT</span> ROUND(<span class="hljs-number">-1.65</span>); # <span class="hljs-number">-2</span><br><span class="hljs-keyword">SELECT</span> ROUND(<span class="hljs-number">-1.45</span>); # <span class="hljs-number">-1</span><br># <span class="hljs-number">2</span>、ROUND(x, y)：照第y位小数四舍五入<br># <span class="hljs-number">3</span>、<span class="hljs-built_in">CEIL</span>(X)：返回大于等于x的最小整数<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CEIL</span>(<span class="hljs-number">1.01</span>); # <span class="hljs-number">2</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CEIL</span>(<span class="hljs-number">1.00</span>); # <span class="hljs-number">1</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CEIL</span>(<span class="hljs-number">-1.01</span>); # <span class="hljs-number">-1</span><br># <span class="hljs-number">4</span>、<span class="hljs-built_in">FLOOR</span>(x)：返回小于等于x的最大整数<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CEIL</span>(<span class="hljs-number">1.01</span>); # <span class="hljs-number">1</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CEIL</span>(<span class="hljs-number">1.00</span>); # <span class="hljs-number">1</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CEIL</span>(<span class="hljs-number">-1.01</span>); # <span class="hljs-number">-2</span><br># <span class="hljs-number">5</span>、<span class="hljs-keyword">TRUNCATE</span>(x, y)：让x保留y位小数<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">TRUNCATE</span>(<span class="hljs-number">1.6999</span>, <span class="hljs-number">1</span>); # <span class="hljs-number">1.6</span><br># <span class="hljs-number">6</span>、<span class="hljs-built_in">MOD</span>(a,b)：取余  <span class="hljs-operator">=</span> a <span class="hljs-operator">-</span> a <span class="hljs-operator">/</span> b <span class="hljs-operator">*</span> b<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MOD</span>(<span class="hljs-number">10</span>, <span class="hljs-number">3</span>); # <span class="hljs-number">1</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MOD</span>(<span class="hljs-number">-10</span>, <span class="hljs-number">-3</span>); # <span class="hljs-number">-1</span><br></code></pre></div></td></tr></table></figure><h4 id="日期函数"><a class="markdownIt-Anchor" href="#日期函数">#</a> 日期函数</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># <span class="hljs-number">1</span>、NOW():返回当前系统日期 <span class="hljs-operator">+</span> 时间<br><span class="hljs-keyword">SELECT</span> NOW();<br># <span class="hljs-number">2</span>、CURDATE()：返回当年系统日期，不包含时间<br><span class="hljs-keyword">SELECT</span> CURDATE(); # <span class="hljs-number">2021</span><span class="hljs-number">-11</span><span class="hljs-number">-08</span><br># <span class="hljs-number">3</span>、CURTIME()：获取当前时间，不包含日期<br><span class="hljs-keyword">SELECT</span> CURTIME(); # <span class="hljs-number">12</span>:<span class="hljs-number">17</span>:<span class="hljs-number">43</span><br># <span class="hljs-number">4</span>、获取指定部分：年，月，日，时，分，秒<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span>(NOW());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span>(<span class="hljs-string">&#x27;2021-11-08&#x27;</span>); # <span class="hljs-number">2021</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MONTH</span>(NOW());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DAY</span>(NOW());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">HOUR</span>(NOW());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MINUTE</span>(NOW());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">SECOND</span>(NOW());<br># <span class="hljs-number">5</span>、STR_TO_DATE():将日期格式的字符串转换成指定格式的日期<br><span class="hljs-keyword">SELECT</span> STR_TO_DATE(<span class="hljs-string">&#x27;1998-3-02&#x27;</span>,<span class="hljs-string">&#x27;%Y-%c-%d&#x27;</span>) <br># <span class="hljs-number">6</span>、DATA_FORMATE()：将日期转换成字符<br><span class="hljs-keyword">SELECT</span> DATE_FORMAT(NOW(),<span class="hljs-string">&#x27;%y-%m-%d&#x27;</span>);<br># DATEDIFF(exp1, exp2)：求两个日期时间之差<br></code></pre></div></td></tr></table></figure><h4 id="流程控制函数"><a class="markdownIt-Anchor" href="#流程控制函数">#</a> 流程控制函数</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># IF()：实现if<span class="hljs-operator">-</span><span class="hljs-keyword">else</span>的效果<br><span class="hljs-keyword">SELECT</span> IF(expr1, expr2, expr3); # 若expr1为真，返回expr2，否则expr3<br># <span class="hljs-keyword">CASE</span>函数，使用一：类似于Java中switch <span class="hljs-keyword">case</span>的效果<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">格式： case 要判断的字段或表达式</span><br><span class="hljs-comment">when 常量1 then 要显示的值或语句1;（值的时候不加&#x27;;&#x27;，语句的时候加&#x27;;&#x27;）</span><br><span class="hljs-comment">when 常量2 then 要显示的值或语句2;</span><br><span class="hljs-comment">...</span><br><span class="hljs-comment">else 要显示的值或语句2;</span><br><span class="hljs-comment">end [as new_name]</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">SELECT</span> salary, department_id,<br><span class="hljs-keyword">CASE</span> department_id <br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">30</span> <span class="hljs-keyword">THEN</span> salary <span class="hljs-operator">*</span> <span class="hljs-number">1.1</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">40</span> <span class="hljs-keyword">THEN</span> salary <span class="hljs-operator">*</span> <span class="hljs-number">1.2</span><br><span class="hljs-keyword">ELSE</span> salary <span class="hljs-operator">*</span> <span class="hljs-number">1.2</span><br><span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;新工资&#x27;</span> <br><span class="hljs-keyword">FROM</span> employees<br># <span class="hljs-keyword">CASE</span>函数，使用二：类似于Java中的多重if<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">CASE</span><br><span class="hljs-comment">WHEN 条件1 THEN 要显示的值或语句1;（值的时候不加&#x27;;&#x27;，语句的时候加&#x27;;&#x27;）</span><br><span class="hljs-comment">WHEN 条件2 THEN 要显示的值1或语句2;</span><br><span class="hljs-comment">...</span><br><span class="hljs-comment">ELSE 要显示的值1或语句2;</span><br><span class="hljs-comment">END</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">SELECT</span> salary,<br><span class="hljs-keyword">CASE</span><br><span class="hljs-keyword">WHEN</span> salary <span class="hljs-operator">&gt;</span> <span class="hljs-number">12000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;A&#x27;</span><br><span class="hljs-keyword">WHEN</span> salary <span class="hljs-operator">&gt;</span> <span class="hljs-number">10000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;B&#x27;</span><br><span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;C&#x27;</span><br><span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> rank<br><span class="hljs-keyword">FROM</span> employees<br></code></pre></div></td></tr></table></figure><h4 id="其他函数"><a class="markdownIt-Anchor" href="#其他函数">#</a> 其他函数</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># VERSION()：版本号<br># DATABASE()：查看当前数据库<br># <span class="hljs-keyword">USER</span>()：当前用户<br></code></pre></div></td></tr></table></figure><h4 id="聚合函数"><a class="markdownIt-Anchor" href="#聚合函数">#</a> 聚合函数</h4><p>SUM、AVG、MAX、MIN、COUNT</p><ul><li>sum，avg 一般用于处理数值型</li><li>max、min、count 可以处理任何类型</li><li>以上聚合函数都会忽略 NULL 值，求平均时，分母也是忽略 NULL 的</li><li>可以和 distinct 搭配</li><li>和聚集函数一同查询的字段<strong>只能是 GROUP BY 之后</strong>的字段</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SQL"># SUM<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(salary) <span class="hljs-keyword">FROM</span> employees; # 求工资之和<br># 配合使用<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(salary), <span class="hljs-built_in">MAX</span>(salary) <span class="hljs-keyword">FROM</span> employees; # 求总和以及最大值<br># <span class="hljs-built_in">COUNT</span>() 计算不为<span class="hljs-keyword">NULL</span>的数量 <br># 和<span class="hljs-keyword">DISTINCT</span>搭配使用，去重<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(<span class="hljs-keyword">DISTINCT</span> salary), <span class="hljs-built_in">SUM</span>(salary) <span class="hljs-keyword">FROM</span> employees;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> salary) <span class="hljs-keyword">FROM</span> employees<br># <span class="hljs-built_in">COUNT</span>()的详细介绍<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span> (<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> employees # 统计总行数（对于每一行，只要有一个字段不为<span class="hljs-keyword">NULL</span>，就加<span class="hljs-number">1</span>）<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(常量值) <span class="hljs-keyword">FROM</span> employees # 统计总行数 <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">效率对比：</span><br><span class="hljs-comment">MYISAM存储引擎下，COUNT(*)效率高</span><br><span class="hljs-comment">INNODB存储引擎下，COUNT(*)和COUNT(1)效率差不多，比COUNT(常量值)要高一些</span><br><span class="hljs-comment">推荐使用COUNT(*)</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h3 id="分组查询"><a class="markdownIt-Anchor" href="#分组查询">#</a> 分组查询</h3><ul><li><p>语法</p><blockquote><p>SELECT 查询列表 FROM 查询列表 [WHERE 字句]  [ GROUP BY 子句  [ HAVING 子句 ] ]  [ ORDER BY 子句 ]</p></blockquote></li><li><p>要求查询列表是分组函数和<em> GROUP BY</em> 后出现的字段</p></li><li><p><em>WHERE 子句</em>的执行顺序先于<em> GROUP BY</em>，<em>HAVING 子句</em>的执行顺序后于<em> GROUP BY</em></p></li><li><p>WHERE 子句的数据源是原始表，而 HAVING 子句的数据源是 GROUP BY 的筛选结果，所以在 WHERE 子句不能直接使用聚合函数</p></li><li><p>GROUP BY 子句支持单字段分组，也支持多字段分组（多个字段之间用逗号隔开，和顺序无关），也支持函数或表达式。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 查询每个工种的平均工资<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(salary), job_id <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job_id;<br># 查询每个领导手下员工中有奖金的员工的最高工工资<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(salary), manager_id <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> commission_pac <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> manager_id;<br># 复杂的分组查询，分组后的筛选<br># 查询那个部门的员工人数 <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>), department_id <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>;<br># 查询每个工种有奖金的员工的最高工资大于<span class="hljs-number">12000</span>的工种编号和最高工资<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(salary), job_id <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> commission_pac <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job_id <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">MAX</span>(salary) <span class="hljs-operator">&gt;</span> <span class="hljs-number">12000</span><br># 查询领导编号 <span class="hljs-operator">&gt;</span> <span class="hljs-number">102</span>的每个领导手下的最低工资大于<span class="hljs-number">5000</span>的领导编号是哪个，以及最低工资<br><span class="hljs-keyword">SELECT</span> manager_id, <span class="hljs-built_in">MIN</span>(salary) <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> manager_id <span class="hljs-operator">&gt;</span> <span class="hljs-number">102</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> manager_id <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">MIN</span>(salary) <span class="hljs-operator">&gt;</span> <span class="hljs-number">5000</span><br># 按表达式或函数分组<br># 例：按照员工姓名分组，查询每组员工的人数，筛选出员工个数 <span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span>的有哪些<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>), LENGTH(last_name) <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> LENGTH(last_name) <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(last_name) <span class="hljs-operator">&gt;</span> <span class="hljs-number">5</span><br># 按多个字段分组<br># 例：查询每个部门每个工种的员工的平均工资<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(salary), department_id, job_id <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job_id, department_id;<br># 添加排序<br># 查询每个部门每个工种的员工的平均工资，并按平均工资从小到大排序<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(salary), department_id, job_id <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job_id, department_id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">AVG</span>(salary) <span class="hljs-keyword">ASC</span><br></code></pre></div></td></tr></table></figure><h3 id="连接查询"><a class="markdownIt-Anchor" href="#连接查询">#</a> 连接查询</h3><ul><li><p>语法</p><blockquote><p>SELECT 查询列表 FROM A, B [WHERE 子句] [ 其他子句 ]</p></blockquote></li><li><p>查询的数据源是 A 和 B 的笛卡尔积，若 A 有 m 行，B 有 n 行，则 A 和 B 的笛卡尔积有 mn 行。</p></li><li><p>通常需要使用 WHERE 子句进行筛选</p></li><li><p>MySQL 不支持全外连接</p></li></ul><h4 id="等值连接"><a class="markdownIt-Anchor" href="#等值连接">#</a> 等值连接</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 等值连接<br># 例：查询女生对应的男生<br><span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;name&#x27;</span>, boy_name <span class="hljs-keyword">FROM</span> girls, boys <span class="hljs-keyword">WHERE</span> girls.boyfriend_id <span class="hljs-operator">=</span> boys.id;<br># 例：查询员工名和对应的部门名<br><span class="hljs-keyword">SELECT</span> last_name, department_name <span class="hljs-keyword">FROM</span> employees, departments <br><span class="hljs-keyword">WHERE</span> employees.department_id <span class="hljs-operator">=</span> departmens.departmen_id;<br># 为表起别名，起了别名后，就不能使用原来的表名了<br># 查询员工名、工种号、工种名<br><span class="hljs-keyword">SELECT</span> last_name, e.job_id <span class="hljs-comment">/*因为两个表都有job_id字段，所以要指明*/</span>, job_title <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">AS</span> e, jobs <span class="hljs-keyword">AS</span> j <span class="hljs-keyword">WHERE</span> e.job_id <span class="hljs-operator">=</span> j.job_id;<br># 配合筛选<br># 查询有奖金的员工名、部门名<br><span class="hljs-keyword">SELECT</span> last_name, department_name <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">AS</span> e, dempartments <span class="hljs-keyword">AS</span> d<br><span class="hljs-keyword">WHERE</span> e.<span class="hljs-string">&#x27;deparrment_id&#x27;</span> <span class="hljs-operator">=</span> d.<span class="hljs-string">&#x27;departmen_id&#x27;</span> <span class="hljs-keyword">AND</span> e.commission_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br># 配合分组<br># 查询每个城市的部门个数<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>), city <span class="hljs-keyword">FROM</span> departments, locations <span class="hljs-keyword">WHERE</span> departments.location_id <span class="hljs-operator">=</span> locations.id <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> city;<br># 查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资<br><span class="hljs-keyword">SELECT</span> department_name, manager_id, <span class="hljs-built_in">MIN</span>(salary) <span class="hljs-keyword">FROM</span> departments, employees<br><span class="hljs-keyword">WHERE</span> departments.manager_id <span class="hljs-operator">=</span> employees.manager_id <span class="hljs-keyword">AND</span> commissioin_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_name;<br># 配合排序<br># 查询每个工种的工种名和员工个数，按员工个数降序<br><span class="hljs-keyword">SELECT</span> job_title, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> employees, jobs <span class="hljs-keyword">WHERE</span> emoloyees.job_id <span class="hljs-operator">=</span> jobs.job_id <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job_title <span class="hljs-keyword">DESC</span>;<br># 多表连接<br># 例：查询员工名，部门名和所在城市，按员工名降序排序<br><span class="hljs-keyword">SELECT</span> last_name, department_name, city<br><span class="hljs-keyword">FROM</span> employees e, departments d, locations l<br><span class="hljs-keyword">WHERE</span> e.department_id <span class="hljs-operator">=</span> d.department_id <span class="hljs-keyword">AND</span> d.location_id <span class="hljs-operator">=</span> l.location_id <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> last_name <span class="hljs-keyword">DESC</span>;<br></code></pre></div></td></tr></table></figure><h4 id="非等值连接"><a class="markdownIt-Anchor" href="#非等值连接">#</a> 非等值连接</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 非等值连接<br># 例：查询员工的工资和工资等级<br><span class="hljs-keyword">SELECT</span> salary, grade_level <span class="hljs-keyword">FROM</span> employees, job_grades <br><span class="hljs-keyword">WHERE</span> employees.salary <span class="hljs-keyword">BETWEEN</span> job_grades.lowest_salary <span class="hljs-keyword">AND</span> job_grades.highest_salary;<br></code></pre></div></td></tr></table></figure><h4 id="自连接"><a class="markdownIt-Anchor" href="#自连接">#</a> 自连接</h4><ul><li>使用自连接<strong>必须起别名</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 例：查询员工名和其上级的名字<br><span class="hljs-keyword">SELECT</span> A.last_name, B.last_name <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">AS</span> A, employees <span class="hljs-keyword">AS</span> B<br><span class="hljs-keyword">WHERE</span> A.manager_id <span class="hljs-operator">=</span> B.id;<br></code></pre></div></td></tr></table></figure><h4 id="sql99语法"><a class="markdownIt-Anchor" href="#sql99语法">#</a> SQL99 语法</h4><ul><li><p>语法：</p><blockquote><p>SELECT 查询列表</p><p>FROM 表 1 别名 [连接类型] JOIN 表 2 别名</p><p>ON 连接条件</p><p>[WHERE 子句]</p><p>[ GROUP BY 子句</p><p>[HAVING 子句] ]</p><p>[ORDER BY 子句]</p></blockquote></li><li><p>分类</p><ul><li><p>内连接：INNER</p></li><li><p>外连接</p><ul><li>左外连接：LEFT [OUTER]</li><li>右外连接：RIGHT [OUTER]</li><li>全外连接：FULL [OUTER]</li></ul></li><li><p>交叉连接：CROSS</p></li></ul></li><li><p>注意：如果有多个连接，则必须每个连接后面跟一个 ON 子句，不能写在一起</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 内连接 -- </span><br># 等值连接<br># 例：查询员工名、部门名<br><span class="hljs-keyword">SELECT</span> last_name, department_name <br><span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">AS</span> e <br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departmens <span class="hljs-keyword">AS</span> d<br><span class="hljs-keyword">ON</span> e.department_id <span class="hljs-operator">=</span> d.department_id;<br># 非等值连接<br># 例：查询员工的工资级别，按工资从小到大排序<br><span class="hljs-keyword">SELECT</span> salary,grade_level<br><span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">AS</span> e<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> job_grades <span class="hljs-keyword">AS</span> g<br><span class="hljs-keyword">ON</span> e.salary <span class="hljs-keyword">BETWEEN</span> g.lowest_sal <span class="hljs-keyword">AND</span> g.highest_sal<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary <span class="hljs-keyword">ASC</span>;<br># 自连接<br># 例：查询员工名和他领导的名字<br><span class="hljs-keyword">SELECT</span> e.last_name, m.last_name<br><span class="hljs-keyword">FROM</span> employees e<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> employees m<br><span class="hljs-keyword">ON</span> e.manager_id <span class="hljs-operator">=</span> m.employee_id;<br></code></pre></div></td></tr></table></figure><h2 id="dml语言"><a class="markdownIt-Anchor" href="#dml语言">#</a> DML 语言</h2><h2 id="ddl语言"><a class="markdownIt-Anchor" href="#ddl语言">#</a> DDL 语言</h2><h2 id="tcl语言"><a class="markdownIt-Anchor" href="#tcl语言">#</a> TCL 语言</h2><h2 id="视图"><a class="markdownIt-Anchor" href="#视图">#</a> 视图</h2><h2 id="存储过程和函数"><a class="markdownIt-Anchor" href="#存储过程和函数">#</a> 存储过程和函数</h2>]]></content>
    
    
    <categories>
      
      <category>面向Offer学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE</title>
    <link href="/2021/11/04/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/11/04/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="java"><a class="markdownIt-Anchor" href="#java">#</a> Java</h1><h2 id="多线程"><a class="markdownIt-Anchor" href="#多线程">#</a> 多线程</h2><h3 id="线程同步"><a class="markdownIt-Anchor" href="#线程同步">#</a> 线程同步</h3><ol><li>实现进程同步的三种方法</li></ol><ul><li><strong>同步方法</strong></li><li><strong>同步代码块</strong></li><li><strong>ReentrantLock</strong>（JDK5.0 新增）</li></ul><ol start="2"><li>三种方法的推荐优先顺序（从性能考虑）</li></ol><ul><li><strong>ReentrantLock</strong>   &gt;   ** 同步代码块 **  &gt;   <strong>同步方法</strong></li></ul><h2 id="java常用类的概述"><a class="markdownIt-Anchor" href="#java常用类的概述">#</a> Java 常用类的概述</h2><h3 id="字符串相关的类"><a class="markdownIt-Anchor" href="#字符串相关的类">#</a> 字符串相关的类</h3><h4 id="string"><a class="markdownIt-Anchor" href="#string">#</a> String</h4><h5 id="string类的基本概念"><a class="markdownIt-Anchor" href="#string类的基本概念">#</a> String 类的基本概念</h5><p><img src="https://gitee.com/dzcgood/img-bed/raw/master/img/image-20210828233332312.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/8/28 - 23:03</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* String类的使用</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 1、String：字符串，用一对&quot;&quot;引起来表示</span><br><span class="hljs-comment">    * 2、String是声明为final的，不可被继承</span><br><span class="hljs-comment">    * 3、String实现了Serializable接口：表示字符串是支持序列化的</span><br><span class="hljs-comment">    *    String实现了Comparable接口，表示String可以比较大小</span><br><span class="hljs-comment">    * 4、String内部定义了final char value[]用于存储字符串数据</span><br><span class="hljs-comment">    * 5、String代表一个不可变的字符序列。简称：不可变性</span><br><span class="hljs-comment">    *   体现：当对字符串重新赋值时，需要重新指定内存区域赋值，不能使用原有的value[]进行赋值</span><br><span class="hljs-comment">    *        当对现有字符串进行连接操作时，也不能在原有value[]上进行拼接</span><br><span class="hljs-comment">    *        当调用String的replace方法修改指定的字符或字符串时，也必须重新指定内存地址赋值</span><br><span class="hljs-comment">    * 6、通过字面量的方式给字符串赋值（区别于new Sting的方式），此时的字符串值声明在字符串常量池中，</span><br><span class="hljs-comment">    *    字符串常量池是不会存储相同的内容的</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        String s1 = <span class="hljs-string">&quot;abc&quot;</span>;<span class="hljs-comment">//字面量的定义方式</span><br>        String s2 = <span class="hljs-string">&quot;abc&quot;</span>;<br>        System.out.println(s1 == s2);<span class="hljs-comment">//true, &quot;abc&quot;保存在方法区的常量池中</span><br>        s1 = <span class="hljs-string">&quot;hello&quot;</span>;<br>        System.out.println(s1);<span class="hljs-comment">//hello</span><br>        System.out.println(s2);<span class="hljs-comment">//abc</span><br>        String s3 = <span class="hljs-string">&quot;abc&quot;</span>;<br>        s3 += <span class="hljs-string">&quot;def&quot;</span>;<br>        System.out.println(s3);<span class="hljs-comment">//abcdef</span><br>        System.out.println(s2);<span class="hljs-comment">//abc</span><br>        String s4 = <span class="hljs-string">&quot;abc&quot;</span>;<br>        String s5 = s4.replace(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>);<br>        System.out.println(s4);<span class="hljs-comment">//abc</span><br>        System.out.println(s5);<span class="hljs-comment">//mbc</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * String的实例化方式</span><br><span class="hljs-comment">    * 1、通过字面量的方式</span><br><span class="hljs-comment">    * 2、通过new + 构造器的方式</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//通过字面量的方式，此时的s1和s2的数据hello声明在方法区的字符串常量池中</span><br>        String s1 = <span class="hljs-string">&quot;hello&quot;</span>;<br>        String s2 = <span class="hljs-string">&quot;hello&quot;</span>;<br>        <span class="hljs-comment">//通过new + 构造器的方式，此时的s3和s4是保存的地址值，是数据在堆空间中开辟的对象的地址值</span><br>        String s3 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;hello&quot;</span>);<br>        String s4 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(s1 == s2);<span class="hljs-comment">//true</span><br>        System.out.println(s1 == s3);<span class="hljs-comment">//false</span><br>        System.out.println(s1 == s4);<span class="hljs-comment">//false</span><br>        System.out.println(s3 == s4);<span class="hljs-comment">//false</span><br>        <span class="hljs-comment">//**************************************</span><br>        Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>);<br>        Person p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>);<br>        System.out.println(p1.name.equals(p2.name));<span class="hljs-comment">//true</span><br>        System.out.println(p1.name == p2.name);<span class="hljs-comment">//true，因为是使用字面量的方式声明的字符串</span><br>        <span class="hljs-comment">//**************************************</span><br>        Person p3 = <span class="hljs-keyword">new</span> Person(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Tom&quot;</span>), <span class="hljs-number">12</span>);<br>        Person p4 = <span class="hljs-keyword">new</span> Person(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Tom&quot;</span>), <span class="hljs-number">12</span>);<br>        System.out.println(p3.name == p4.name);<span class="hljs-comment">//false，因为是使用new + 构造器的方式声明的字符串</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 结论：</span><br><span class="hljs-comment">    * 1、常量与常量的拼接结果在常量池，且常量池不会存在相同内容的常量</span><br><span class="hljs-comment">    * 2、只要其中有一个是变量，结果就在堆中</span><br><span class="hljs-comment">    * 3、如果拼接的结果调用intern()方法，返回值就在常量池中</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        String s1 = <span class="hljs-string">&quot;javaEE&quot;</span>;<br>        String s2 = <span class="hljs-string">&quot;hadoop&quot;</span>;<br>        String s3 = <span class="hljs-string">&quot;javaEEhadoop&quot;</span>;<br>        String s4 = <span class="hljs-string">&quot;javaEE&quot;</span> + <span class="hljs-string">&quot;hadoop&quot;</span>;<span class="hljs-comment">//常量 + 常量，结果在常量池</span><br>        String s5 = s1 + <span class="hljs-string">&quot;hadoop&quot;</span>;<span class="hljs-comment">//变量 + 常量，结果在堆</span><br>        String s6 = <span class="hljs-string">&quot;javaEE&quot;</span> + s2;<span class="hljs-comment">//常量 + 变量，结果在堆</span><br>        String s7 = s1 + s2;<span class="hljs-comment">//变量 + 变量，结果在堆</span><br>        System.out.println(s3 == s4);<span class="hljs-comment">//true</span><br>        System.out.println(s3 == s5);<span class="hljs-comment">//false</span><br>        System.out.println(s3 == s6);<span class="hljs-comment">//false</span><br>        System.out.println(s5 == s6);<span class="hljs-comment">//false</span><br>        System.out.println(s3 == s7);<span class="hljs-comment">//false</span><br>        System.out.println(s6 == s7);<span class="hljs-comment">//false</span><br>        String s8 = s5.intern();<span class="hljs-comment">//返回值得到的s8使用的是常量池中已经存在的&quot;javaEEhadoop&quot;</span><br>        System.out.println(s3 == s8);<span class="hljs-comment">//true</span><br>        String str = <span class="hljs-string">&quot;hello world&quot;</span>;<br>        <span class="hljs-keyword">final</span> String str1 = <span class="hljs-string">&quot;hello &quot;</span>;<span class="hljs-comment">//str1是常量</span><br>        String str2 = str1 + <span class="hljs-string">&quot;world&quot;</span>;<br>        System.out.println(str == str2);<span class="hljs-comment">//true,因为str1加了final，所以是常量！！</span><br>    &#125;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(String str, <span class="hljs-keyword">char</span>[] ch)</span></span>&#123;<br>        str = <span class="hljs-string">&quot;test ok&quot;</span>;<br>        ch[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;b&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 一道恶心的面试题</span><br><span class="hljs-comment">    * 考察String的不可变性</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        String str = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;good&quot;</span>);<br>        <span class="hljs-keyword">char</span>[] ch = &#123; <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>&#125;;<br>        change(str, ch);<br>        System.out.print(str);<span class="hljs-comment">//good</span><br>        System.out.println(ch);<span class="hljs-comment">//best</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="string类的常用api"><a class="markdownIt-Anchor" href="#string类的常用api">#</a> String 类的常用 API</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/8 - 11:17</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* String类常用API</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringMethodTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 较高频率的方法</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        String s1 = <span class="hljs-string">&quot;Hello World&quot;</span>;<br>        System.out.println(s1.length());<span class="hljs-comment">//length()</span><br>        System.out.println(s1.charAt(<span class="hljs-number">0</span>));<span class="hljs-comment">//charAt()</span><br>        System.out.println(s1.isEmpty());<span class="hljs-comment">//isEmpty()，返回str.length() == 0</span><br>        String s2 = s1.toLowerCase();<span class="hljs-comment">//toLowerCase()，返回新建的小写值</span><br>        System.out.println(s1);<span class="hljs-comment">//s1的值没有改变（不可变性）</span><br>        System.out.println(s2);<span class="hljs-comment">//hello world</span><br>        String s3 = s1.toUpperCase();<span class="hljs-comment">//toUpperCase(),返回新建的大写值</span><br>        String s4 = <span class="hljs-string">&quot;   he  llo   world    &quot;</span>;<br>        String s5 = s3.trim();<span class="hljs-comment">//trim(),返回去除首尾空格后的字符串值（中间的空格不去除）</span><br>        System.out.println(s3);<span class="hljs-comment">//s3本身不改变</span><br>        System.out.println(s4);<br>        System.out.println(s1.equals(s2));<span class="hljs-comment">//equals()，判断字符串是否相等</span><br>        System.out.println(s1.equalsIgnoreCase(s2));<span class="hljs-comment">//equalsIgnoreCase()，判断字符串是否相等，忽略大小写</span><br>        String s6 = <span class="hljs-string">&quot;abc&quot;</span>;<br>        String s7 = <span class="hljs-string">&quot;def&quot;</span>;<br>        String s8 = s6.concat(s7);<span class="hljs-comment">//concat()，效果和 + 一样</span><br>        System.out.println(s8);<span class="hljs-comment">//abcdef</span><br>        System.out.println(s6.compareTo(s7));<span class="hljs-comment">//compareTo()，字符串比大小</span><br>        System.out.println(s1.substring(<span class="hljs-number">0</span>)) ;<span class="hljs-comment">//substring(int index),取从index开始的子符串</span><br>        System.out.println(s1.substring(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)) ;<span class="hljs-comment">//substring(int start, int end),取 [start, end) 的子符串</span><br><br>    &#125;<br><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        String s1 = <span class="hljs-string">&quot;hello world&quot;</span>;<br>        System.out.println(s1.endsWith(<span class="hljs-string">&quot;world&quot;</span>));<span class="hljs-comment">//endsWith(String str),判断字符串是否以str结尾</span><br>        System.out.println(s1.startsWith(<span class="hljs-string">&quot;he&quot;</span>));<span class="hljs-comment">//startsWith(String str),判断字符串是否以str开头</span><br>        System.out.println(s1.startsWith(<span class="hljs-string">&quot;He&quot;</span>));<span class="hljs-comment">//false，区分大小写</span><br>        s1.startsWith(<span class="hljs-string">&quot;ll&quot;</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//startsWith(String str, int index)，判断字符串从index开始是否以str开头</span><br>        String s2 = <span class="hljs-string">&quot;wo&quot;</span>;<br>        System.out.println(s1.contains(s2));<span class="hljs-comment">//contains(String str),判断字符串是否包含str</span><br>        System.out.println(s1.indexOf(<span class="hljs-string">&quot;lo&quot;</span>));<span class="hljs-comment">//indexOf(String str),返回字符串第一次出现str的索引，没有则返回-1</span><br>        System.out.println(s1.indexOf(<span class="hljs-string">&quot;ll&quot;</span>, <span class="hljs-number">1</span>));<span class="hljs-comment">//indexOf(String str, int startIndex)</span><br>                                                <span class="hljs-comment">// 返回从startIndex开始的str的索引，没有则返回-1</span><br>        String s3 = <span class="hljs-string">&quot;hellorworld&quot;</span>;<br>        System.out.println(s3.lastIndexOf(<span class="hljs-string">&quot;or&quot;</span>));<span class="hljs-comment">//lastIndexOf(String str)，返回从后往前找的第一个str的索引位置</span><br>        System.out.println(s3.lastIndexOf(<span class="hljs-string">&quot;or&quot;</span>, <span class="hljs-number">6</span>));<span class="hljs-comment">//lastIndexOf(String str, int fromIndex)，</span><br>                                                    <span class="hljs-comment">//从fromIndex从右往前找，返回第一个str的索引位置</span><br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 有关替换的方法</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        String s1 = <span class="hljs-string">&quot;hello world ll&quot;</span>;<br>        System.out.println(s1.replace(<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>));<span class="hljs-comment">//将所有oldChar替换成newChar</span><br>        System.out.println(s1);<span class="hljs-comment">//s1没有被改变</span><br>        System.out.println(s1.replace(<span class="hljs-string">&quot;ll&quot;</span>, <span class="hljs-string">&quot;hh&quot;</span>));<span class="hljs-comment">//也可以替换字符串（全部替换）</span><br>        <span class="hljs-comment">//replaceAll()，正则表达式的地方再讲</span><br>        <span class="hljs-comment">//replaceFirst()，正则表达式的地方再讲</span><br>        <span class="hljs-comment">//matches()，判断str是否和正则表达式符合</span><br>        <span class="hljs-comment">//split()，以正则表达式切割，返回String[]</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * String与基本数据类型、包装类之间的转换</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//String --&gt; 基本数据类型</span><br>        String s1 = <span class="hljs-string">&quot;123&quot;</span>;<br>        <span class="hljs-keyword">int</span> n1 = Integer.parseInt(s1);<br>        <span class="hljs-comment">//基本数据类型 --&gt; String</span><br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">12356</span>;<br>        String s2 = String.valueOf(num);<span class="hljs-comment">//调用valueOf()方法</span><br>        String s3 = num + <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//使用 + 运算符连接</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * String与char[]之间的转换</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//String --&gt; char[]</span><br>        String str = <span class="hljs-string">&quot;abc123&quot;</span>;<br>        <span class="hljs-keyword">char</span>[] ch = str.toCharArray();<span class="hljs-comment">//调用String的toCharArray()方法</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ch.length; i++) &#123;<br>            System.out.println(ch[i]);<br>        &#125;<br>        <span class="hljs-comment">//char[] --&gt; String：调用String的构造器</span><br>        <span class="hljs-keyword">char</span>[] ch2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[]&#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>&#125;;<br>        String str2 = <span class="hljs-keyword">new</span> String(ch2);<span class="hljs-comment">//构造器</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * String与byte[]之间的转换</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * 编码：字符串 --&gt; 字节</span><br><span class="hljs-comment">    * 解码：字节 --&gt; 字符串</span><br><span class="hljs-comment">    * UTF-8字符集中，一个汉字对应三个字节</span><br><span class="hljs-comment">    * GBK字符集中，一个汉字对应两个字节</span><br><span class="hljs-comment">    * 说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//编码：String --&gt; byte[]</span><br>        String str1 = <span class="hljs-string">&quot;abc123中国&quot;</span>;<br>        <span class="hljs-keyword">byte</span>[] bytes = str1.getBytes();<span class="hljs-comment">//使用默认字符集进行编码（默认utf-8）</span><br>        System.out.println(Arrays.toString(bytes));<br>        <span class="hljs-keyword">byte</span>[] bytes1 = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bytes1 = str1.getBytes(<span class="hljs-string">&quot;gbk&quot;</span>);<span class="hljs-comment">//使用指定字符集进行转换</span><br>            System.out.println(Arrays.toString(bytes1));<br>        &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//解码：byte[]  --&gt; String：调用String构造器</span><br>        String s = <span class="hljs-keyword">new</span> String(bytes);<span class="hljs-comment">//使用默认字符集进行解码（默认utf-8）</span><br>        System.out.println(s);<br>        String s1 = <span class="hljs-keyword">new</span> String(bytes1);<br>        System.out.println(s1);<span class="hljs-comment">//使用gbk编码，却使用utf-8解码，会乱码</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            String gbk = <span class="hljs-keyword">new</span> String(bytes1, <span class="hljs-string">&quot;gbk&quot;</span>);<span class="hljs-comment">//使用对应解码方法解码</span><br>            System.out.println(gbk);<br>        &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="关于string的算法练习"><a class="markdownIt-Anchor" href="#关于string的算法练习">#</a> 关于 String 的算法练习</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/10 - 16:03</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringExer</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 习题一：获取一个字符串在另一个字符串中出现的次数</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCount</span><span class="hljs-params">(String mainStr, String subStr)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> mainLen = mainStr.length();<br>        <span class="hljs-keyword">int</span> subLen = subStr.length();<br>        <span class="hljs-keyword">if</span>(mainLen &lt; subLen)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 使用indexOf方法，若上一次目标字符串出现的位置为index，则</span><br><span class="hljs-comment">        * 下一次从index + subLen开始找，直到indexOf返回-1为止</span><br><span class="hljs-comment">        * */</span><br>        <span class="hljs-keyword">while</span>((index = mainStr.indexOf(subStr, index)) != -<span class="hljs-number">1</span>)&#123;<br>            count++;<br>            index +=subLen;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 习题二：获取两个字符串中的最大相同字串</span><br><span class="hljs-comment">    * 目前假设只有一个最大相同子串，之后讲到集合的时候，可以改进</span><br><span class="hljs-comment">    * 思路：将短的字符串进行长度依次递减的字串与较长的字串比较</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMaxSameString</span><span class="hljs-params">(String str1, String str2)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(str1 == <span class="hljs-keyword">null</span> || str2 == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        String maxStr = (str1.length() &gt;= str2.length()) ? str1 : str2;<br>        String minStr = (str1.length() &lt; str2.length()) ? str1 : str2;<br>        <span class="hljs-keyword">int</span> len = minStr.length();<br>        <span class="hljs-comment">//滑动窗口法</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len ; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>, end = len - i; end &lt;= len; start++, end++)&#123;<span class="hljs-comment">//关键点</span><br>                String subStr = minStr.substring(start, end);<br>                <span class="hljs-keyword">if</span>(maxStr.contains(subStr))&#123;<br>                    <span class="hljs-keyword">return</span> subStr;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="stringbuffer-stringbuilder"><a class="markdownIt-Anchor" href="#stringbuffer-stringbuilder">#</a> StringBuffer、StringBuilder</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/9 - 11:05</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 关于StringBuffer和StringBuilder类的使用</span><br><span class="hljs-comment">* 对比StringBuffer，StringBuilder，String的效率</span><br><span class="hljs-comment">*       答：StringBuilder &gt; StringBuffer &gt; String</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBuffer_StringBuilderTest</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * String,StringBuffer,StringBuilder之间的区别？</span><br><span class="hljs-comment">    * String:不可变；底层使用final char[]存储</span><br><span class="hljs-comment">    * StringBuffer：可变，效率有点低，线程安全；底层使用char[]存储</span><br><span class="hljs-comment">    * StringBuilder：可变，jdk5.0新增效率比StringBuffer高，线程不安全；底层使用char[]存储</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * 源码分析：</span><br><span class="hljs-comment">    * String str1 = new String();//底层：new char[0];</span><br><span class="hljs-comment">    * String str2 = new String(&quot;abc&quot;);//底层：new char[]&#123;&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;&#125;;</span><br><span class="hljs-comment">    * StringBuffer str3 = new StringBuffer();//char[] value = new char[16];底层创建了一个长度是16的数组</span><br><span class="hljs-comment">    * str3.append(&#x27;a&#x27;);//value[0] = &#x27;a&#x27;;</span><br><span class="hljs-comment">    * str3.append(&#x27;b&#x27;);//value[1] = &#x27;b&#x27;;</span><br><span class="hljs-comment">    * StringBuffer sb2 = new StringBuffer(&quot;abc&quot;);//char[] value1 = new char[3 + 16];</span><br><span class="hljs-comment">    *                                               底层创建了长度是”abc“.length()+16的数组</span><br><span class="hljs-comment">    * 问题1：sb2.length()的输出是3</span><br><span class="hljs-comment">    * 问题2：扩容问题：如果要添加的数据底层数组盛不下了，就需要扩容低层的数组</span><br><span class="hljs-comment">    *                默认情况下扩容位原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中</span><br><span class="hljs-comment">    *       指导意义：开发中建议使用StringBuffer(int capacity)或StringBuilder(int capacity)指定数组容量，</span><br><span class="hljs-comment">    *                避免多次扩容，导致效率降低</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        StringBuffer sb1 = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;abc&quot;</span>);<br>        sb1.setCharAt(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;m&#x27;</span>);<span class="hljs-comment">//sb1本身被改变</span><br>        System.out.println(sb1);<br>    &#125;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * StringBuffer,StringBuilder中新增的方法，以StringBuffer为例</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        StringBuffer s1 = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;abc&quot;</span>);<br>        s1.append(<span class="hljs-number">1</span>);<span class="hljs-comment">//append()</span><br>        s1.append(<span class="hljs-string">&#x27;1&#x27;</span>);<br>        s1.append(<span class="hljs-string">&quot;1&quot;</span>);<span class="hljs-comment">//结果都是在末尾加上字符1</span><br>        System.out.println(s1);<br>        s1.delete(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>);<span class="hljs-comment">//delete(int start, int end),删除[start, end)之间的字符串</span><br>        s1.replace(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&quot;hello&quot;</span>);<span class="hljs-comment">//replace(start, end, str)，将[start, end)之间的字符串换成str</span><br>        s1.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;world&quot;</span>);<span class="hljs-comment">//insert(int index,str)，在指定位置插入</span><br>        System.out.println(s1);<br>        s1.reverse();<span class="hljs-comment">//reverse()，字符串逆序</span><br>        <span class="hljs-comment">//substring()，取字串</span><br>        <span class="hljs-comment">//length()</span><br>        <span class="hljs-comment">//charAt()</span><br>        <span class="hljs-comment">//setCharAt(int index, char ch)修改指定位置字符</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 总结：关注以下几个方法</span><br><span class="hljs-comment">        * 增：append</span><br><span class="hljs-comment">        * 删：delete</span><br><span class="hljs-comment">        * 改：replace, setCharAt</span><br><span class="hljs-comment">        * 查：substring, charAt</span><br><span class="hljs-comment">        * 长度：length</span><br><span class="hljs-comment">        * 遍历：toString, for + charAt</span><br><span class="hljs-comment">        * */</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 面试题</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        String str = <span class="hljs-keyword">null</span>;<br>        StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();<br>        sb.append(str);<span class="hljs-comment">//不报错</span><br>        System.out.println(sb.length());<span class="hljs-comment">//4</span><br>        System.out.println(sb);<span class="hljs-comment">//&quot;null&quot;，实际上是把str当成字符串”null“加入了sb</span><br>        StringBuffer sb1 = <span class="hljs-keyword">new</span> StringBuffer(str);<span class="hljs-comment">//报错，空指针异常</span><br>         <span class="hljs-comment">//因为构造器会调用str.length()方法，这里导致空指针</span><br>        System.out.println(sb1);<span class="hljs-comment">//执行不到此处，上方异常未处理</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="jdk8之前的时间api"><a class="markdownIt-Anchor" href="#jdk8之前的时间api">#</a> JDK8 之前的时间 API</h3><h4 id="system静态方法"><a class="markdownIt-Anchor" href="#system静态方法">#</a> System 静态方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1、System类中的currentTimeMillis()</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">long</span> time = System.currentTimeMillis();<br>        <span class="hljs-comment">//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差</span><br>        <span class="hljs-comment">//成为时间戳</span><br>        System.out.println(time);<br>    &#125;<br></code></pre></div></td></tr></table></figure><h4 id="date类"><a class="markdownIt-Anchor" href="#date类">#</a> Date 类</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/9 - 17:16</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* JDK 8之前日期和时间的API测试</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateTimeTest</span> </span>&#123;<br>    <span class="hljs-comment">//1、System类中的currentTimeMillis()</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">long</span> time = System.currentTimeMillis();<br>        <span class="hljs-comment">//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差</span><br>        <span class="hljs-comment">//成为时间戳</span><br>        System.out.println(time);<br>    &#125;<br><br>    <span class="hljs-comment">/*+</span><br><span class="hljs-comment">    * java.util.Date类</span><br><span class="hljs-comment">    *       | --- java.sql.Date类</span><br><span class="hljs-comment">    * 1、两个构造器的使用</span><br><span class="hljs-comment">    * 2、两个方法的使用</span><br><span class="hljs-comment">    *      &gt; toString():显示当前的年月日时分秒</span><br><span class="hljs-comment">    *      &gt; getTime()：获取当前Date对象对应的时间戳</span><br><span class="hljs-comment">    * 3、java.sql.Date对应数据库中的日期变量，和数据库交互时才会用到</span><br><span class="hljs-comment">    *      &gt; 如何实例化</span><br><span class="hljs-comment">    *           &gt; java.sql.Date date = new java.sql.Date(long date);</span><br><span class="hljs-comment">    *      &gt; 如何将java.util.Date转换成java.sql.Date对象？</span><br><span class="hljs-comment">    *           &gt;方法一：强转（会报错）</span><br><span class="hljs-comment">    *           &gt;方法二：java.sql.Date date = new java.sql.Date(new java.util.Date().getTime());通过时间戳</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//构造器一，Date()，创建一个对应当前时间的Date对象</span><br>        Date date1 = <span class="hljs-keyword">new</span> Date();<br>        System.out.println(date1);<span class="hljs-comment">//Thu Sep 09 17:23:49 CST 2021</span><br>        System.out.println(date1.getTime());<span class="hljs-comment">//获取当前Date对象对应的时间戳</span><br>        <span class="hljs-comment">//构造器二，Date(long date)，创建指定毫秒数的Date对象</span><br>        Date date = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">1631179672631L</span>);<br>        System.out.println(date1);<br>        System.out.println(date1.getTime());<br>        <span class="hljs-comment">//创建java.sql.Date类对象</span><br>        java.sql.Date date2 = <span class="hljs-keyword">new</span> java.sql.Date(<span class="hljs-number">1631179672631L</span>);<br>        System.out.println(date2);<span class="hljs-comment">//2021-09-09</span><br>        System.out.println(date2.getTime());<span class="hljs-comment">//1631179672631</span><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="calendar类"><a class="markdownIt-Anchor" href="#calendar类">#</a> Calendar 类</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JAVA"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    * java.util.Calendar类（日历类，抽象类）的使用</span><br><span class="hljs-comment">    * 注意：获取月份时，1月是0，二月是1，以此类推，12月是11</span><br><span class="hljs-comment">    *    获取星期时，周日是1，周一是2，以此类推，周六是7</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//实例化</span><br>        <span class="hljs-comment">//方式一：创建其子类的对象</span><br>        <span class="hljs-comment">//方式二：调用其静态方法getInstance()方法</span><br>        Calendar calendar = Calendar.getInstance();<span class="hljs-comment">//返回的是java.util.GregorianCalendar类对象</span><br>                                                <span class="hljs-comment">//对应当前时间</span><br><br>        <span class="hljs-comment">//常用方法：</span><br>        <span class="hljs-comment">//get()</span><br>        <span class="hljs-keyword">int</span> days = calendar.get(Calendar.DAY_OF_MONTH);<span class="hljs-comment">//今天是这个月的第几天</span><br>        System.out.println(days);<span class="hljs-comment">//13</span><br>        System.out.println(calendar.get(Calendar.DAY_OF_YEAR));<span class="hljs-comment">//今天是今年的第几天,256</span><br>        <span class="hljs-comment">//set()</span><br>        calendar.set(Calendar.DAY_OF_MONTH, <span class="hljs-number">22</span>);<span class="hljs-comment">//calendar类对象本身的信息被修改（类信息改成当前是这个月的第22天）</span><br>        <span class="hljs-comment">//add()</span><br>        calendar.add(Calendar.DAY_OF_MONTH,<span class="hljs-number">3</span>);<span class="hljs-comment">//在现有这个月的第几天上，加了三天，变成第25天</span><br>        <span class="hljs-comment">//getTime()，用于日历类 --&gt; Date类</span><br>        Date date = calendar.getTime();<br>        System.out.println(date);<br>        <span class="hljs-comment">//setTime()，用于Date --&gt; 日历类</span><br>        calendar.setTime(<span class="hljs-keyword">new</span> Date());<br>        System.out.println(calendar.get(Calendar.DAY_OF_MONTH));<br><br>    &#125;<br></code></pre></div></td></tr></table></figure><h4 id="simpledateformat类"><a class="markdownIt-Anchor" href="#simpledateformat类">#</a> SimpleDateFormat 类</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/10 - 17:36</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* JDK8之前的时间API测试</span><br><span class="hljs-comment">* 1、System类中currentTimeMillis();</span><br><span class="hljs-comment">* 2、java.util.Date和其子类java.sql.Date</span><br><span class="hljs-comment">* 3、SimpleDateFormat</span><br><span class="hljs-comment">* 4、Calendar</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateTimeTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * SimpleDateFormat的使用：SimpleDateFormat对日期Date类的格式化和解析</span><br><span class="hljs-comment">    * 1、两个操作</span><br><span class="hljs-comment">    *   1.1 格式化：日期 --&gt; 字符串</span><br><span class="hljs-comment">    *   1.2 解析：字符串 --&gt; 日期</span><br><span class="hljs-comment">    * 2、SimpleDateFormat的实例化</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//实例化SimpleDateFormat：使用默认构造器</span><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat();<br>        <span class="hljs-comment">//格式化：日期 --&gt; 字符串</span><br>        Date date = <span class="hljs-keyword">new</span> Date();<br>        System.out.println(date);<span class="hljs-comment">//Fri Sep 10 17:42:39 CST 2021</span><br>        String format = sdf.format(date);<span class="hljs-comment">//格式化返回的是字符串</span><br>        System.out.println(format);<span class="hljs-comment">//21-9-10 下午5:42</span><br>        <span class="hljs-comment">//解析：字符串 --&gt; 日期</span><br>        String str = <span class="hljs-string">&quot;21-9-12 上午1:00&quot;</span>;<br>        Date date1 = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            date1 = sdf.parse(str);<span class="hljs-comment">//parse方法会抛出异常，需要try-catch</span><br>            System.out.println(date1);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            实例化SimpleDateFormat：使用带参数的构造器（可以去API里面找）</span><br><span class="hljs-comment">            指定的构造器可以使用指定的格式进行格式化和解析</span><br><span class="hljs-comment">        */</span><br>        SimpleDateFormat sdf1 = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyyy.MMMMM.dd GGG hh:mm aaa&quot;</span>);<br>        String format1 = sdf1.format(date);<br>        System.out.println(format1);<span class="hljs-comment">//02021.九月.12 公元 01:07 上午</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        *   几个常用的格式:</span><br><span class="hljs-comment">        *   y：年</span><br><span class="hljs-comment">        *   M：月</span><br><span class="hljs-comment">        *   d：日</span><br><span class="hljs-comment">        *   h：时</span><br><span class="hljs-comment">        *   m：分</span><br><span class="hljs-comment">        *   s：秒</span><br><span class="hljs-comment">        * */</span><br>        SimpleDateFormat sdf2 = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);<span class="hljs-comment">//开发中喜欢用这种</span><br>        System.out.println(sdf2.format(<span class="hljs-keyword">new</span> Date()));<span class="hljs-comment">//2021-09-12 01:11:25</span><br>        <span class="hljs-comment">//解析，必须使用创建该对象时指定的格式</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//sdf2只能识别&quot;yyyy-MM-dd hh:mm:ss&quot;格式的时间</span><br>            Date date2 = sdf2.parse(<span class="hljs-string">&quot;2020-01-02 23:32:11&quot;</span>);<br>            System.out.println(date2);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 练习一：字符串”2020-09-08“转换成java.sql.Date类</span><br><span class="hljs-comment">    * 练习二：从1990-01-01开始，”三天打鱼，两天晒网“。问之后的某年某月某日，渔夫是在打鱼，还是在晒网</span><br><span class="hljs-comment">    *        思路：先求得题目日期距离1990-01-01年有多少天，然后取模5运算</span><br><span class="hljs-comment">    *             总天数求法：利用天数求得时间戳，二者相减。</span><br><span class="hljs-comment">    *             总天数 = (date1.getTime() - date2.getTime()) / (1000 * 60 *60 *24) + 1</span><br><span class="hljs-comment">    *             总天数 % 5 == 0，4 在晒网</span><br><span class="hljs-comment">    *             总天数 % 5 == 1，2，3 在打鱼</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>        Date date = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>           date = sdf.parse(<span class="hljs-string">&quot;2020-09-08&quot;</span>);<br>            System.out.println(date);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        java.sql.Date birthDate = <span class="hljs-keyword">new</span> java.sql.Date(date.getTime());<span class="hljs-comment">//java.sql.Date类的带参构造器</span><br>        System.out.println(birthDate);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="jdk8中新日期时间api"><a class="markdownIt-Anchor" href="#jdk8中新日期时间api">#</a> JDK8 中新日期时间 API</h3><h5 id="jdk8时间api出现的原因"><a class="markdownIt-Anchor" href="#jdk8时间api出现的原因">#</a> JDK8 时间 API 出现的原因</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * java.util.Date类的缺点（JDK8时间API出现的原因）:</span><br><span class="hljs-comment">    * 1、偏移性：时间是从1900年开始的，月份是从0开始的</span><br><span class="hljs-comment">    * 2、格式化(SimpleDateFormat)只对Date有用，Calendar则不行</span><br><span class="hljs-comment">    * 3、不是线程安全的</span><br><span class="hljs-comment">    * 4、不能处理闰秒</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//按照偏移性，表示2021年9月13日应该这样表示</span><br>        Date date = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">2021</span> - <span class="hljs-number">1900</span>, <span class="hljs-number">9</span> - <span class="hljs-number">1</span>, <span class="hljs-number">13</span>);<span class="hljs-comment">//此方法已过时</span><br>        System.out.println(date);<span class="hljs-comment">//Mon Sep 13 00:00:00 CST 2021</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="localdate-localtime-localdatetime"><a class="markdownIt-Anchor" href="#localdate-localtime-localdatetime">#</a> LocalDate、LocalTime、LocalDateTime</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    * LocalDate、LocalTime、LocalDateTime类的使用</span><br><span class="hljs-comment">    * 说明：</span><br><span class="hljs-comment">    *   1、LocalDateTime类使用比其他两个类较多</span><br><span class="hljs-comment">    *   2、类似于Calendar</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 实例化</span><br><span class="hljs-comment">        * */</span><br>        <span class="hljs-comment">//now()：获取当前的日期、时间、日期时间</span><br>        LocalDate localDate = LocalDate.now();<span class="hljs-comment">//静态方法</span><br>        LocalTime localTime = LocalTime.now();<br>        LocalDateTime localDateTime = LocalDateTime.now();<br>        System.out.println(localDate);<span class="hljs-comment">//2021-09-20</span><br>        System.out.println(localTime);<span class="hljs-comment">//22:17:04.923</span><br>        System.out.println(localDateTime);<span class="hljs-comment">//2021-09-20T22:17:04.923</span><br>        <span class="hljs-comment">//of():不用考虑偏移量</span><br>        LocalDateTime localDateTime1 = LocalDateTime.of(<span class="hljs-number">2021</span>, <span class="hljs-number">9</span>, <span class="hljs-number">20</span>, <span class="hljs-number">22</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-comment">//2021年9月20日22时20分</span><br>        System.out.println(localDateTime1);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * getXxx()：以LocalDateTime类为例（三各类都有共同方法），获取相关的属性</span><br><span class="hljs-comment">        * */</span><br>        System.out.println(localDateTime.getDayOfMonth());<span class="hljs-comment">//20</span><br>        System.out.println(localDateTime.getDayOfWeek());<span class="hljs-comment">//MONDAY</span><br>        System.out.println(localDateTime.getDayOfYear());<span class="hljs-comment">//263</span><br>        System.out.println(localDateTime.getMonth());<span class="hljs-comment">//SEPTEMBER</span><br>        System.out.println(localDateTime.getMonthValue());<span class="hljs-comment">//9</span><br>        System.out.println(localDateTime.getMinute());<span class="hljs-comment">//23</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * withXxx()：类似于set方法，设置相关的属性</span><br><span class="hljs-comment">        * */</span><br>        LocalDateTime localDateTime2 = localDateTime.withDayOfMonth(<span class="hljs-number">22</span>);<span class="hljs-comment">//此方法设置日期</span><br>        System.out.println(localDateTime);<span class="hljs-comment">//不可变性，localDateTime未改变</span><br>        System.out.println(localDateTime2);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 加减操作</span><br><span class="hljs-comment">        * 加：plusXxx()</span><br><span class="hljs-comment">        * 减：minusXxx()</span><br><span class="hljs-comment">        * */</span><br>        LocalDateTime localDateTime3 = localDateTime.plusDays(<span class="hljs-number">1</span>);<span class="hljs-comment">//不可变性</span><br>        System.out.println(localDateTime);<br>        System.out.println(localDateTime3);<br><span class="hljs-comment">//        localDateTime.minusXxx()</span><br>    &#125;<br></code></pre></div></td></tr></table></figure><h4 id="instant"><a class="markdownIt-Anchor" href="#instant">#</a> Instant</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.time.Instant;<br><span class="hljs-keyword">import</span> java.time.OffsetDateTime;<br><span class="hljs-keyword">import</span> java.time.ZoneOffset;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/20 - 22:41</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InstantTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * Instant类的使用</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//now()：获取本初子午线对应的标准时间</span><br>        Instant instant = Instant.now();<span class="hljs-comment">//静态方法</span><br>        System.out.println(instant);<span class="hljs-comment">//2021-09-20T14:46:15.739Z，对应的是UTC时间，比北京时间晚八个小时</span><br>        <span class="hljs-comment">//添加时间的偏移量</span><br>        OffsetDateTime offsetDateTime = instant.atOffset(ZoneOffset.ofHours(<span class="hljs-number">8</span>));<br>        System.out.println(offsetDateTime);<span class="hljs-comment">//2021-09-20T22:46:15.739+08:00</span><br>        <span class="hljs-comment">//toEpochMilli():获取瞬时点对应自1970年1月1日0时0分的毫秒数,类似于Date类的getTime()</span><br>        <span class="hljs-keyword">long</span> l = instant.toEpochMilli();<br>        System.out.println(l);<span class="hljs-comment">//1632149304356</span><br>        <span class="hljs-comment">//ofEpochMilli():通过给定的毫秒数，获取Instant实例。 类似于Date(long milli)</span><br>        Instant instant1 = Instant.ofEpochMilli(<span class="hljs-number">1632149304356L</span>);<br>        System.out.println(instant1);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="datetimeformatter"><a class="markdownIt-Anchor" href="#datetimeformatter">#</a> DateTimeFormatter</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">import</span> java.time.format.FormatStyle;<br><span class="hljs-keyword">import</span> java.time.temporal.TemporalAccessor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/23 - 16:10</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* DateTimeFormatter类的使用</span><br><span class="hljs-comment">* 1、类似于SimpleDateFormatter</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateTimeFormatterTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//实例化方式</span><br>        <span class="hljs-comment">//方式1：预定义的格式（ISO_LOCAL_DATE_TIME, ISO_LOCAL_DATE, ISO_LOCAL_TIME）</span><br>        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;<br>        <span class="hljs-comment">//格式化:日期 --&gt; 字符串</span><br>        LocalDateTime localDateTime = LocalDateTime.now();<br>        String format = formatter.format(localDateTime);<br>        System.out.println(localDateTime);<span class="hljs-comment">//2021-09-23T16:14:51.195</span><br>        System.out.println(format);<span class="hljs-comment">//2021-09-23T16:14:51.195</span><br>        <span class="hljs-comment">//解析：字符串 --&gt; 日期</span><br>        TemporalAccessor parse = formatter.parse(<span class="hljs-string">&quot;2021-09-23T16:14:51.195&quot;</span>);<br>        System.out.println(parse);<span class="hljs-comment">//&#123;&#125;,ISO resolved to 2021-09-23T16:14:51.195</span><br>        <span class="hljs-comment">//实例化方式二:本地化相关的格式，如ofLocalizedDateTime(FormatStyle.LONG)</span><br>        <span class="hljs-comment">//FormatStyle.LONG, FormatStyle.MEDIUM, FormatStyle.SHORT: 适用于LocalDateTime</span><br>        <span class="hljs-comment">//形参不同，格式化后的格式不同</span><br>        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT);<br>        String format1 = dateTimeFormatter.format(localDateTime);<br>        System.out.println(format1);<span class="hljs-comment">//21-9-23 下午4:24</span><br>        <span class="hljs-comment">//本地化相关的格式，ofLocalizedDate()</span><br>        <span class="hljs-comment">//FormatStyle.FULL, FormatStyle.LONG, FormatStyle.MEDIUM, FormatStyle.SHORT: 适用于LocalDate</span><br>        DateTimeFormatter dateTimeFormatter1 = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL);<br>        String format2 = dateTimeFormatter1.format(LocalDate.now());<br>        System.out.println(format2);<span class="hljs-comment">//2021年9月23日 星期四</span><br>        <span class="hljs-comment">//重点： 实例化方式三，自定义的格式，如ofPattern(&quot;yyyy-MM-dd hh:mm:ss E &quot;)</span><br>        DateTimeFormatter dateTimeFormatter2 = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);<br>        String format3 = dateTimeFormatter2.format(LocalDateTime.now());<br>        System.out.println(format3);<span class="hljs-comment">//2021-09-23 04:45:20 (十二小时制)</span><br>        TemporalAccessor parse1 = dateTimeFormatter2.parse(<span class="hljs-string">&quot;2021-09-23 04:45:20&quot;</span>);<br>        <span class="hljs-comment">//&#123;SecondOfMinute=20, MinuteOfHour=45, MicroOfSecond=0, NanoOfSecond=0, HourOfAmPm=4, MilliOfSecond=0&#125;,ISO resolved to 2021-09-23</span><br>        System.out.println(parse1);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="java比较器"><a class="markdownIt-Anchor" href="#java比较器">#</a> Java 比较器</h3><h4 id="comparable接口自然排序"><a class="markdownIt-Anchor" href="#comparable接口自然排序">#</a> Comparable 接口：自然排序</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/23 - 17:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* Java比较器</span><br><span class="hljs-comment">* 一、说明：Java中的对象，正常情况下，只能进行比较 == 或 != 。 不能使用 &gt; 或 &lt; 的，但是在开发场景中，我们需要对多个对象进行</span><br><span class="hljs-comment">*           排序，言外之意，就需要比较对象的大小。</span><br><span class="hljs-comment">*           如何实现？使用两个接口中的任何一个：Comparable, Comparator</span><br><span class="hljs-comment">* 二、Comparable接口的使用</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompareTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * Comparable使用的举例：自然排序</span><br><span class="hljs-comment">    * 1、String, 包装类等实现了Comparable接口，重写了compareTo()方法，给出了比较两个对象大小的方法</span><br><span class="hljs-comment">    * 2、重写compareTo()接口的规则：</span><br><span class="hljs-comment">    *   如果当前对象this大于形参对象obj，则返回正整数；</span><br><span class="hljs-comment">    *   如果当前对象this小于形参对象obj，则返回负整数；</span><br><span class="hljs-comment">    *   如果当前对象this等于形参对象obj，则返回0。</span><br><span class="hljs-comment">    * 3、 对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo()方法</span><br><span class="hljs-comment">    *   在compareTo()方法中指明如何排序</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        String[] arr = <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;AA&quot;</span>, <span class="hljs-string">&quot;DD&quot;</span>, <span class="hljs-string">&quot;BB&quot;</span>&#125;;<br>        Arrays.sort(arr);<span class="hljs-comment">//默认从小到大排序</span><br>        System.out.println(Arrays.toString(arr));<span class="hljs-comment">//[AA, BB, DD]</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Goods[] arr = <span class="hljs-keyword">new</span> Goods[<span class="hljs-number">4</span>];<br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;lenoveMouse&quot;</span>, <span class="hljs-number">34</span>);<br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;dellMouse&quot;</span>, <span class="hljs-number">43</span>);<br>        arr[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;xiaomiMouse&quot;</span>, <span class="hljs-number">312</span>);<br>        arr[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;huaweiMouse&quot;</span>, <span class="hljs-number">65</span>);<br>        Arrays.sort(arr);<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Goods</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> price;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Goods</span><span class="hljs-params">(String name, <span class="hljs-keyword">double</span> price)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Goods</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPrice</span><span class="hljs-params">(<span class="hljs-keyword">double</span> price)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Goods&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, price=&quot;</span> + price +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//指明商品比较大小的方式：先按照价格从低到高排序，价格一样的按照商品名称进行排序</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Object o)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(o <span class="hljs-keyword">instanceof</span> Goods)&#123;<br>            Goods goods = (Goods)o;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.price &gt; goods.price)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.price &lt; goods.price)&#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//                return 0;</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name.compareTo(goods.name);<span class="hljs-comment">//价格一样的按照名称排序</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//方式二</span><br><span class="hljs-comment">//        return Double.compare(this.price, goods.price);</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;传入的数据类型不一致！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="comparator接口定制排序"><a class="markdownIt-Anchor" href="#comparator接口定制排序">#</a> Comparator 接口：定制排序</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/23 - 17:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* java.util.Comparator接口的使用</span><br><span class="hljs-comment">* 一、</span><br><span class="hljs-comment">* 1、背景：</span><br><span class="hljs-comment">*   当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码</span><br><span class="hljs-comment">*   或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，</span><br><span class="hljs-comment">*   那么就可以考虑使用Comparator的对象来排序</span><br><span class="hljs-comment">* 2、重写compare(Object o1, Object o2)方法，比较o1和o2的大小</span><br><span class="hljs-comment">*   如果方法返回正整数，则表示o1大于o2</span><br><span class="hljs-comment">*   如果方法返回负整数，则表示o1小于o2</span><br><span class="hljs-comment">*   如果方法返回0，则表示o1等于o2</span><br><span class="hljs-comment">* 二、Comparable与Comparator的对比</span><br><span class="hljs-comment">*   1、Comparable接口的方式一旦指定，保证Comparable接口实现类的对象在任何位置都可以比较大小</span><br><span class="hljs-comment">*   2、Comparator接口属于临时性的比较</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompareToTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><span class="hljs-comment">//Comparator用于String类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        String[] arr = <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;AA&quot;</span>, <span class="hljs-string">&quot;DD&quot;</span>, <span class="hljs-string">&quot;BB&quot;</span>&#125;;<br>        Arrays.sort(arr, <span class="hljs-keyword">new</span> Comparator()&#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span></span>&#123;<br>                <span class="hljs-keyword">if</span>(o1 <span class="hljs-keyword">instanceof</span> String &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> String)&#123;<br>                    String s1 = (String)o1;<br>                    String s2 = (String)o2;<br>                    <span class="hljs-keyword">return</span> -s1.compareTo(s2);<span class="hljs-comment">//按照从大到小排</span><br>                &#125;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;输入的数据类型不一致&quot;</span>);<br>            &#125;<br>        &#125;);<br>        System.out.println(Arrays.toString(arr));<span class="hljs-comment">//[DD, BB, AA]</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><span class="hljs-comment">//Comparator用于自定义类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Goods[] arr = <span class="hljs-keyword">new</span> Goods[<span class="hljs-number">4</span>];<br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;lenoveMouse&quot;</span>, <span class="hljs-number">34</span>);<br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;dellMouse&quot;</span>, <span class="hljs-number">43</span>);<br>        arr[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;xiaomiMouse&quot;</span>, <span class="hljs-number">312</span>);<br>        arr[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;huaweiMouse&quot;</span>, <span class="hljs-number">65</span>);<br>        Arrays.sort(arr, <span class="hljs-keyword">new</span> Comparator&lt;Goods&gt;() &#123;<br>            <span class="hljs-comment">//按照名称从大大小排序。名称相同的按价格从大到小排序</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Goods o1, Goods o2)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span>(o1.getName().equals(o2.getName()))&#123;<br>                    <span class="hljs-keyword">return</span> -Double.compare(o1.getPrice(), o2.getPrice());<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">return</span> -o1.getName().compareTo(o2.getName());<br>                &#125;<br>            &#125;<br>        &#125;);<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br>&#125;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/23 - 17:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* java.util.Comparator接口的使用</span><br><span class="hljs-comment">* 一、</span><br><span class="hljs-comment">* 1、背景：</span><br><span class="hljs-comment">*   当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码</span><br><span class="hljs-comment">*   或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，</span><br><span class="hljs-comment">*   那么就可以考虑使用Comparator的对象来排序</span><br><span class="hljs-comment">* 2、重写compare(Object o1, Object o2)方法，比较o1和o2的大小</span><br><span class="hljs-comment">*   如果方法返回正整数，则表示o1大于o2</span><br><span class="hljs-comment">*   如果方法返回负整数，则表示o1小于o2</span><br><span class="hljs-comment">*   如果方法返回0，则表示o1等于o2</span><br><span class="hljs-comment">* 二、Comparable与Comparator的对比</span><br><span class="hljs-comment">*   1、Comparable接口的方式一旦指定，保证Comparable接口实现类的对象在任何位置都可以比较大小</span><br><span class="hljs-comment">*   2、Comparator接口属于临时性的比较</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompareToTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><span class="hljs-comment">//Comparator用于String类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        String[] arr = <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;AA&quot;</span>, <span class="hljs-string">&quot;DD&quot;</span>, <span class="hljs-string">&quot;BB&quot;</span>&#125;;<br>        Arrays.sort(arr, <span class="hljs-keyword">new</span> Comparator()&#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span></span>&#123;<br>                <span class="hljs-keyword">if</span>(o1 <span class="hljs-keyword">instanceof</span> String &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> String)&#123;<br>                    String s1 = (String)o1;<br>                    String s2 = (String)o2;<br>                    <span class="hljs-keyword">return</span> -s1.compareTo(s2);<span class="hljs-comment">//按照从大到小排</span><br>                &#125;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;输入的数据类型不一致&quot;</span>);<br>            &#125;<br>        &#125;);<br>        System.out.println(Arrays.toString(arr));<span class="hljs-comment">//[DD, BB, AA]</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><span class="hljs-comment">//Comparator用于自定义类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Goods[] arr = <span class="hljs-keyword">new</span> Goods[<span class="hljs-number">4</span>];<br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;lenoveMouse&quot;</span>, <span class="hljs-number">34</span>);<br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;dellMouse&quot;</span>, <span class="hljs-number">43</span>);<br>        arr[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;xiaomiMouse&quot;</span>, <span class="hljs-number">312</span>);<br>        arr[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;huaweiMouse&quot;</span>, <span class="hljs-number">65</span>);<br>        Arrays.sort(arr, <span class="hljs-keyword">new</span> Comparator&lt;Goods&gt;() &#123;<br>            <span class="hljs-comment">//按照名称从大大小排序。名称相同的按价格从大到小排序</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Goods o1, Goods o2)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span>(o1.getName().equals(o2.getName()))&#123;<br>                    <span class="hljs-keyword">return</span> -Double.compare(o1.getPrice(), o2.getPrice());<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">return</span> -o1.getName().compareTo(o2.getName());<br>                &#125;<br>            &#125;<br>        &#125;);<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="system类"><a class="markdownIt-Anchor" href="#system类">#</a> System 类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//System类</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-comment">//getProperty(),参数有java.version, java.home, os.name, os.version, user.name, user.dir</span><br>       String property = System.getProperty(<span class="hljs-string">&quot;java.version&quot;</span>);<span class="hljs-comment">//java版本</span><br>       System.out.println(property);<span class="hljs-comment">//1.8.0_291</span><br>       String property1 = System.getProperty(<span class="hljs-string">&quot;java.home&quot;</span>);<span class="hljs-comment">//javahome的路径</span><br>       System.out.println(property1);<span class="hljs-comment">//C:\Program Files\Java\jdk1.8.0_291\jre</span><br>       String property2 = System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);<span class="hljs-comment">//系统名</span><br>       System.out.println(property2);<span class="hljs-comment">//Windows 10</span><br>       String property3 = System.getProperty(<span class="hljs-string">&quot;os.version&quot;</span>);<span class="hljs-comment">//系统版本</span><br>       System.out.println(property3);<span class="hljs-comment">//10.0</span><br>       String property4 = System.getProperty(<span class="hljs-string">&quot;user.name&quot;</span>);<span class="hljs-comment">//系统用户名</span><br>       System.out.println(property4);<span class="hljs-comment">//邓智超</span><br>       String property5 = System.getProperty(<span class="hljs-string">&quot;user.home&quot;</span>);<span class="hljs-comment">//用户路径</span><br>       System.out.println(property5);<span class="hljs-comment">//C:\Users\DzcGood</span><br>       String property6 = System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<span class="hljs-comment">//当前工作路径</span><br>       System.out.println(property6);<span class="hljs-comment">//G:\JAVA\learn\day19</span><br>   &#125;<br></code></pre></div></td></tr></table></figure><h3 id="math类"><a class="markdownIt-Anchor" href="#math类">#</a> Math 类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">/Math类<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 常用方法：</span><br><span class="hljs-comment">        * abs 绝对值</span><br><span class="hljs-comment">        * acos, asin, atan, sin, cos, tan 三角函数</span><br><span class="hljs-comment">        * sqrt 平方根</span><br><span class="hljs-comment">        * pow(double a, double b) a的b次幂</span><br><span class="hljs-comment">        * log 自然对数</span><br><span class="hljs-comment">        * exp e为低指数</span><br><span class="hljs-comment">        * max(double a, double b)</span><br><span class="hljs-comment">        * min(double a, double b)</span><br><span class="hljs-comment">        * random() 返回[0.0, 1.0)的随机数</span><br><span class="hljs-comment">        * long round(double a) double型数据a转换为long型(四舍五入)</span><br><span class="hljs-comment">        * toDegrees(double angrad) 弧度 -&gt; 角度</span><br><span class="hljs-comment">        * toRadians(double angdeg) 角度 -&gt; 弧度 </span><br><span class="hljs-comment">        * */</span><br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="biginteger和bigdecimal"><a class="markdownIt-Anchor" href="#biginteger和bigdecimal">#</a> BigInteger 和 BigDecimal</h3><blockquote><p>BigInteger 和 BigDecimal 可以用来表示 long 和 double 表示不了的大数，可以任意大小，任意精度。商业计算中，要求数字精度比较高，故用到 java.math.BigDecimal。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//BigInteger和BigDecimal</span><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>      BigInteger bi = <span class="hljs-keyword">new</span> BigInteger(<span class="hljs-string">&quot;12435678765432456789876543234565434567890987654345654&quot;</span>);<br>      BigDecimal bd = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;1345.54232&quot;</span>);<br>      BigDecimal bd2 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;11&quot;</span>);<br>      System.out.println(bi);<br>      System.out.println(bd.divide(bd2, BigDecimal.ROUND_HALF_UP));<span class="hljs-comment">//四舍五入的方式</span><br>      System.out.println(bd.divide(bd2, <span class="hljs-number">25</span>, BigDecimal.ROUND_HALF_UP));<span class="hljs-comment">//四舍五入的方式，保留25位小数</span><br>  &#125;<br></code></pre></div></td></tr></table></figure><h2 id="枚举类"><a class="markdownIt-Anchor" href="#枚举类">#</a> 枚举类</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 一、枚举类的使用</span><br><span class="hljs-comment">*   1、枚举类的理解：类的对象只有有限个，确定的，我们称此类位枚举类</span><br><span class="hljs-comment">*   2、当需要定义一组常量时，强烈建议使用枚举类</span><br><span class="hljs-comment">*   3、如果枚举类中只有一个对象，则可以作为单例模式的实现方式</span><br><span class="hljs-comment">* 二、如何定义枚举类</span><br><span class="hljs-comment">*   方式一：JDK5.0之前，自定义枚举类</span><br><span class="hljs-comment">*   方式二：JDK5.0之后，可以使用enum关键字定义枚举类</span><br><span class="hljs-comment">* 三、Enum类的常用方法</span><br><span class="hljs-comment">*   1、values()</span><br><span class="hljs-comment">*   2、valueOf()</span><br><span class="hljs-comment">*   3、toString()</span><br><span class="hljs-comment">* 四、使用enum关键字定义的枚举类实现接口的情况</span><br><span class="hljs-comment">*   1、情况一：实现接口，在enum类中实现抽象方法</span><br><span class="hljs-comment">*   2、情况二:让枚举类的对象，分别去实现接口中的抽象方法</span><br><span class="hljs-comment">* */</span><br></code></pre></div></td></tr></table></figure><h3 id="jdk50之前声明枚举类"><a class="markdownIt-Anchor" href="#jdk50之前声明枚举类">#</a> JDK5.0 之前声明枚举类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">/自定义枚举类<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Season</span></span>&#123;<br>    <span class="hljs-comment">//1、声明Season对象的属性:用private final修饰</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String seasonName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String seasonDesc;<br>    <span class="hljs-comment">//2、私有化类的构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Season</span><span class="hljs-params">(String seasonName, String seasonDesc)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.seasonName = seasonName;<br>        <span class="hljs-keyword">this</span>.seasonDesc = seasonDesc;<br>    &#125;<br>    <span class="hljs-comment">//3、提供当前枚举类的多个对象，声明为public static final</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Season SPRING = <span class="hljs-keyword">new</span> Season(<span class="hljs-string">&quot;春天&quot;</span>, <span class="hljs-string">&quot;春暖花开&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Season SUMMER = <span class="hljs-keyword">new</span> Season(<span class="hljs-string">&quot;夏天&quot;</span>, <span class="hljs-string">&quot;夏日炎炎&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Season AUTUMN = <span class="hljs-keyword">new</span> Season(<span class="hljs-string">&quot;秋天&quot;</span>, <span class="hljs-string">&quot;秋高气爽&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Season WINTER = <span class="hljs-keyword">new</span> Season(<span class="hljs-string">&quot;冬天&quot;</span>, <span class="hljs-string">&quot;冰天雪地&quot;</span>);<br>    <span class="hljs-comment">//其他诉求：获取枚举类对象的属性</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSeasonName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> seasonName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSeasonDesc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> seasonDesc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Season&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;seasonName=&#x27;&quot;</span> + seasonName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, seasonDesc=&#x27;&quot;</span> + seasonDesc + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="用enum关键字声明枚举类"><a class="markdownIt-Anchor" href="#用enum关键字声明枚举类">#</a> 用 enum 关键字声明枚举类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Info</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//使用enum定义枚举类</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Season1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Info</span></span>&#123;<br>    <span class="hljs-comment">//1、提供当前枚举类的多个对象，对象之间用&quot;,隔开&quot;，最后一个对象以&quot;;&quot;结束</span><br>    SPRING(<span class="hljs-string">&quot;春天&quot;</span>, <span class="hljs-string">&quot;春暖花开&quot;</span>)&#123;<span class="hljs-comment">//鸽子实现接口中的方法</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;春天在哪里&quot;</span>);<br>        &#125;<br>    &#125;,<br>    SUMMER(<span class="hljs-string">&quot;夏天&quot;</span>, <span class="hljs-string">&quot;夏日炎炎&quot;</span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;宁静的夏天&quot;</span>);<br>        &#125;<br>    &#125;,<br>    AUTUMN(<span class="hljs-string">&quot;秋天&quot;</span>, <span class="hljs-string">&quot;秋高气爽&quot;</span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;秋天是分手的季节&quot;</span>);<br>        &#125;<br>    &#125;,<br>    WINTER(<span class="hljs-string">&quot;冬天&quot;</span>, <span class="hljs-string">&quot;冰天雪地&quot;</span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;大雪纷飞&quot;</span>);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-comment">//2、声明Season对象的属性:用private final修饰</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String seasonName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String seasonDesc;<br>    <span class="hljs-comment">//2、私有化类的构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Season1</span><span class="hljs-params">(String seasonName, String seasonDesc)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.seasonName = seasonName;<br>        <span class="hljs-keyword">this</span>.seasonDesc = seasonDesc;<br>    &#125;<br><br>    <span class="hljs-comment">//其他诉求：获取枚举类对象的属性</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSeasonName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> seasonName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSeasonDesc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> seasonDesc;<br>    &#125;<br><br><span class="hljs-comment">//    @Override</span><br><span class="hljs-comment">//    public void show()&#123;</span><br><span class="hljs-comment">//        System.out.println(&quot;这是一个季节&quot;);</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="注解"><a class="markdownIt-Anchor" href="#注解">#</a> 注解</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">*  注解的使用</span><br><span class="hljs-comment">* 1、理解注解</span><br><span class="hljs-comment">*   Annotation是代码里的特殊标记，这些标记可以在编译、类加载、运行时被读取，并执行相应的处理。通过使用Annotation，</span><br><span class="hljs-comment">*   程序员可以在不改变原有逻辑的情况下，在源文件中嵌入一些补充信息。</span><br><span class="hljs-comment">* 2、在某种意义上，框架 = 注解 + 映射 + 设计模式</span><br><span class="hljs-comment">* */</span><br></code></pre></div></td></tr></table></figure><h3 id="注解的使用"><a class="markdownIt-Anchor" href="#注解的使用">#</a> 注解的使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* Annotation的实例</span><br><span class="hljs-comment">*   &gt; 示例一：生成文档相关的注解</span><br><span class="hljs-comment">*   &gt; 示例二：在编译时进行格式检查（JDK内置的三个注解）</span><br><span class="hljs-comment">*       @Override：限定重写父类方法，该注解只能用于方法</span><br><span class="hljs-comment">*       @Deprecated：用于表示所修饰的元素（类、方法等）已过时。通常是因为所修饰的结构危险或存在更好的选择</span><br><span class="hljs-comment">*       @SuppressWarnings：抑制编译器警告</span><br><span class="hljs-comment">*   &gt; 示例三：跟踪代码依赖性，实现替代配置文件功能</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-meta">@SuppressWarnings(&quot;unused&quot;)</span><br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>;<span class="hljs-comment">//抑制编译器对于”定义的变量未使用”的警告</span><br>        <span class="hljs-meta">@SuppressWarnings(&#123;&quot;unused&quot;, &quot;rawtypes&quot;&#125;)</span><span class="hljs-comment">//抑制编译器对于”定义的变量未使用”和&quot;未使用泛型&quot;的警告</span><br>        ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@MyAnnotation(value = &quot;hi&quot;)</span><span class="hljs-comment">//使用自定义的注解</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">walk</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;人走路&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;人吃饭&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//重写父类方法的注释，会在编译的时候强制要求重写方法（可用作检查校验）</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">walk</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生走路&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="自定义注解"><a class="markdownIt-Anchor" href="#自定义注解">#</a> 自定义注解</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 如何自定义注解：参照SuppressWarnings定义</span><br><span class="hljs-comment">*   ① 注解定义格式为 @interface</span><br><span class="hljs-comment">*   ② 内部定义成员，通常使用value表示</span><br><span class="hljs-comment">*   ③ 可以指定成员的默认值，使用default定义</span><br><span class="hljs-comment">*   ④ 如果自定义注解没有成员，表明是一个“标识”作用</span><br><span class="hljs-comment">*   如果注解用成员，在使用注解时，需要指明成员的值</span><br><span class="hljs-comment">*   自定义注解必须配上注解的信息处理流程（使用反射）才有意义</span><br><span class="hljs-comment">* */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 自定义注解</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;hello&quot;</span>;<span class="hljs-comment">//这个是成员，不是方法。默认值是hello</span><br>&#125;<br><br><span class="hljs-meta">@MyAnnotation(value = &quot;hi&quot;)</span><span class="hljs-comment">//使用自定义的注解</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="元注解修饰其他注解的注解"><a class="markdownIt-Anchor" href="#元注解修饰其他注解的注解">#</a> 元注解：修饰其他注解的注解</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* JDK提供的四种元注解</span><br><span class="hljs-comment">*   1、元注解：对现有的注解进行解释说明的注解</span><br><span class="hljs-comment">*   2、说明：</span><br><span class="hljs-comment">*       ① Retention：指明所修饰的Annotation的生命周期</span><br><span class="hljs-comment">*          其包括一个RetentionPolicy类型的成员变量，使用@Retention时必须为该value成员变量指定值</span><br><span class="hljs-comment">*           &#123;RetentionPolicy.SOURCE, RetentionPolicy.CLASS, RetentionPolicy.RUNTIME&#125;，</span><br><span class="hljs-comment">*           分别代表：</span><br><span class="hljs-comment">*                   源文件中有效：该注解会被编译器抛弃；</span><br><span class="hljs-comment">*                   class文件中有效：该注解在程序运行时会被抛弃（默认状态）；</span><br><span class="hljs-comment">*                    运行时有效：该注解在程序运行时有效</span><br><span class="hljs-comment">*       ② Target：指明所修饰的注解能够修饰什么程序元素，包括TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR,</span><br><span class="hljs-comment">*                   LOCAL_VARIABLE, ANNOTATION_TYPE, PACKAGE, TYPE_PARAMETER,TYPE_USE</span><br><span class="hljs-comment">*       ③ Documented：表示所修饰的注解在被javadoc解析时，被提取成文档，</span><br><span class="hljs-comment">*                      定义为Documented的注解必须设置Retention值为RUNTIME</span><br><span class="hljs-comment">*       ④ Inherited:被修饰的注解将具有继承性</span><br><span class="hljs-comment">*          例如MyAnnotation被Inherited修饰，且被用于修饰Person类，那么Person类的子类也自动被MyAnnotation修饰</span><br><span class="hljs-comment">*   3、自定义注解通常都会指明两个元注解：Retention和Target</span><br><span class="hljs-comment">* */</span><br></code></pre></div></td></tr></table></figure><h3 id="通过反射获取注解"><a class="markdownIt-Anchor" href="#通过反射获取注解">#</a> 通过反射获取注解</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//通过反射获取注解</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        Class student = Student.class;<br>        Annotation[] annotations = student.getAnnotations();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; annotations.length; i++) &#123;<br>            System.out.println(annotations[i]);<span class="hljs-comment">//@MyAnnotation(value=hi)</span><br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="jdk8中注解的新特性"><a class="markdownIt-Anchor" href="#jdk8中注解的新特性">#</a> JDK8 中注解的新特性</h3><h4 id="可重复注解"><a class="markdownIt-Anchor" href="#可重复注解">#</a> 可重复注解</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 实现可重复注解：</span><br><span class="hljs-comment">* 1、JDK8之前的写法：</span><br><span class="hljs-comment">*     public @interface MyAnnotations &#123;</span><br><span class="hljs-comment">*       MyAnnotation[] value;</span><br><span class="hljs-comment">*    &#125;</span><br><span class="hljs-comment">*    @MyAnnotations(&#123;@MyAnnotation(value = &quot;hi&quot;), @MyAnnotation(value = &quot;hello&quot;)&#125;)</span><br><span class="hljs-comment">* 2、JDK8之后的写法：</span><br><span class="hljs-comment">*   @Repeatable(MyAnnotations.class)</span><br><span class="hljs-comment">*   public @interface MyAnnotation &#123;</span><br><span class="hljs-comment">*    String value() default &quot;hello&quot;;//这个是成员，不是方法。默认值是hello</span><br><span class="hljs-comment">*   &#125;</span><br><span class="hljs-comment">*   ①在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class</span><br><span class="hljs-comment">*   ②MyAnnotation的Target和Retention必须和MyAnnotations相同</span><br><span class="hljs-comment">* */</span><br></code></pre></div></td></tr></table></figure><h4 id="类型注解"><a class="markdownIt-Anchor" href="#类型注解">#</a> 类型注解</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 类型注解</span><br><span class="hljs-comment">* 1、TYPE_PARAMETER：表示该注解能写在类型变量的声明语句中，如泛型声明</span><br><span class="hljs-comment">* 2、TYPE_USE：表示该注解能写在使用类型的任何语句中</span><br><span class="hljs-comment">* */</span><br><span class="hljs-comment">//TYPE_PARAMETER</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generic</span>&lt;@<span class="hljs-title">MyAnnotation</span> <span class="hljs-title">T</span>&gt;</span>&#123;<span class="hljs-comment">//声明为TYPE_USE后，注解可以出现在任何类型前</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> @MyAnnotation RuntimeException</span>&#123;<br>        ArrayList&lt;<span class="hljs-meta">@MyAnnotation</span> String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">int</span> num = (<span class="hljs-meta">@MyAnnotation</span> <span class="hljs-keyword">int</span>)<span class="hljs-number">10L</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="集合"><a class="markdownIt-Anchor" href="#集合">#</a> 集合</h2><h3 id="概述"><a class="markdownIt-Anchor" href="#概述">#</a> 概述</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 一、集合框架的概述</span><br><span class="hljs-comment">* 1、集合、数组都是对多个数据进行存储操作的结构，简称Java容器</span><br><span class="hljs-comment">*   说明：此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储（.txt, .jpg, .avi, 数据库中是持久化层面的）</span><br><span class="hljs-comment">* 2.1、数组在存储多个数据方面的特点：</span><br><span class="hljs-comment">*   &gt; 一旦初始化以后，其长度就确定了。</span><br><span class="hljs-comment">*   &gt; 一旦定义好，其元素的类型也就确定了。我们只能操作指定类型的数据。比如 String[] arr; int[] arr1;</span><br><span class="hljs-comment">* 2.2 数组在存储多个数据的缺点：</span><br><span class="hljs-comment">*   &gt; 一旦初始化以后，其长度不可修改</span><br><span class="hljs-comment">*   &gt;  数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，同时效率也不高</span><br><span class="hljs-comment">*   &gt; 获取数组中实际元素的个数的需求，数组没有线程的属性或方法可用</span><br><span class="hljs-comment">*   &gt; 数组存储数据的特点：有序、可重复。对于无序、不可重复</span><br><span class="hljs-comment">z* 3、集合可分为Collection和Map两种体系</span><br><span class="hljs-comment">*   3.1 Collection接口：单列数据，定义了存取一组对象的方法的集合</span><br><span class="hljs-comment">*       &gt; List:元素有序、可重复的集合</span><br><span class="hljs-comment">*       &gt; Set:元素无序、不可重复的集合</span><br><span class="hljs-comment">*   3.2 Map接口：双列数据，保存具有映射关系“key-value对”的集合</span><br><span class="hljs-comment">* */</span><br></code></pre></div></td></tr></table></figure><h3 id="集合框架"><a class="markdownIt-Anchor" href="#集合框架">#</a> 集合框架</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 二、集合框架</span><br><span class="hljs-comment">*   |---- Collection接口：单列集合，用来存储一个一个的对象</span><br><span class="hljs-comment">*       |---- List接口：存储有序的、可重复的数据。  --&gt; 类似于&quot;动态&quot;数组</span><br><span class="hljs-comment">*           |---- ArrayList、LinkedList、Vector</span><br><span class="hljs-comment">*       |---- Set接口：存储无序的、不可重复的数据   --&gt; 类似于高中讲的“集合”</span><br><span class="hljs-comment">*           |---- HashSet、 LinkedHashSet、TreeSet</span><br><span class="hljs-comment">*   |---- Map接口：双列集合，用来存储一对一对(key, value)的数据    --&gt; 类似于高中函数 y = f(x)，</span><br><span class="hljs-comment">*                                                              一个key对应一个value，一个value可以对应多个key</span><br><span class="hljs-comment">*       |---- HashMap、LinkedHashMap、TreeMap、HashTable、Properties</span><br><span class="hljs-comment">* */</span><br></code></pre></div></td></tr></table></figure><h3 id="collection接口"><a class="markdownIt-Anchor" href="#collection接口">#</a> Collection 接口</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//add(Object e)：将元素e添加到集合中</span><br><span class="hljs-comment">//向Collection接口的实现类的对象中添加数据obj时，要求重写obj所在类的equals()方法</span><br><span class="hljs-comment">//size()：获取添加的元素的个数</span><br><span class="hljs-comment">//addAll(Collection c)：将集合c中的元素添加到当前的集合中</span><br><span class="hljs-comment">//isEmpty()：判断当前集合是否为空(是否有元素)</span><br><span class="hljs-comment">//clear()：清空集合中的所有元素</span><br><span class="hljs-comment">//contains(Object e)：判断当前集合中是否包含对象e。对于对象，判断的是equals()方法而不是==运算符。</span><br><span class="hljs-comment">//所以实现相关功能需要考虑是否重写equals()方法</span><br><span class="hljs-comment">//containsAll(Collection coll1):判断形参coll1中的所有元素是否都存在于当前集合中</span><br><span class="hljs-comment">//remove(Object o)：删, 返回值是boolean，表示是否删除成功</span><br>        <span class="hljs-comment">//仍然需要重写equals()方法，因为是逐个判断是否和目标相同的</span><br><span class="hljs-comment">//removeAll(Collection coll1)：从当前集合中移除coll1中所有的元素</span><br>        <span class="hljs-comment">//仍然需要重写equals()方法，因为是逐个判断是否和目标相同的</span><br><span class="hljs-comment">//retrainAll(Collection coll1)：求与coll1的交集（次操作会修改原有集合）。返回值是boolean</span><br><span class="hljs-comment">//equals(Object obj)：判断两个集合是否相等。</span><br><span class="hljs-comment">//hashCode()：返回当前对象的hash值</span><br><span class="hljs-comment">//Arrays.asList()：数组转换成集合</span><br><span class="hljs-comment">//iterator()：返回一个迭代器接口的实例，用于遍历集合元素</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollectionTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        Collection collection = <span class="hljs-keyword">new</span> ArrayList();<br>        <span class="hljs-comment">//add(Object e)：将元素e添加到集合中</span><br>        <span class="hljs-comment">//向Collection接口的实现类的对象中添加数据obj时，要求重写obj所在类的equals()方法</span><br>        collection.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>        collection.add(<span class="hljs-string">&quot;BB&quot;</span>);<br>        collection.add(<span class="hljs-number">123</span>);<span class="hljs-comment">//自动装箱</span><br>        collection.add(<span class="hljs-keyword">new</span> Date());<br>        <span class="hljs-comment">//size()：获取添加的元素的个数</span><br>        System.out.println(collection.size());<span class="hljs-comment">//4</span><br>        <span class="hljs-comment">//addAll(Collection c)：将集合c中的元素添加到当前的集合中</span><br>        Collection collection1 = <span class="hljs-keyword">new</span> ArrayList();<br>        collection.add(<span class="hljs-string">&quot;CC&quot;</span>);<br>        collection.add(<span class="hljs-number">456</span>);<span class="hljs-comment">//自动装箱</span><br>        collection.addAll(collection1);<br>        System.out.println(collection);<span class="hljs-comment">//[AA, BB, 123, Wed Sep 29 00:49:29 CST 2021, CC, 456]</span><br>        <span class="hljs-comment">//isEmpty()：判断当前集合是否为空(是否有元素)</span><br>        System.out.println(collection.isEmpty());<span class="hljs-comment">//false</span><br>        <span class="hljs-comment">//clear()：清空集合中的所有元素</span><br>        collection.clear();<br>        System.out.println(collection.isEmpty());<span class="hljs-comment">//true</span><br>        <span class="hljs-comment">//contains(Object e)：判断当前集合中是否包含对象e。对于对象，判断的是equals()方法而不是==运算符。</span><br>        <span class="hljs-comment">//所以实现相关功能需要考虑是否重写equals()方法</span><br>        System.out.println(collection.contains(<span class="hljs-string">&quot;AA&quot;</span>));<span class="hljs-comment">//false</span><br>        collection.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>        System.out.println(collection.contains(<span class="hljs-string">&quot;AA&quot;</span>));<span class="hljs-comment">//true</span><br>        <span class="hljs-comment">//containsAll(Collection coll1):判断形参coll1中的所有元素是否都存在于当前集合中</span><br>        collection.add(<span class="hljs-number">123</span>);<br>        collection.add(<span class="hljs-number">456</span>);<br>        Collection coll1 = Arrays.asList(<span class="hljs-number">123</span>,<span class="hljs-number">456</span>);<span class="hljs-comment">//返回的是含有123和456的list</span><br>        collection.containsAll(coll1);<span class="hljs-comment">//true</span><br>        <span class="hljs-comment">//remove(Object o)：删, 返回值是boolean，表示是否删除成功</span><br>        <span class="hljs-comment">//仍然需要重写equals()方法，因为是逐个判断是否和目标相同的</span><br>        collection.remove(<span class="hljs-number">123</span>);<br>        System.out.println(collection);<br>        <span class="hljs-comment">//removeAll(Collection coll1)：从当前集合中移除coll1中所有的元素</span><br>        <span class="hljs-comment">//仍然需要重写equals()方法，因为是逐个判断是否和目标相同的</span><br>        collection.removeAll(Arrays.asList(<span class="hljs-string">&quot;AA&quot;</span>, <span class="hljs-number">456</span>));<br>        System.out.println(collection);<span class="hljs-comment">//[]   (空)</span><br>        <span class="hljs-comment">//retrainAll(Collection coll1)：求与coll1的交集（次操作会修改原有集合）。返回值是boolean</span><br>        collection.add(<span class="hljs-number">123</span>);<br>        collection.retainAll(Arrays.asList(<span class="hljs-number">123</span>,<span class="hljs-number">456</span>));<br>        System.out.println(collection);<span class="hljs-comment">//[123]</span><br>        <span class="hljs-comment">//equals(Object obj)：判断两个集合是否相等。</span><br>        System.out.println(collection.equals(Arrays.asList(<span class="hljs-number">123</span>)));<span class="hljs-comment">//true</span><br>        <span class="hljs-comment">//hashCode()：返回当前对象的hash值</span><br>        System.out.println(collection.hashCode());<br>        <span class="hljs-comment">//toArray()： 集合转换成数组（返回值是Object[]类型）</span><br>        Object[] objects = collection.toArray();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; objects.length; i++) &#123;<br>            System.out.println(objects[i]);<br>        &#125;<br>        <span class="hljs-comment">//Arrays.asList()：数组转换成成集合</span><br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;AA&quot;</span>, <span class="hljs-string">&quot;BB&quot;</span>);<br>        <span class="hljs-comment">//注意:new int[]&#123;123, 456&#125;被当成是一个元素装入List；new Integer[]&#123;123, 456&#125;则是两个元素被装入list</span><br>        List arr1 = Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">123</span>, <span class="hljs-number">456</span>&#125;);<br>        System.out.println(arr1.size());<span class="hljs-comment">//1</span><br>        List arr2 = Arrays.asList(<span class="hljs-keyword">new</span> Integer[]&#123;<span class="hljs-number">123</span>, <span class="hljs-number">456</span>&#125;);<br>        System.out.println(arr2.size());<span class="hljs-comment">//2</span><br>        <span class="hljs-comment">//iterator()：返回一个迭代器接口的实例，用于遍历集合元素，见“Iterator接口”</span><br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="iterator接口"><a class="markdownIt-Anchor" href="#iterator接口">#</a> Iterator 接口</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 集合元素的遍历操作，使用Iterator接口</span><br><span class="hljs-comment">* 1、内部的方法：hasNext(), next()</span><br><span class="hljs-comment">* 2、内部定义了remove()方法，此处的方法不同于Collection中的remove方法。</span><br><span class="hljs-comment">*    如果还没调用next()或在上一次调用next方法之后已经调用了remove()方法，再调用remove都会报IllegalStateException</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IteratorTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        Collection collection = <span class="hljs-keyword">new</span> ArrayList();<br>        collection.add(<span class="hljs-number">123</span>);<br>        collection.add(<span class="hljs-number">456</span>);<br>        collection.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-number">20</span>));<br>        collection.add(<span class="hljs-keyword">new</span> String((<span class="hljs-string">&quot;Tom&quot;</span>)));<br>        collection.add(<span class="hljs-keyword">false</span>);<br>        Iterator iterator = collection.iterator();<span class="hljs-comment">//迭代器</span><br>        <span class="hljs-comment">//迭代器越界后会报错：NoSuchElementException</span><br>        <span class="hljs-comment">//正确的迭代方法</span><br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Collection collection = <span class="hljs-keyword">new</span> ArrayList();<br>        collection.add(<span class="hljs-number">123</span>);<br>        collection.add(<span class="hljs-number">456</span>);<br>        collection.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-number">20</span>));<br>        collection.add(<span class="hljs-keyword">new</span> String((<span class="hljs-string">&quot;Tom&quot;</span>)));<br>        collection.add(<span class="hljs-keyword">false</span>);<br>        Iterator iterator = collection.iterator();<span class="hljs-comment">//迭代器</span><br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            Object obj = iterator.next();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;Tom&quot;</span>.equals(obj))&#123;<br>                <span class="hljs-comment">//删除集合中的&quot;Tom&quot;，如果还没调用next()或在上一次调用next方法之后已经调用了remove()方法，</span><br>                <span class="hljs-comment">//再调用remove都会报IllegalStateException</span><br>                iterator.remove();<br>            &#125;<br>        &#125;<br>        iterator = collection.iterator();<span class="hljs-comment">//迭代器,因为前面iterator已经指向末尾，所以此处要重新生成</span><br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>迭代器的执行原理：</p><p><img src="https://gitee.com/dzcgood/img-bed/raw/master/img/image-20211001161557658.png" alt="迭代器的执行原理"></p><h3 id="使用for-each遍历集合和数组"><a class="markdownIt-Anchor" href="#使用for-each遍历集合和数组">#</a> 使用 For - each 遍历集合和数组</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 使用for - each遍历集合、数组(JDK5.0新增)</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ForEachTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        Collection collection = <span class="hljs-keyword">new</span> ArrayList();<br>        collection.add(<span class="hljs-number">123</span>);<br>        collection.add(<span class="hljs-number">456</span>);<br>        collection.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-number">20</span>));<br>        collection.add(<span class="hljs-keyword">new</span> String((<span class="hljs-string">&quot;Tom&quot;</span>)));<br>        collection.add(<span class="hljs-keyword">false</span>);<br>        <span class="hljs-comment">//for(集合/数组元素类型 : 局部变量, 集合/数组对象)&#123;&#125;</span><br>        <span class="hljs-keyword">for</span>(Object obj : collection)&#123;<br>            System.out.println(obj);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="list接口"><a class="markdownIt-Anchor" href="#list接口">#</a> List 接口</h3><h4 id="arraylist源码分析"><a class="markdownIt-Anchor" href="#arraylist源码分析">#</a> ArrayList 源码分析</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 3、ArrayList源码分析：</span><br><span class="hljs-comment">*       JDK7情况下：</span><br><span class="hljs-comment">*           ArrayList list = new ArrayList();//底层创建了初始长度为10的数组</span><br><span class="hljs-comment">*           list.add(123);//element[0] = new Integer(123);</span><br><span class="hljs-comment">*           ...</span><br><span class="hljs-comment">*           list.add(11);//如果此次的添加导致底层数组容量不构，则扩容；</span><br><span class="hljs-comment">*                       //默认扩容为原先长度的1.5倍，并将原有数组数据复制到新数组中</span><br><span class="hljs-comment">*           建议：开发中使用带参的构造器：ArrayList(int initialCapacity)，尽量避免扩容</span><br><span class="hljs-comment">*       JDK8情况下：</span><br><span class="hljs-comment">*           ArrayList list = new ArrayList();//底层Object[] element初始化为&#123;&#125;，并没有创建长度为10的数组</span><br><span class="hljs-comment">*           list.add(123);//第一次调用add()时，底层才创建了长度10的数组，并将123添加到element[]</span><br><span class="hljs-comment">*           ...</span><br><span class="hljs-comment">*           后续的添加和扩容操作与JDK7无异</span><br><span class="hljs-comment">*       小结：JDK7中的ArrayList对象创建类似于单例模式中的饿汉式，而JDK8中的ArrayList对象的创建类似于懒汉式，</span><br><span class="hljs-comment">*            延迟了数组的创建，节约了内存</span><br><span class="hljs-comment">* */</span><br></code></pre></div></td></tr></table></figure><h4 id="linkedlist源码分析"><a class="markdownIt-Anchor" href="#linkedlist源码分析">#</a> LinkedList 源码分析</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 4、LinkedList源码分析：</span><br><span class="hljs-comment">*   LinkedList list = new LinkedList();//内部声明了类型的first和last属性（头指针和尾指针），默认值为null</span><br><span class="hljs-comment">*   list.add(123);//将123封装到Node中，创建了Node对象，并插入到双向链表的末尾</span><br><span class="hljs-comment">*   其中，链表结点Node的定义为：</span><br><span class="hljs-comment">*   private static class Node&lt;E&gt; &#123;</span><br><span class="hljs-comment">*        E item;</span><br><span class="hljs-comment">*        Node&lt;E&gt; next;</span><br><span class="hljs-comment">*       Node&lt;E&gt; prev;</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="hljs-comment">*            this.item = element;</span><br><span class="hljs-comment">*            this.next = next;</span><br><span class="hljs-comment">*            this.prev = prev;</span><br><span class="hljs-comment">*        &#125;</span><br><span class="hljs-comment">*    &#125;</span><br><span class="hljs-comment">* */</span><br></code></pre></div></td></tr></table></figure><h4 id="vector源码分析"><a class="markdownIt-Anchor" href="#vector源码分析">#</a> Vector 源码分析</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 4、Vector源码分析：</span><br><span class="hljs-comment">*   JDK7和JDK8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组，在扩容方面，默认扩容为原来数组长度的2倍</span><br><span class="hljs-comment">**/</span><br></code></pre></div></td></tr></table></figure><h4 id="list接口中的常用方法"><a class="markdownIt-Anchor" href="#list接口中的常用方法">#</a> List 接口中的常用方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//void add(int index, Object obj)：在index位置插入元素</span><br><span class="hljs-comment">//boolean addAll(int index, Collection c):在index位置开始将集合c的所有元素插入</span><br><span class="hljs-comment">//Object get(int index)：获取索引值为index的元素</span><br><span class="hljs-comment">//int indexOf(Object o)：返回o第一次出现的位置，若没有，则返回-1</span><br><span class="hljs-comment">//int lastIndexOf(Object o)：返回o最后一次出现的位置，若没有，则返回-1</span><br><span class="hljs-comment">//Object remove(int index):按索引删除元素，并返回该元素</span><br><span class="hljs-comment">//Object set(int index, Object o):将index位置的元素设置成o，并返回该索引位置修改前的值</span><br><span class="hljs-comment">//说明：remove(Object o)和remove(int index)，index和o一样的时候，默认是当成索引，如果想作为Object，可使用自动装箱</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 总结：常用方法有</span><br><span class="hljs-comment"> * 增：add(Object o)</span><br><span class="hljs-comment"> * 删: remove(int index) / remove(Object o)</span><br><span class="hljs-comment"> * 改: set(int index, Object o)</span><br><span class="hljs-comment"> * 查: get(int index) / indexOf(Object o) / lastIndexOf(Object o) </span><br><span class="hljs-comment"> * 插: add(int index, Object o)</span><br><span class="hljs-comment"> * 长度: size()</span><br><span class="hljs-comment"> * 遍历: ①iterator迭代器 ②for - each ③普通for循环，按照索引访问</span><br><span class="hljs-comment">* */</span><br><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-number">123</span>);<br>        list.add(<span class="hljs-number">456</span>);<br>        list.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>        list.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>));<br>        list.add(<span class="hljs-number">456</span>);<br>        System.out.println(list);<span class="hljs-comment">//[123, 456, AA, Person@4dcbadb4, 456]</span><br>        <span class="hljs-comment">//void add(int index, Object obj)：在index位置插入元素</span><br>        list.add(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;BB&quot;</span>);<br>        System.out.println(list);<span class="hljs-comment">//[123, BB, 456, AA, Person@4dcbadb4, 456]</span><br>        <span class="hljs-comment">//boolean addAll(int index, Collection c):在index位置开始将集合c的所有元素插入</span><br>        list.addAll(<span class="hljs-number">1</span>, Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));<br><span class="hljs-comment">//        list.add(Arrays.asList(1,2,3));//注意区分</span><br>        System.out.println(list.size());<span class="hljs-comment">//6 + 3 = 9</span><br>        <span class="hljs-comment">//Object get(int index)：获取索引值为index的元素</span><br>        Object o = list.get(<span class="hljs-number">1</span>);<br>        System.out.println(o);<br>        <span class="hljs-comment">//int indexOf(Object o)：返回o第一次出现的位置，若没有，则返回-1</span><br>        <span class="hljs-comment">//int lastIndexOf(Object o)：返回o最后一次出现的位置，若没有，则返回-1</span><br>        <span class="hljs-keyword">int</span> i = list.indexOf(<span class="hljs-number">456</span>);<br>        System.out.println(i);<br>        <span class="hljs-keyword">int</span> i1 = list.lastIndexOf(<span class="hljs-number">456</span>);<br>        System.out.println(i1);<br>        <span class="hljs-comment">//Object remove(int index):按索引删除元素，并返回该元素</span><br>        Object obj = list.remove(<span class="hljs-number">1</span>);<br>        System.out.println(obj);<br>        <span class="hljs-comment">//Object set(int index, Object o):将index位置的元素设置成o，并返回该索引位置修改前的值</span><br>        System.out.println(list);<br>        Object obj1 = list.set(<span class="hljs-number">0</span>, <span class="hljs-number">111</span>);<br>        System.out.println(obj1);<br>        System.out.println(list);<br>        <span class="hljs-comment">//List subList(int fromIndex, int endIndex)：返回子列表,[fromIndex, endIndex)</span><br>        System.out.println(list.subList(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>));<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="set接口"><a class="markdownIt-Anchor" href="#set接口">#</a> Set 接口</h3><h4 id="添加元素的过程"><a class="markdownIt-Anchor" href="#添加元素的过程">#</a> 添加元素的过程</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 添加元素的过程：以HashSet为例</span><br><span class="hljs-comment"> *  我们向HashSet中添加元素a，首先调用元素a所在类的hashCode()方法，计算元素a的哈希值，此哈希值接着通过某种算法计算出</span><br><span class="hljs-comment"> *  HashSet底层数组中的存放位置（即：索引位置），判断数组此位置上是否已经铀元素：如果此位置上没有其他元素，则元素a添加成功。</span><br><span class="hljs-comment"> *  如果此位置上有其他元素b（或以链表形式存在的多个元素），则比较元素a与元素b的hash值，如果hash值不相同，则元素a添加成功，</span><br><span class="hljs-comment"> *  如果hash值相同，进而调用元素a所在类的equals()方法。若返回true，则元素a添加失败。若返回false，则元素a添加成功。</span><br><span class="hljs-comment"> *  JDK7中，链表是头插入；JDK8中，链表是尾插入</span><br><span class="hljs-comment"> * */</span><br></code></pre></div></td></tr></table></figure><h4 id="hashset"><a class="markdownIt-Anchor" href="#hashset">#</a> HashSet</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/2 - 0:09</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 1、Set接口的框架</span><br><span class="hljs-comment">*   |---- Collection接口：单列集合，用来存储一个一个的对象</span><br><span class="hljs-comment">*       |---- Set接口：存储无序的、不可重复的数据   --&gt; 类似于高中讲的“集合”</span><br><span class="hljs-comment">*           |---- HashSet：Set接口的主要实现类；线程不安全的；可以存储null值</span><br><span class="hljs-comment">*               |---- LinkedHashSet：是HashSet的子类；遍历其内部数据时，可以按照添加的顺序遍历</span><br><span class="hljs-comment">*           |---- TreeSet：使用红黑树存储的，要求元素必须是同一类型，可按照某种属性进行排序</span><br><span class="hljs-comment">* 2、Set接口中没有额外定义的方法，使用的都是Collection中的方法</span><br><span class="hljs-comment">* 3、要求：向Set中添加的数据，其所在类一定要重写hashCode()和equals()</span><br><span class="hljs-comment">*         重写的hashCode()和equals()尽可能保持一致性：相等的对象必须具有相等的散列码</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SetTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 一、Set:无序存储的、不可重复的数据</span><br><span class="hljs-comment">    *   以HashSet为例说明：</span><br><span class="hljs-comment">    *   1、无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加。而是根据数据的Hash值决定的。</span><br><span class="hljs-comment">    *   2、不可重复性：保证添加的元素按照equals()方法判断时，不能返回true。即，相同的元素只能添加一个。</span><br><span class="hljs-comment">    * 二、添加元素的过程：以HashSet为例</span><br><span class="hljs-comment">    *   我们向HashSet中添加元素a，首先调用元素a所在类的hashCode()方法，计算元素a的哈希值，此哈希值接着通过某种算法计算出</span><br><span class="hljs-comment">    *   HashSet底层数组中的存放位置（即：索引位置），判断数组此位置上是否已经铀元素：如果此位置上没有其他元素，则a添加成功</span><br><span class="hljs-comment">    *   如果此位置上有其他元素b（或以链表形式存在的多个元素），则比较元素a与元素b的hash值，如果hash值不相同，则a添加成功</span><br><span class="hljs-comment">    *   如果hash值相同，进而调用元素a所在类的equals()方法。若返回true，则元素a添加失败。若返回false，则元素a添加成功。</span><br><span class="hljs-comment">    *   JDK7中，链表是头插入；JDK8中，链表是尾插入</span><br><span class="hljs-comment">    *   HashSet底层存储原理：数组 + 链表 + 红黑树</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        Set set = <span class="hljs-keyword">new</span> HashSet();<br>        set.add(<span class="hljs-number">456</span>);<br>        set.add(<span class="hljs-number">123</span>);<br>        set.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;CC&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="linkedhashset"><a class="markdownIt-Anchor" href="#linkedhashset">#</a> LinkedHashSet</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    * LinkedHashSet的使用</span><br><span class="hljs-comment">    * 1、LinkedHashSet中的元素被封装成一个结点e，这些结点按照元素的添加顺序以双向链表的方式互相连接，这样，就可以按照元素添加</span><br><span class="hljs-comment">    *   顺序来遍历LinkedHashSet。</span><br><span class="hljs-comment">    * 2、优点：对于频繁的遍历操作，LinkedHashSet的效率高于HashSet</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Set set = <span class="hljs-keyword">new</span> LinkedHashSet();<br>        set.add(<span class="hljs-number">456</span>);<br>        set.add(<span class="hljs-number">123</span>);<br>        set.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;CC&quot;</span>);<br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>));<br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>));<br>    &#125;<br></code></pre></div></td></tr></table></figure><h4 id="treeset"><a class="markdownIt-Anchor" href="#treeset">#</a> TreeSet</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/2 - 14:26</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* TreeSet类的使用</span><br><span class="hljs-comment">* 1、向TreeSet中添加的数据，要求是相同类的对象</span><br><span class="hljs-comment">* 2、两种排序方式：自然排序（实现CompareTo接口）和定制排序（Comparator）</span><br><span class="hljs-comment">* 3、自然排序中，比较两个元素是否相同的标准为compareTo()方法，不再是equals()方法</span><br><span class="hljs-comment">* 4、自定义排序中，比较两个元素是否相同的标准为compareTo()方法，不再是equals()方法</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeSetTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        Set set = <span class="hljs-keyword">new</span> TreeSet();<br>        set.add(<span class="hljs-number">456</span>);<br>        set.add(<span class="hljs-number">123</span>);<br><span class="hljs-comment">//        set.add(&quot;AA&quot;);//错误添加方式，“AA”与整型数据类型不一样</span><br><span class="hljs-comment">//        set.add(&quot;CC&quot;);</span><br><span class="hljs-comment">//        set.add(new Person(&quot;Tom&quot;, 12));</span><br><span class="hljs-comment">//        set.add(new Person(&quot;Tom&quot;, 12));</span><br>        set.add(<span class="hljs-number">24</span>);<br>        <span class="hljs-keyword">for</span> (Object o : set) &#123;<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Set set = <span class="hljs-keyword">new</span> TreeSet();<br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>));<span class="hljs-comment">//Person类已重写compareTo()方法，按照年龄大小排序</span><br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">14</span>));<br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">13</span>));<br>        Iterator iterator = set.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        Comparator comparator = <span class="hljs-keyword">new</span> Comparator()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span></span>&#123;<br>                <span class="hljs-keyword">if</span>(o1 <span class="hljs-keyword">instanceof</span> Person &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> Person)&#123;<br>                    <span class="hljs-keyword">return</span> Integer.compare(((Person) o1).getAge(), ((Person) o2).getAge());<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;类型不匹配&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;;<br>        Set set = <span class="hljs-keyword">new</span> TreeSet(comparator);<span class="hljs-comment">//使用自定义的排序方式</span><br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>));<span class="hljs-comment">//虽然Person类已重写compareTo()方法，但TreeSet的构造器使用了定制排序</span><br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">14</span>));<br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">13</span>));<br>        Iterator iterator = set.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="面试题"><a class="markdownIt-Anchor" href="#面试题">#</a> 面试题</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">   * 一道面试题</span><br><span class="hljs-comment">   * */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>       HashSet set = <span class="hljs-keyword">new</span> HashSet();<br>       Person person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;AA&quot;</span>, <span class="hljs-number">1001</span>);<br>       Person person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;BB&quot;</span>, <span class="hljs-number">1001</span>);<br>       set.add(person1);<br>       set.add(person2);<br>       person1.setName(<span class="hljs-string">&quot;CC&quot;</span>);<br>       <span class="hljs-comment">//这里会删除失败，因为person1中的属性被修改，导致hashCode值改变。用新的hashCode值去索引，会找不到目标</span><br>       set.remove(person1);<br>       <span class="hljs-comment">//输出还是有两个person</span><br>       System.out.println(set);<br>       <span class="hljs-comment">//会添加成功，虽然元素重复，但新的hashCode对应的位置是空的，可以添加</span><br>       set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;CC&quot;</span>,<span class="hljs-number">1001</span>));<br>       System.out.println(set);<span class="hljs-comment">//输出三个person</span><br>       <span class="hljs-comment">//还是能添加成功，虽然hashCode相同，但equals()返回不相同</span><br>       set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-number">1001</span>));<br>       System.out.println(set);<span class="hljs-comment">//会输出四个person</span><br>   &#125;<br></code></pre></div></td></tr></table></figure><h3 id="map接口"><a class="markdownIt-Anchor" href="#map接口">#</a> Map 接口</h3><h4 id="map接口框架"><a class="markdownIt-Anchor" href="#map接口框架">#</a> Map 接口框架</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 一、Map接口框架</span><br><span class="hljs-comment">*   |---- Map：双列数据，存储key-value对的数据 --&gt; 类似于高中的函数y = f(x)</span><br><span class="hljs-comment">*       |---- HashMap：作为Map的主要实现类，线程不安全的，效率高。存储存储key或value时，可以是null值。</span><br><span class="hljs-comment">*           |---- LinkedHashMap：保证在遍历map元素时，可以按照添加的顺序实验遍历。原理和LinkedHashSet类似。对于频繁 *   的遍历操作，效率要高于HashMap</span><br><span class="hljs-comment">*       |---- TreeMap：保证按照添加的key-value对（排序依据是key）进行排序，实现排序遍历。底层使用红黑树</span><br><span class="hljs-comment">*       |---- Hashtable：作为古老的实现类，线程安全的，效率低。存储存储key或value时，不可以是null值</span><br><span class="hljs-comment">*           |---- Properties：常用来处理配置文件。key和value都是String类型</span><br><span class="hljs-comment">*   HashMao的底层：数组 + 链表（JDK7及以前）</span><br><span class="hljs-comment">*                 数组 + 链表 + 红黑树 （JDK8之后）</span><br><span class="hljs-comment">* */</span><br></code></pre></div></td></tr></table></figure><h4 id="map结构理解"><a class="markdownIt-Anchor" href="#map结构理解">#</a> Map 结构理解</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 三、结构的理解（以HashMap为例，不适用于TreeMap）</span><br><span class="hljs-comment">*   key是不可重复的、无序的，使用Set存储所有的key   ---&gt; key所在类要重写equals()和hashCode()方法                  </span><br><span class="hljs-comment">*   value是可重复的、无序的，使用Collection存储所有的value  ---&gt; value所在类要重写equals()</span><br><span class="hljs-comment">*   key和value是被封装成一个entry对象，key和value是entry的两个属性。</span><br><span class="hljs-comment">*   entry是无序的、不可重复的，使用set存储所有的entry</span><br><span class="hljs-comment">**/</span><br></code></pre></div></td></tr></table></figure><h4 id="hashmap底层实现原理"><a class="markdownIt-Anchor" href="#hashmap底层实现原理">#</a> HashMap 底层实现原理</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">四、HashMap底层实现原理，以JDK7为例</span><br><span class="hljs-comment">*   HashMap map = new HashMap();</span><br><span class="hljs-comment">*   在实例化以后，底层创建了长度是16的一维数组Entry[] table</span><br><span class="hljs-comment">*   ..执行多次put..</span><br><span class="hljs-comment">*   map.put(key1, value1);</span><br><span class="hljs-comment">*   首先，调用key1所在类的hashCode()方法计算key1的hash值，此hash值经过某种算法计算后，得到在Entry数组中的存放位置</span><br><span class="hljs-comment">*   如果此位置上的数据为空，此时key1-value1添加成功。如果此位置上的数据不为空（即此位置存在一个或多个数据（以链表存在）），</span><br><span class="hljs-comment">*   比较当前key1和已存在的一个或多个数据key的hash值：</span><br><span class="hljs-comment">*       如果key1的hash值与已存在数据的hash都不相同，此时key1-value1添加成功。 ---&gt; 情况2</span><br><span class="hljs-comment">*       若和某一个数据(key2, value2)的hash值相同，则调用key1所在类的equals()方法：</span><br><span class="hljs-comment">*           若相同，则添加失败   ----&gt; 情况3</span><br><span class="hljs-comment">*           若不相同，使用value1替换value2</span><br><span class="hljs-comment">*   补充：关于情况2和情况3，此时key1-value1和原来的数据以链表方式存储</span><br><span class="hljs-comment">*   在不断的添加过程中，会涉及到扩容的问题，当超出临界值并且要存放的位置非空时，扩容。</span><br><span class="hljs-comment">*   默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。</span><br><span class="hljs-comment">*   JDK8相较于JDK7底层实现方面的不同：</span><br><span class="hljs-comment">*   1、new HashMap()：底层没有创建一个底层为16的数组</span><br><span class="hljs-comment">*   2、JDK8底层的数组是：Node[]，而非Entry[]</span><br><span class="hljs-comment">*   3、首次调用put()方法时，底层会创建长度为16的数组</span><br><span class="hljs-comment">*   4、JDK7底层结构只有：数组 + 链表；JDK8底层结构：数组 + 链表 + 红黑树。</span><br><span class="hljs-comment">*      当数组的某一个索引位置上的元素超过8个时且当前数组的长度超过64时，此时此索引位置上的数据改为使用红黑树存储</span><br><span class="hljs-comment">* 五、几个概念</span><br><span class="hljs-comment">*   DEFAULT_INITIAL_CAPACITY:HashMap的默认容量：16</span><br><span class="hljs-comment">*   DEFAULT_LOAD_FACTOR:HashMap的默认加载因子：0.75</span><br><span class="hljs-comment">*   threshold：扩容的临界值，= 容量 * 加载因子 = 16 * 0.75 = 12</span><br><span class="hljs-comment">*   TREEIFY_THRESHOLD:Bucket中链表长度大于该默认值，转化为红黑树：8</span><br><span class="hljs-comment">*   MIN_TREEIFY_CAPACITY：Bucket中的Node倍树化时最小的hash表容量：64</span><br><span class="hljs-comment">**/</span><br></code></pre></div></td></tr></table></figure><h4 id="linkedhashmap实现原理"><a class="markdownIt-Anchor" href="#linkedhashmap实现原理">#</a> LinkedHashMap 实现原理</h4><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">源码中LinkedHashMap底层链表上的结点Entry继承了HashMap中的结点<span class="hljs-keyword">Node</span><span class="hljs-title">，将其改成了双向链表</span><br></code></pre></div></td></tr></table></figure><h4 id="常用方法"><a class="markdownIt-Anchor" href="#常用方法">#</a> 常用方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//常用方法</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 添加：put()</span><br><span class="hljs-comment">    * 删除：remove()</span><br><span class="hljs-comment">    * 修改：put()</span><br><span class="hljs-comment">    * 查询：get()</span><br><span class="hljs-comment">    * 长度：size()</span><br><span class="hljs-comment">    * 遍历：keySet(), values(), entrySet()</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Map map = <span class="hljs-keyword">new</span> HashMap();<br>        <span class="hljs-comment">//Object put(Object key, Object value)</span><br>        map.put(<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-number">123</span>);<br>        map.put(<span class="hljs-number">45</span>,<span class="hljs-number">123</span>);<br>        <span class="hljs-comment">//修改操作</span><br>        map.put(<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-number">456</span>);<br>        System.out.println(map);<span class="hljs-comment">//&#123;AA=456, 45=123&#125;</span><br>        Map map1 = <span class="hljs-keyword">new</span> HashMap();<br>        map1.put(<span class="hljs-string">&quot;CC&quot;</span>,<span class="hljs-number">123</span>);<br>        map1.put(<span class="hljs-string">&quot;DD&quot;</span>,<span class="hljs-number">123</span>);<br>        <span class="hljs-comment">//void putAll(Map m)</span><br>        map.putAll(map1);<br>        System.out.println(map);<span class="hljs-comment">//&#123;AA=456, CC=123, DD=123, 45=123&#125;</span><br>        <span class="hljs-comment">//Object value = remove(Object key)</span><br>        map.remove(<span class="hljs-string">&quot;CC&quot;</span>);<br>        System.out.println(map);<span class="hljs-comment">//&#123;AA=456, DD=123, 45=123&#125;</span><br>        <span class="hljs-comment">//clear()</span><br>        map.clear();<br>        System.out.println(map);<span class="hljs-comment">//&#123;&#125;</span><br>        System.out.println(map.size());<span class="hljs-comment">//0</span><br>        map.put(<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-number">123</span>);<br>        map.put(<span class="hljs-number">45</span>,<span class="hljs-number">123</span>);<br>        <span class="hljs-comment">//Object value = get(Object key)</span><br>        System.out.println(map.get(<span class="hljs-string">&quot;AA&quot;</span>));<span class="hljs-comment">//123</span><br>        <span class="hljs-comment">//boolean containsKey(Object key)</span><br>        System.out.println(map.containsKey(<span class="hljs-string">&quot;AA&quot;</span>));<span class="hljs-comment">//true</span><br>        <span class="hljs-comment">//boolean containsValue(Object value)</span><br>        System.out.println(map.containsValue(<span class="hljs-number">123</span>));<span class="hljs-comment">//true</span><br>        <span class="hljs-comment">//size()</span><br>        System.out.println(map.size());<span class="hljs-comment">//2</span><br>        <span class="hljs-comment">//isEmpty()</span><br>        System.out.println(map.isEmpty());<span class="hljs-comment">//false</span><br>        <span class="hljs-comment">//boolean equals(Object obj):判断当前map和参数对象obj是否相等</span><br>        <span class="hljs-comment">//Map没有迭代器</span><br>        <span class="hljs-comment">//Set keySet()：返回所有key组成的Set</span><br>        Set set = map.keySet();<br>        <span class="hljs-keyword">for</span> (Object o : set) &#123;<br>            System.out.println(o);<br>        &#125;<br>        <span class="hljs-comment">//Collection values()：返回所有value值构成的集合</span><br>        Collection values = map.values();<br>        <span class="hljs-keyword">for</span> (Object value : values) &#123;<br>            System.out.println(value);<br>        &#125;<br>        <span class="hljs-comment">//遍历所有的key-value</span><br>        <span class="hljs-comment">//方式一：Set entrySet()</span><br>        Set set1 = map.entrySet();<br>        <span class="hljs-keyword">for</span> (Object o : set1) &#123;<br><span class="hljs-comment">//            System.out.println(o);//可以直接输出</span><br>            Map.Entry entry = (Map.Entry)o;<br>            System.out.println(entry.getKey() + <span class="hljs-string">&quot;, &quot;</span> + entry.getValue());<span class="hljs-comment">//entry有getKey()和getValue()</span><br>        &#125;<br>        <span class="hljs-comment">//方式二</span><br>        Set keySet = map.keySet();<br>        Iterator iterator = keySet.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            Object key = iterator.next();<br>            Object value = map.get(key);<br>            System.out.println(<span class="hljs-string">&quot;key = &quot;</span> + key + <span class="hljs-string">&quot;, value = &quot;</span> + value);<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h4 id="treemap使用举例"><a class="markdownIt-Anchor" href="#treemap使用举例">#</a> TreeMap 使用举例</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/3 - 16:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeMapTest</span> </span>&#123;<br>    <span class="hljs-comment">//向TreeMap中添加key-value，要求key必须是由同一个类创建的对象</span><br>    <span class="hljs-comment">//因为要按照key进行排序：自然排序，定制排序</span><br>    <span class="hljs-comment">//自然排序</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        TreeMap map = <span class="hljs-keyword">new</span> TreeMap();<br>        map.put(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">13</span>), <span class="hljs-number">98</span>);<br>        map.put(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">15</span>), <span class="hljs-number">89</span>);<br>        map.put(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Mike&quot;</span>,<span class="hljs-number">21</span>), <span class="hljs-number">76</span>);<br>        map.put(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">9</span>), <span class="hljs-number">100</span>);<br>        Set set = map.entrySet();<br>        Iterator iterator = set.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            Map.Entry entry = (Map.Entry)iterator.next();<br>            System.out.println(entry.getKey() + <span class="hljs-string">&quot; &quot;</span> +entry.getValue());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//定制排序：使用参数为Comparator的构造器</span><br>    <span class="hljs-comment">//按照年龄从大到小排序</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Map map = <span class="hljs-keyword">new</span> TreeMap(<span class="hljs-keyword">new</span> Comparator() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span>(o1 <span class="hljs-keyword">instanceof</span> Person &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> Person)&#123;<br>                    Person p1 = (Person) o1;<br>                    Person p2 = (Person) o2;<br>                    <span class="hljs-keyword">return</span> -Integer.compare(p1.getAge(), p2.getAge());<br>                &#125;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;参数不匹配&quot;</span>);<br>            &#125;<br>        &#125;);<br>        map.put(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">13</span>), <span class="hljs-number">98</span>);<br>        map.put(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">15</span>), <span class="hljs-number">89</span>);<br>        map.put(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Mike&quot;</span>,<span class="hljs-number">21</span>), <span class="hljs-number">76</span>);<br>        map.put(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">9</span>), <span class="hljs-number">100</span>);<br>        Set set = map.entrySet();<br>        Iterator iterator = set.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            Map.Entry entry = (Map.Entry)iterator.next();<br>            System.out.println(entry.getKey() + <span class="hljs-string">&quot; &quot;</span> +entry.getValue());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="properties"><a class="markdownIt-Anchor" href="#properties">#</a> Properties</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/3 - 16:49</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesTest</span> </span>&#123;<br>    <span class="hljs-comment">//Properties：常用来处理配置文件，key和value都是String类型</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        FileInputStream fis;<br>        fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);<br>        properties.load(fis);<br>        String name = properties.getProperty(<span class="hljs-string">&quot;name&quot;</span>);<br>        String password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name + <span class="hljs-string">&quot;, password = &quot;</span> + password);<span class="hljs-comment">//name = Tom, password = abc123</span><br>        fis.close();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**********************</span><br><span class="hljs-comment">//以下是jdbc.properties文件的内容</span><br><span class="hljs-comment">name=Tom邓智超</span><br><span class="hljs-comment">password=abc123</span><br></code></pre></div></td></tr></table></figure><h3 id="collections工具类"><a class="markdownIt-Anchor" href="#collections工具类">#</a> Collections 工具类</h3><p>Collecitons 是一个操作 Set、List、Map 等集合的工具类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/3 - 20:29</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* Collections:操作Collection和Map的工具类</span><br><span class="hljs-comment">* 面试题：Collections和Collection的区别？</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollectionsTest</span> </span>&#123;<br>    <span class="hljs-comment">//常用方法</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * Collections类中提供了多个synchronizedXxx()方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发集合</span><br><span class="hljs-comment">        * 时的线程安全问题。如synchronizedCollection、synchronizedList、synchronizedMap等等。</span><br><span class="hljs-comment">        * 比如List list1 = synchronizedList(list)返回的就是线程安全的list</span><br><span class="hljs-comment">        *</span><br><span class="hljs-comment">        * reverse(List)：反转List中元素的顺序</span><br><span class="hljs-comment">        * shuffle(List)：使List的元素随机乱序</span><br><span class="hljs-comment">        * sort(List)：从小到大自然排序</span><br><span class="hljs-comment">        * sort(List, Comparator):定制排序</span><br><span class="hljs-comment">        * swap(List, i ,j):交换List中索引位置为i和j的元素</span><br><span class="hljs-comment">        * Object max(Collection)：自然排序最小值</span><br><span class="hljs-comment">        * Object max(Collection, Comparator)：定制排序最大值</span><br><span class="hljs-comment">        * Object min(Collection)：自然排序最小值</span><br><span class="hljs-comment">        * Object min(Collection, Comparator)：定制排序最小值</span><br><span class="hljs-comment">        * int frequency(Collection, Object)：返回出现次数</span><br><span class="hljs-comment">        * void copy(List dest, List src)：将src的内容复制到dest</span><br><span class="hljs-comment">        * boolean replaceAll(List list, Object oldValue, Object newVal)：将List中所有oldValue换成newValue</span><br><span class="hljs-comment">        *</span><br><span class="hljs-comment">        * */</span><br>        List list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-number">123</span>);<br>        list.add(<span class="hljs-number">523</span>);<br>        list.add(<span class="hljs-number">13</span>);<br>        list.add(<span class="hljs-number">153</span>);<br>        list.add(<span class="hljs-number">3</span>);<br>        list.add(<span class="hljs-number">17</span>);<br>        System.out.println(list);<span class="hljs-comment">//[123, 523, 13, 153, 3, 17]</span><br>        Collections.reverse(list);<br>        System.out.println(list);<span class="hljs-comment">//[17, 3, 153, 13, 523, 123]</span><br>        Collections.shuffle(list);<br>        System.out.println(list);;<span class="hljs-comment">//[3, 523, 17, 123, 13, 153]</span><br>        Collections.sort(list);<br>        System.out.println(list);<span class="hljs-comment">//[3, 13, 17, 123, 153, 523]</span><br>        Collections.swap(list, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        System.out.println(list);<span class="hljs-comment">//[13, 3, 17, 123, 153, 523]</span><br>        <span class="hljs-comment">//一眼就知道是做什么的就不一一举例了。。。。。</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//copy方法可能会出错，举例说明一下</span><br>        List list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-number">123</span>);<br>        list.add(<span class="hljs-number">523</span>);<br>        list.add(<span class="hljs-number">13</span>);<br>        list.add(<span class="hljs-number">153</span>);<br>        list.add(<span class="hljs-number">3</span>);<br>        list.add(<span class="hljs-number">17</span>);<br><span class="hljs-comment">//        List desc = new ArrayList();</span><br><span class="hljs-comment">//        Collections.copy(desc, list);//会报异常，desc的size比list小的就会报错</span><br>        List desc = Arrays.asList(<span class="hljs-keyword">new</span> Object[list.size()]);<span class="hljs-comment">//应该这样写</span><br>        Collections.copy(desc, list);<br>        System.out.println(desc);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="泛型"><a class="markdownIt-Anchor" href="#泛型">#</a> 泛型</h2><h3 id="用与不用泛型的对比"><a class="markdownIt-Anchor" href="#用与不用泛型的对比">#</a> 用与不用泛型的对比</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/4 - 17:17</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 泛型的使用</span><br><span class="hljs-comment">* 1、JDK5.0新增的特性</span><br><span class="hljs-comment">* 2、在集合中使用泛型：</span><br><span class="hljs-comment">*   总结：</span><br><span class="hljs-comment">*   ① 集合接口或集合类在JDK5.0时都修改为带泛型的结构</span><br><span class="hljs-comment">*   ② 在实例化集合类时，可以指明具体的泛型类型</span><br><span class="hljs-comment">*   ③ 指明完以后，在集合类或接口中凡是定义类或接口时，内部结构使用到泛型的位置，都指定为实例化时泛型的类型。</span><br><span class="hljs-comment">*      如：add(E e) ---&gt; 实例化后： add(Integer e)</span><br><span class="hljs-comment">*   ④ 注意点：泛型的类型必须是类，不能是基本数据类型，需要用到基本数据类型的地方，需要写成包装类</span><br><span class="hljs-comment">*   ⑤ 如果实例化时没有指明泛型的类型，默认类型为java.lang.Object</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericTest</span> </span>&#123;<br>    <span class="hljs-comment">//再集合中使用泛型之前的情况</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br>        <span class="hljs-comment">//需求：存放学生的成绩</span><br>        list.add(<span class="hljs-number">78</span>);<br>        list.add(<span class="hljs-number">76</span>);<br>        <span class="hljs-comment">//问题一：类型不安全</span><br><span class="hljs-comment">//        list.add(&quot;Tom&quot;);</span><br>        <span class="hljs-keyword">for</span> (Object score : list) &#123;<br>            <span class="hljs-comment">//问题二：强转时，可能出现ClassCastException</span><br>            <span class="hljs-keyword">int</span> stuScore = (<span class="hljs-keyword">int</span>)score;<br>            System.out.println(stuScore);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//使用泛型的情况</span><br>    <span class="hljs-comment">//使用泛型的时候，基本数据类型必须写成包装类的形式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//        ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();//不能写int</span><br>        <span class="hljs-comment">//JDK7新特性，类型推断】</span><br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<span class="hljs-comment">//不能写int</span><br>        list.add(<span class="hljs-number">123</span>);<br>        list.add(<span class="hljs-number">456</span>);<br>        <span class="hljs-comment">//编译时，会进行类型检查，保证数据的安全</span><br><span class="hljs-comment">//        list.add(&quot;Tom&quot;);//编译不通过</span><br>        <span class="hljs-keyword">for</span> (Integer score : list) &#123;<br>            <span class="hljs-comment">//避免了强转操作</span><br>            System.out.println(score);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//以HashMap举例</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>);<br>        map.put(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">34</span>);<br>        <span class="hljs-comment">//类型不符合要求</span><br><span class="hljs-comment">//        map.put(123, &quot;Tom&quot;);</span><br>        <span class="hljs-comment">//泛型的嵌套</span><br>        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; set = map.entrySet();<br>        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = set.iterator();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="自定义泛型"><a class="markdownIt-Anchor" href="#自定义泛型">#</a> 自定义泛型</h3><h4 id="泛型类-泛型接口"><a class="markdownIt-Anchor" href="#泛型类-泛型接口">#</a> 泛型类、泛型接口</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/4 - 20:05</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 1、如何自定义泛型结构：泛型类、泛型接口、泛型方法</span><br><span class="hljs-comment">* 2、关于自定义泛型类、泛型方法</span><br><span class="hljs-comment">*   &gt; 如果定义了泛型类，实例化没有指明类的泛型，则认位此泛型类型为Object类型</span><br><span class="hljs-comment">*   &gt; 建议实例化时指明类的泛型</span><br><span class="hljs-comment">*   &gt; 若子类在继承带泛型的父类时，指明了泛型类型，则子类不再是泛型类。在实例化时，不需要指明泛型</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    String name;<br>    <span class="hljs-keyword">int</span> orderId;<br>    <span class="hljs-comment">//类的内部结构可以使用类的泛型</span><br>    T orderT;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Order</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Order</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> orderId, T orderT)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.orderId = orderId;<br>        <span class="hljs-keyword">this</span>.orderT = orderT;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getOrderT</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> orderT;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setOrderT</span><span class="hljs-params">(T orderT)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.orderT = orderT;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubOrder</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Order</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<span class="hljs-comment">//未指明泛型类型，SubOrder还是泛型类</span><br>    E name;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubOrder1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Order</span>&lt;<span class="hljs-title">Integer</span>&gt;</span>&#123;<span class="hljs-comment">//指明了泛型类型，SubOrder1不再是泛型类</span><br><br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><h4 id="泛型方法"><a class="markdownIt-Anchor" href="#泛型方法">#</a> 泛型方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/4 - 21:11</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 自定义泛型方法</span><br><span class="hljs-comment">* 1、泛型方法可以出现在非泛型类中</span><br><span class="hljs-comment">* 2、泛型方法：在方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系</span><br><span class="hljs-comment">*    换句话说，泛型方法所属的类是不是泛型都没有关系</span><br><span class="hljs-comment">* 3、泛型方法可以声明为static，原因：泛型参数是在调用方法时确定的，并非在实例化类时确定</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericMethodTest</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    T name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(T name)</span></span>&#123;<span class="hljs-comment">//这不是泛型方法！！！！</span><br>        System.out.println(name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">copyFromArrayToList</span><span class="hljs-params">(E[] arr)</span></span>&#123;<span class="hljs-comment">//声明泛型方法：在返回类型前面加上&lt;&gt;</span><br>        ArrayList&lt;E&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (E e : arr) &#123;<br>            list.add(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">//测试泛型方法</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        GenericMethodTest&lt;String&gt; order = <span class="hljs-keyword">new</span> GenericMethodTest&lt;&gt;();<br>        Integer[] arr = <span class="hljs-keyword">new</span> Integer[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>        <span class="hljs-comment">//泛型方法在调用时，指明泛型参数的类型</span><br>        List&lt;Integer&gt; list = order.copyFromArrayToList(arr);<br>        System.out.println(list);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">copyFromArrayToList</span><span class="hljs-params">(E[] arr)</span></span>&#123;<span class="hljs-comment">//非泛型类也可以定义泛型方法，且可以声明为static</span><br>        ArrayList&lt;E&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (E e : arr) &#123;<br>            list.add(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="泛型在继承上的表现"><a class="markdownIt-Anchor" href="#泛型在继承上的表现">#</a> 泛型在继承上的表现</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/4 - 17:17</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 泛型的使用</span><br><span class="hljs-comment">* 1、JDK5.0新增的特性</span><br><span class="hljs-comment">* 2、在集合中使用泛型：</span><br><span class="hljs-comment">*   总结：</span><br><span class="hljs-comment">*   ① 集合接口或集合类在JDK5.0时都修改为带泛型的结构</span><br><span class="hljs-comment">*   ② 在实例化集合类时，可以指明具体的泛型类型</span><br><span class="hljs-comment">*   ③ 指明完以后，在集合类或接口中凡是定义类或接口时，内部结构使用到泛型的位置，都指定为实例化时泛型的类型。</span><br><span class="hljs-comment">*      如：add(E e) ---&gt; 实例化后： add(Integer e)</span><br><span class="hljs-comment">*   ④ 注意点：泛型的类型必须是类，不能是基本数据类型，需要用到基本数据类型的地方，需要写成包装类</span><br><span class="hljs-comment">*   ⑤ 如果实例化时没有指明泛型的类型，默认类型为java.lang.Object</span><br><span class="hljs-comment">* 3、如何自定义泛型结构：泛型类、泛型接口、泛型方法</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericTest</span> </span>&#123;<br>    <span class="hljs-comment">//再集合中使用泛型之前的情况</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br>        <span class="hljs-comment">//需求：存放学生的成绩</span><br>        list.add(<span class="hljs-number">78</span>);<br>        list.add(<span class="hljs-number">76</span>);<br>        <span class="hljs-comment">//问题一：类型不安全</span><br><span class="hljs-comment">//        list.add(&quot;Tom&quot;);</span><br>        <span class="hljs-keyword">for</span> (Object score : list) &#123;<br>            <span class="hljs-comment">//问题二：强转时，可能出现ClassCastException</span><br>            <span class="hljs-keyword">int</span> stuScore = (<span class="hljs-keyword">int</span>)score;<br>            System.out.println(stuScore);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//使用泛型的情况</span><br>    <span class="hljs-comment">//使用泛型的时候，基本数据类型必须写成包装类的形式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//        ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();//不能写int</span><br>        <span class="hljs-comment">//JDK7新特性，类型推断】</span><br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<span class="hljs-comment">//不能写int</span><br>        list.add(<span class="hljs-number">123</span>);<br>        list.add(<span class="hljs-number">456</span>);<br>        <span class="hljs-comment">//编译时，会进行类型检查，保证数据的安全</span><br><span class="hljs-comment">//        list.add(&quot;Tom&quot;);//编译不通过</span><br>        <span class="hljs-keyword">for</span> (Integer score : list) &#123;<br>            <span class="hljs-comment">//避免了强转操作</span><br>            System.out.println(score);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//以HashMap举例</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>);<br>        map.put(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">34</span>);<br>        <span class="hljs-comment">//类型不符合要求</span><br><span class="hljs-comment">//        map.put(123, &quot;Tom&quot;);</span><br>        <span class="hljs-comment">//泛型的嵌套</span><br>        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; set = map.entrySet();<br>        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = set.iterator();<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 泛型在继承方面的体现</span><br><span class="hljs-comment">    * 类A是类B的父类，G&lt;A&gt; 和G&lt;B&gt;不具备子父类关系，二者是并列关系，不能相互赋值</span><br><span class="hljs-comment">    * 类A是类B的父类，A&lt;G&gt; 和 B&lt;G&gt;具有子父类关系</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        Object obj = <span class="hljs-keyword">null</span>;<br>        String str = <span class="hljs-keyword">null</span>;<br>        obj = str;<br><br>        Object[] arr1 = <span class="hljs-keyword">null</span>;<br>        String[] arr2 = <span class="hljs-keyword">null</span>;<br>        arr1 = arr2;<br><br>        List&lt;Object&gt; list1 = <span class="hljs-keyword">null</span>;<br>        List&lt;String&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-comment">//此时list1和list2的类型不具有子父类关系，编译不通过</span><br><span class="hljs-comment">//        list1 = list2;//报错</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 原因：假设可以编译通过,则list1和list2指向同一个list对象，通过list1.add()可以添加非String类型的对象到list对象</span><br><span class="hljs-comment">        * */</span><br>        <br>        Date date = <span class="hljs-keyword">new</span> Date();<br><span class="hljs-comment">//        str = date;//这两个报错信息的原理其实是一样的</span><br>        <br>        show(list1);<br><span class="hljs-comment">//        show(list2);//报错，原理同上</span><br>        <br>        List&lt;String&gt; list3 = <span class="hljs-keyword">null</span>;<br>        ArrayList&lt;String&gt; list4 = <span class="hljs-keyword">null</span>;<br>        list3 = list4;<span class="hljs-comment">//可以赋值，类A是类B的父类，A&lt;G&gt; 和 B&lt;G&gt;具有子父类关系</span><br>        <br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(List&lt;Object&gt; list)</span></span>&#123;<br>        <br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="通配符的使用"><a class="markdownIt-Anchor" href="#通配符的使用">#</a> 通配符的使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 通配符的使用</span><br><span class="hljs-comment">        * 通配符： ?</span><br><span class="hljs-comment">        * 类A是类B的父类，G&lt;A&gt;和G&lt;B&gt;是并列关系，二者共同的父类是G&lt;?&gt;</span><br><span class="hljs-comment">        * 通配符的其他形式：</span><br><span class="hljs-comment">        *   ? extends A表示A及A的子类，G&lt;? extends A&gt;可以是G&lt;A&gt;和G&lt;B&gt;的父类，其中B是A的子类</span><br><span class="hljs-comment">        *   ? super A表示A及A的父类，G&lt;? extends A&gt;可以是G&lt;A&gt;和G&lt;B&gt;的父类，其中B是A的</span><br><span class="hljs-comment">        * */</span><br><br>        List&lt;Object&gt; list1 = <span class="hljs-keyword">null</span>;<br>        List&lt;String&gt; list2 = <span class="hljs-keyword">null</span>;<br>        List&lt;?&gt; list3 = <span class="hljs-keyword">null</span>;<br>        list3 = list1;<span class="hljs-comment">//可以赋值</span><br>        list3 = list2;<span class="hljs-comment">//可以赋值</span><br><br>        List&lt;String&gt; list4 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list4.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>        list3 = list4;<br>        <span class="hljs-comment">//添加：对于List&lt;?&gt;就不能向其内部添加数据，</span><br>        <span class="hljs-comment">//但是可以添加null</span><br><span class="hljs-comment">//        list3.add(&quot;DD&quot;);//报错，类型不匹配</span><br>        list3.add(<span class="hljs-keyword">null</span>);<span class="hljs-comment">//只能添加null</span><br>        <span class="hljs-comment">//获取(读取)：允许读取数据</span><br>        Object o = list3.get(<span class="hljs-number">0</span>);<span class="hljs-comment">//读出来的是Object类型</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(List&lt;?&gt; list)</span></span>&#123;<br>        Iterator&lt;?&gt; iterator = list.iterator();<br>        <span class="hljs-keyword">for</span> (Object o : list) &#123;<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h2 id="io流"><a class="markdownIt-Anchor" href="#io流">#</a> IO 流</h2><h3 id="file类的使用"><a class="markdownIt-Anchor" href="#file类的使用">#</a> File 类的使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/5 - 22:07</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* File类的使用</span><br><span class="hljs-comment">* 1、File类的一个对象，代表一个文件或一个文件目录（俗称：文件夹）</span><br><span class="hljs-comment">* 2、File类声明在java.io下</span><br><span class="hljs-comment">* 3、File类中涉及到关机文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法，并未涉及到写入或读取文件内容的操作，</span><br><span class="hljs-comment">*   如果需要读取或写入文件内容，必须使用IO流来完成</span><br><span class="hljs-comment">* 4、后续File类对象通常会作为参数传递到流的构造器中，指明读取或写入的“目标”</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 1、如何创建File类对象</span><br><span class="hljs-comment">    * 2、</span><br><span class="hljs-comment">    *   相对路径：相较于某个路径下，指明的路径</span><br><span class="hljs-comment">    *   绝对路径：包含盘符在内的文件或文件目录的路径</span><br><span class="hljs-comment">    * 3、路径分隔符和系统有关</span><br><span class="hljs-comment">    *   windows和dos系统中，是&#x27;\&#x27;</span><br><span class="hljs-comment">    *   Unix和URL中，是&#x27;/&#x27;</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//构造器一：File(String pathName)</span><br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>);<span class="hljs-comment">//表示在当前路径下的hello.txt文件</span><br>        File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;G:\\JAVA\\learn\\day23&quot;</span>);<br><span class="hljs-comment">//        File.separatorChar：如果不记得是&#x27;\&#x27;还是&#x27;/&#x27;，可以使用File.separatorChar</span><br>        System.out.println(file1);<br>        System.out.println(file2);<span class="hljs-comment">//尽管磁盘中没有这个文件/目录，也不会报错</span><br><br>        <span class="hljs-comment">//构造器二：File(String parent, String child)：在parent路径下新建child路径/文件</span><br>        File file3 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;G:\\JAVA\\learn\\day23&quot;</span>, <span class="hljs-string">&quot;JavaSenior&quot;</span>);<br>        System.out.println(file3);<span class="hljs-comment">//G:\JAVA\learn\day23\JavaSenior</span><br><br>        <span class="hljs-comment">//构造器三：File(File parent, String child)：类似于构造器二</span><br>        File file4 = <span class="hljs-keyword">new</span> File(file3, <span class="hljs-string">&quot;hello.txt&quot;</span>);<br>        System.out.println(file4);<span class="hljs-comment">//G:\JAVA\learn\day23\JavaSenior\hello.txt</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * File类常用方法</span><br><span class="hljs-comment">    * 1、public String getAbsolutePath()：获取绝对路径</span><br><span class="hljs-comment">    * 2、public String getPath()：获取路径</span><br><span class="hljs-comment">    * 3、public String getName()：获取名称</span><br><span class="hljs-comment">    * 4、public String getParent()：获取上层文件目录路径，若无，返回null</span><br><span class="hljs-comment">    * 5、public long length()：获取文件长度（即：字节数）。不能获取目录的长度</span><br><span class="hljs-comment">    * 6、public long lastModified()：获取最后一次的修改时间，毫秒值</span><br><span class="hljs-comment">    * 如下的两个方法适用于文件目录</span><br><span class="hljs-comment">    * 7、public String[] list()：获取指定目录下的所有文件或者文件目录的名称数组</span><br><span class="hljs-comment">    * 8、public File[] listFiles()：获取指定目录下的所有文件或者文件目录的File数组</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>        File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;G:\\JAVA\\learn\\day23\\JavaSenior\\hello.txt&quot;</span>);<br>        System.out.println(file1.getAbsolutePath());<span class="hljs-comment">//G:\JAVA\learn\day23\hello.txt</span><br>        System.out.println(file1.getPath());<span class="hljs-comment">//hello.txt</span><br>        System.out.println(file1.getName());<span class="hljs-comment">//hello.txt</span><br>        System.out.println(file1.getParent());<span class="hljs-comment">//null，以相对路径创建的file不能获取parent</span><br>        System.out.println(file1.length());<span class="hljs-comment">//0，因为文件不存在</span><br>        System.out.println(file1.lastModified());<span class="hljs-comment">//0。因为文件不存在</span><br><br>        System.out.println();<br><br>        System.out.println(file2.getAbsolutePath());<span class="hljs-comment">//G:\JAVA\learn\day23\JavaSenior\hello.txt</span><br>        System.out.println(file2.getPath());<span class="hljs-comment">//G:\JAVA\learn\day23\JavaSenior\hello.txt</span><br>        System.out.println(file2.getName());<span class="hljs-comment">//hello.txt</span><br>        System.out.println(file2.getParent());<span class="hljs-comment">//G:\JAVA\learn\day23\JavaSenior</span><br>        System.out.println(file2.length());<br>        System.out.println(file2.lastModified());<br><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;G:\\JAVA\\learn\\day23&quot;</span>);<br>        String[] list = file.list();<br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            <span class="hljs-comment">//day23.iml src test</span><br>            System.out.print(s + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>        File[] files = file.listFiles();<br>        <span class="hljs-keyword">for</span> (File file3 : files) &#123;<br>            <span class="hljs-comment">//G:\JAVA\learn\day23\day23.iml G:\JAVA\learn\day23\src G:\JAVA\learn\day23\test</span><br>            System.out.print(file3 + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * public boolean renameTo(File desc)：把文件重命名喂指定的文件路径</span><br><span class="hljs-comment">    * 比如：file1.renameTo(file2)</span><br><span class="hljs-comment">    *       要想保证操作成功：必须保证file1必须存在于硬盘中，且file2不能在硬盘中存在</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>        File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\hi.txt&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> renameTo = file1.renameTo(file2);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 判断相关</span><br><span class="hljs-comment">    * public boolean isDirectory()：是否是文件目录</span><br><span class="hljs-comment">    * public boolean isFile()：是否是文件</span><br><span class="hljs-comment">    * public boolean exists()：是否存在</span><br><span class="hljs-comment">    * public boolean canRead()：是否可读</span><br><span class="hljs-comment">    * public boolean canWrite()：是否可写</span><br><span class="hljs-comment">    * public boolean isHidden()：是否隐藏</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>        System.out.println(file.isFile());<span class="hljs-comment">//true</span><br>        System.out.println(file.isDirectory());<span class="hljs-comment">//false</span><br>        System.out.println(file.exists());<span class="hljs-comment">//true</span><br>        System.out.println(file.canRead());<span class="hljs-comment">//true,目录也是可读可写的</span><br>        System.out.println(file.canWrite());<span class="hljs-comment">//true</span><br>        System.out.println(file.isHidden());<span class="hljs-comment">//false</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 增删相关</span><br><span class="hljs-comment">    * public boolean createNewFile()：若文件不存在，则创建文件</span><br><span class="hljs-comment">    * public boolean mkdir()：创建目录，若目录存在或上级目录不存在，则不创建</span><br><span class="hljs-comment">    * public boolean mkdirs()：创建目录，若上级目录不存在，则一并创建</span><br><span class="hljs-comment">    * public boolean delete()：删除文件或文件夹，若要删除一个目录，必须保证该目录下没有别的文件和目录</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//文件的创建与删除</span><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello1.txt&quot;</span>);<br>        <span class="hljs-keyword">if</span>(!file.exists())&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                file.createNewFile();<br>                System.out.println(<span class="hljs-string">&quot;创建成功&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            file.delete();<br>            System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//目录的创建与删除</span><br>        <span class="hljs-comment">//父目录存在的情况下</span><br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;G:\\JAVA\\learn\\day23\\createDirectoryTest&quot;</span>);<br>        <span class="hljs-keyword">if</span>(!file1.exists())&#123;<br>            file1.mkdir();<br>            System.out.println(<span class="hljs-string">&quot;创建成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            file1.delete();<br>            System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//父目录不存在的情况下，使用mkdirs()</span><br>        File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;G:\\JAVA\\learn\\day23\\createDirectoryTest1\\test&quot;</span>);<br>        <span class="hljs-keyword">if</span>(!file2.exists())&#123;<br>            file2.mkdirs();<br>            System.out.println(<span class="hljs-string">&quot;创建成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            file2.delete();<br>            System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="流的体系结构"><a class="markdownIt-Anchor" href="#流的体系结构">#</a> 流的体系结构</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 一、流的分类</span><br><span class="hljs-comment">*   1、按照操作数据单位：字节流、字符流</span><br><span class="hljs-comment">*   2、按照数据的流向：输入流、输出流</span><br><span class="hljs-comment">*   3、流的角色：节点流、处理流</span><br><span class="hljs-comment">* 二、流的体系结构</span><br><span class="hljs-comment">*   抽象基类            节点流                     缓冲流（处理流中的一种）</span><br><span class="hljs-comment">*   InputStream        FileInputStream           BufferedInputStream</span><br><span class="hljs-comment">*   OutputStream       FileOutputStream          BufferedOutputStream</span><br><span class="hljs-comment">*   Reader             FileReader                BufferedReader</span><br><span class="hljs-comment">*   Writer             FileWriter                BufferedWriter</span><br><span class="hljs-comment">* */</span><br></code></pre></div></td></tr></table></figure><h3 id="filereader与filewriter"><a class="markdownIt-Anchor" href="#filereader与filewriter">#</a> FileReader 与 FileWriter</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileReaderWriterTest</span> </span>&#123;<span class="hljs-comment">//字符流不能用于处理图片等字节流文件</span><br>    <span class="hljs-comment">//FileReader的使用</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 将day23下的hello.txt文件内容读入程序中，并输出到控制台</span><br><span class="hljs-comment">        * 说明：</span><br><span class="hljs-comment">        *   &gt; 为了保证流资源一定可以执行关闭操作，需要使用try-catch-finally处理</span><br><span class="hljs-comment">        *   &gt; 读入的文件一定要存在，否则就会报FileNotFoundException</span><br><span class="hljs-comment">        * */</span><br>        <span class="hljs-comment">//1、实例化File类的对象，指明要操作的文件</span><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>);<span class="hljs-comment">//相较于当前Module</span><br>        FileReader fileReader = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//2、提供具体的流</span><br>            fileReader = <span class="hljs-keyword">new</span> FileReader(file);<br>            <span class="hljs-comment">//3、数据的读入</span><br>            <span class="hljs-comment">//int read()：返回读入的一个字符，如果达到文件末尾，返回-1</span><br>            <span class="hljs-keyword">int</span> data;<br>            <span class="hljs-keyword">while</span>((data = fileReader.read()) != -<span class="hljs-number">1</span>)&#123;<br>                System.out.print((<span class="hljs-keyword">char</span>)data);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//4、流的关闭操作</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(fileReader != <span class="hljs-keyword">null</span>)<br>                    fileReader.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//使用read()重载的方法</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>        FileReader fileReader = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileReader = <span class="hljs-keyword">new</span> FileReader(file);<br>            <span class="hljs-keyword">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">5</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-comment">//read(char[] cbuf)：返回每次读入cbuf数组中的字符的个数，如果达到文件末尾，返回-1</span><br>            <span class="hljs-keyword">while</span>((len = fileReader.read(cbuf)) != -<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//难点，需要特别注意len的作用</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>                    System.out.print(cbuf[i]);<br>                &#125;<br><span class="hljs-comment">//                for (char c : cbuf) &#123;//错误的写法</span><br><span class="hljs-comment">//                    System.out.print(c);</span><br><span class="hljs-comment">//                &#125;</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (fileReader != <span class="hljs-keyword">null</span>)<br>                    fileReader.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//向写入写入数据</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 1、若要写入的文件不存在，则会自动创建文件</span><br><span class="hljs-comment">    * 2、若要写入的文件存在，则取决于FileWriter构造器中的append参数取值，取值为true，则为追加方式，为false则为覆盖方式</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//1、提供File类的对象，指明写出到的文件</span><br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello1.txt&quot;</span>);<br>        FileWriter fileWriter = <span class="hljs-keyword">null</span>;<span class="hljs-comment">//以覆盖方式写入文件</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//2、提供FileWriter类的对象，用于数据的写出</span><br>            fileWriter = <span class="hljs-keyword">new</span> FileWriter(file, <span class="hljs-keyword">false</span>);<br>            <span class="hljs-comment">//3、写出的操作</span><br>            fileWriter.write(<span class="hljs-string">&quot;I have a dream \n&quot;</span>);<br>            fileWriter.write(<span class="hljs-string">&quot;You need to have a dream \n&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (fileWriter != <span class="hljs-keyword">null</span>)<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fileWriter.close();<span class="hljs-comment">//4、流资源的关闭</span><br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="fileinputstream与fileoutputstream"><a class="markdownIt-Anchor" href="#fileinputstream与fileoutputstream">#</a> FileInputStream 与 FileOutputStream</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/6 - 20:52</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* FileInputStream与FileOutputStream的使用</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileInputOutputStreamTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 字节流不能用来读取单个字符长度超过1字节的文本文件</span><br><span class="hljs-comment">    * 结论：对于文本文件（.txt\.java\.cpp），使用字符流处理；</span><br><span class="hljs-comment">    * 对于非文本文件(.jpg\.mp3\.avi\.doc\.ppt等)，使用字节流处理</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>        FileInputStream fileInputStream = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(file);<br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">5</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-keyword">while</span>((len = fileInputStream.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>                String s = <span class="hljs-keyword">new</span> String(buffer, <span class="hljs-number">0</span> ,len);<br>                System.out.print(s);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(fileInputStream != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fileInputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 实现一张图片的复制操作</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//建File</span><br>        File src = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;花.jpg&quot;</span>);<br>        File dest = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;花_copy.jpg&quot;</span>);<br>        <span class="hljs-comment">//建流类</span><br>        FileInputStream fileInputStream = <span class="hljs-keyword">null</span>;<br>        FileOutputStream fileOutputStream = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(src);<br>            fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(dest);<br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">5</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-comment">//复制的过程</span><br>            <span class="hljs-keyword">while</span>((len = fileInputStream.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>                fileOutputStream.write(buffer, <span class="hljs-number">0</span> ,len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭</span><br>            <span class="hljs-keyword">if</span>(fileInputStream != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fileInputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(fileOutputStream != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fileOutputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="缓冲流"><a class="markdownIt-Anchor" href="#缓冲流">#</a> 缓冲流</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/6 - 21:43</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 缓冲流的使用</span><br><span class="hljs-comment">* 1、缓冲流：BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter</span><br><span class="hljs-comment">* 2、作用：提升流读取、写入的速度</span><br><span class="hljs-comment">* 3、处理流，就是”套接“在已有的流的基础上</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferedTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 实现非文本文件的复制</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//造文件</span><br>        File src = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;花.jpg&quot;</span>);<br>        File dest = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;花_copy2.jpg&quot;</span>);<br>        BufferedInputStream bufferedInputStream = <span class="hljs-keyword">null</span>;<br>        BufferedOutputStream bufferedOutputStream = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//造流：处理流作用在节点流之上</span><br>            bufferedInputStream = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(src));<br>            bufferedOutputStream = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(dest));<br>            <span class="hljs-comment">//复制的细节</span><br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">10</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-keyword">while</span>((len = bufferedInputStream.read(buffer))!= -<span class="hljs-number">1</span>)&#123;<br>                bufferedOutputStream.write(buffer, <span class="hljs-number">0</span>, len);<br><span class="hljs-comment">//                bufferedOutputStream.flush();//刷新缓冲区</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭流</span><br>            <span class="hljs-comment">// 原则上，四个都要关，先关闭处理流，再关闭节点流</span><br>            <span class="hljs-comment">// 特性：在关闭外层流的同时，内层流也会自动关闭，所以只关闭处理流即可</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(bufferedInputStream != <span class="hljs-keyword">null</span>)<br>                    bufferedInputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (bufferedOutputStream != <span class="hljs-keyword">null</span>) &#123;<br>                    bufferedOutputStream.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//BufferedReader和BufferedWriter的使用</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        BufferedReader bufferedReader = <span class="hljs-keyword">null</span>;<br>        BufferedWriter bufferedWriter = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//造对象</span><br>            bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>)));<br>            bufferedWriter = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello_copy.txt&quot;</span>)));<br>            <span class="hljs-keyword">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">5</span>];<br>            <span class="hljs-comment">//方法一</span><br>            <span class="hljs-comment">/*int len;</span><br><span class="hljs-comment">            //读写操作</span><br><span class="hljs-comment">            while((len = bufferedReader.read(cbuf))!= -1)&#123;</span><br><span class="hljs-comment">                bufferedWriter.write(cbuf,0,len);</span><br><span class="hljs-comment">    //            bufferedWriter.flush();</span><br><span class="hljs-comment">            &#125;*/</span><br>            <span class="hljs-comment">//方法二：使用String</span><br>            String str;<br>            <span class="hljs-keyword">while</span>((str = bufferedReader.readLine()) != <span class="hljs-keyword">null</span>)&#123;<span class="hljs-comment">//这个方法读不出来换行符</span><br>                bufferedWriter.write(str + <span class="hljs-string">&#x27;\n&#x27;</span>);<span class="hljs-comment">//手动添加换行符</span><br><span class="hljs-comment">//                bufferedWriter.newLine();//添加换行符，和手动添加&#x27;\n&#x27;效果相同</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭资源</span><br>            <span class="hljs-keyword">if</span> (bufferedReader != <span class="hljs-keyword">null</span>)<br>                <span class="hljs-keyword">try</span> &#123;<br>                    bufferedReader.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            <span class="hljs-keyword">if</span> (bufferedWriter != <span class="hljs-keyword">null</span>)<br>                <span class="hljs-keyword">try</span> &#123;<br>                    bufferedWriter.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="转换流"><a class="markdownIt-Anchor" href="#转换流">#</a> 转换流</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/8 - 1:23</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 处理流二：转换流</span><br><span class="hljs-comment">* 1、属于字符流</span><br><span class="hljs-comment">* 2、包括</span><br><span class="hljs-comment">*   &gt; InputStreamReader：将一个字节的输入流转换为字符的输入流</span><br><span class="hljs-comment">*   &gt; OutputStreamWriter：将一个字符的输出流转换为字节的输出流</span><br><span class="hljs-comment">* 3、作用：提供字节流与字符流之间的转换</span><br><span class="hljs-comment">* 4、解码：字节、字节数组 ---&gt; 字符数组、字符串</span><br><span class="hljs-comment">*    编码：字符数组、字符串---&gt; 字节、字节数组</span><br><span class="hljs-comment">* 5、字符集：</span><br><span class="hljs-comment">*   &gt; ASCII：美国标准信息交换码，用一个字节的7位表示</span><br><span class="hljs-comment">*   &gt; ISO8859-1:拉丁码表，欧洲码表，用一个字节的8位表示</span><br><span class="hljs-comment">*   &gt; GB2312：中国的中文编码表，最多两个字节编码所有字符</span><br><span class="hljs-comment">*   &gt; GBK：中国的中文编码表升级，融合了更多的中文文字符号，最多两个字节编码</span><br><span class="hljs-comment">*   &gt; Unicode：国际标准码，融合了目前人类使用的所有字符，为每一个字符分配唯一的字符码，每个字符使用2字节       </span><br><span class="hljs-comment">*   &gt; UTF-8：变长的编码方式，可用1-4个字节来表示一个字符</span><br><span class="hljs-comment">*   &gt; ANSI：系统默认字符集，英文系统是ISO8859-1,中文操作系统是GBK</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChangeStreamTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * InputStreamReader的使用：实现字节输入流到字符流的转换</span><br><span class="hljs-comment">    * 应该使用try-catch-finally处理异常，这里懒得写了，直接throws IOException</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>));<br><span class="hljs-comment">//        InputStreamReader isr = new InputStreamReader(fis);//使用系统默认字符集</span><br>        <span class="hljs-comment">//参数2指明了字符集，根据文件的编码字符集选择解码字符集</span><br>        InputStreamReader isr1 = <span class="hljs-keyword">new</span> InputStreamReader(fis, <span class="hljs-string">&quot;UTF-8&quot;</span>);<span class="hljs-comment">//使用系统默认字符集</span><br>        <span class="hljs-keyword">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">20</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = isr1.read(cbuf))!= -<span class="hljs-number">1</span>)&#123;<br>            String str = <span class="hljs-keyword">new</span> String(cbuf, <span class="hljs-number">0</span>, len);<br>            System.out.print(str);<br>        &#125;<br>        isr1.close();<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * InputStreamReader和OutputStreamWriter的综合使用：读取utf-8的文件，并以gbk编码存储</span><br><span class="hljs-comment">    * 应该使用try-catch-finally处理异常，这里懒得写了，直接throws IOException</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        InputStreamReader isr = <span class="hljs-keyword">new</span> InputStreamReader(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>)));<br>        <span class="hljs-comment">//以GBK字符集写入</span><br>        OutputStreamWriter osw = <span class="hljs-keyword">new</span> OutputStreamWriter(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span>       File(<span class="hljs-string">&quot;hello_gbk.txt&quot;</span>)),<span class="hljs-string">&quot;GBK&quot;</span>);<br>        <span class="hljs-keyword">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">20</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = isr.read(cbuf)) != -<span class="hljs-number">1</span>)&#123;<br>            String s = <span class="hljs-keyword">new</span> String(cbuf, <span class="hljs-number">0</span>, len);<br>            osw.write(s);<br>            System.out.print(s);<br>        &#125;<br>        isr.close();<br>        osw.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="标准输入输出流"><a class="markdownIt-Anchor" href="#标准输入输出流">#</a> 标准输入输出流</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.BufferedInputStream;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/8 - 23:32</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 其它流的使用</span><br><span class="hljs-comment">* 1、标准输入、输出流</span><br><span class="hljs-comment">* 2、打印流</span><br><span class="hljs-comment">* 3、数据流</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OtherStreamTest</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 1、标准的输入、输出流</span><br><span class="hljs-comment">    *   System.in：标准的输入流，默认从键盘输入</span><br><span class="hljs-comment">    *   System.out:标准的输出流，默认从控制台输出</span><br><span class="hljs-comment">    * 2、System类的setIn(InputStream)和setOut(PrintStream)可以使输入输出重定向</span><br><span class="hljs-comment">    * 3、练习：从键盘输入字符串直到e或者exit时退出，将输入的字符串转成大写输出</span><br><span class="hljs-comment">    *   &gt; 方法一：使用Scanner实现，调用next()返回字符串</span><br><span class="hljs-comment">    *   &gt; 方法二：使用System.in实现：System.in ---&gt; 转换流 ---&gt; BufferedInputStream中的readLine()</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//@Test中不能进行输入输出操作，所以放在main中</span><br>        BufferedReader br = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            InputStreamReader isr = <span class="hljs-keyword">new</span> InputStreamReader(System.in);<br>            br = <span class="hljs-keyword">new</span> BufferedReader(isr);<br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;请输入字符串&quot;</span>);<br>                String data = br.readLine();<br>                <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;e&quot;</span>.equalsIgnoreCase(data) || <span class="hljs-string">&quot;exit&quot;</span>.equalsIgnoreCase(data))&#123;<br>                    System.exit(<span class="hljs-number">0</span>);<br>                    System.out.println(<span class="hljs-string">&quot;程序结束&quot;</span>);<br>                &#125;<br>                String upperCase = data.toUpperCase();<br>                System.out.println(upperCase);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (br != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    br.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="打印流"><a class="markdownIt-Anchor" href="#打印流">#</a> 打印流</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/9 - 16:32</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 打印流的使用</span><br><span class="hljs-comment">* PrintStream和PrintWriter</span><br><span class="hljs-comment">* 1、提供了一系列重载的print()和printLine()方法</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintStreamTest</span> </span>&#123;<br>    <span class="hljs-comment">//练习：重定向控制台的输出到test.txt</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//创建打印流，autoFlush设置为true（写入换行符或字节&#x27;\n&#x27;都会刷新缓冲区）</span><br>        PrintStream ps = <span class="hljs-keyword">new</span> PrintStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;test.txt&quot;</span>), <span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">if</span>(ps != <span class="hljs-keyword">null</span>)&#123;<br>            System.setOut(ps);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">255</span>; i++) &#123;<span class="hljs-comment">//如果没有重定向，则是输出到控制台</span><br>            System.out.print((<span class="hljs-keyword">char</span>)i);<span class="hljs-comment">//调用重载的print(char)方法，如果不强转，调用的是print(int)</span><br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">50</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.println();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="数据流"><a class="markdownIt-Anchor" href="#数据流">#</a> 数据流</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/9 - 16:54</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 数据流的使用：用于读取或写出基本数据类型的变量或字符串</span><br><span class="hljs-comment">* 1、DataInputStream和DataOutputStream</span><br><span class="hljs-comment">* 2、DataInputStream中的方法</span><br><span class="hljs-comment">*   &gt; readBoolean       &gt; readByte</span><br><span class="hljs-comment">*   &gt; readChar          &gt; readFloat</span><br><span class="hljs-comment">*   &gt; readDouble        &gt; readShort</span><br><span class="hljs-comment">*   &gt; readLong          &gt; readInt</span><br><span class="hljs-comment">*   &gt; readUTF           &gt; readFully(byte[] b)</span><br><span class="hljs-comment">* 3、DataOutputStream中的方法</span><br><span class="hljs-comment">*   把DataInputStream中的方法的read改成write即可</span><br><span class="hljs-comment">* 4、注意点:</span><br><span class="hljs-comment">* 5、缺点：无法存取对象，解决方法：使用对象流</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataStreamTest</span> </span>&#123;<br>    <span class="hljs-comment">//将内存中的字符串、基本数据类型的变量写出到文件data.txt中</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//造流类</span><br>        DataOutputStream dataOutputStream = <span class="hljs-keyword">new</span> DataOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;data.txt&quot;</span>)));<br>        <span class="hljs-comment">//写数据</span><br>        dataOutputStream.writeUTF(<span class="hljs-string">&quot;数据输出流测试&quot;</span>);<br>        dataOutputStream.flush();<span class="hljs-comment">//刷新缓冲区，立刻写入</span><br>        dataOutputStream.writeInt(<span class="hljs-number">123</span>);<br>        dataOutputStream.writeChar(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        <span class="hljs-comment">//关闭</span><br>        dataOutputStream.close();<br>    &#125;<br><br>    <span class="hljs-comment">//将文件中存储的基本数据类型变量和字符串读取到内存中</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        <span class="hljs-comment">//造流类</span><br>        DataInputStream dataInputStream = <span class="hljs-keyword">new</span> DataInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;data.txt&quot;</span>)));<br>        <span class="hljs-comment">//读取:必须按照写入的顺序读取</span><br>        System.out.println(dataInputStream.readUTF());<br>        System.out.println(dataInputStream.readInt());<br>        System.out.println(dataInputStream.readChar());<br>        dataInputStream.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="对象流"><a class="markdownIt-Anchor" href="#对象流">#</a> 对象流</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/10 - 0:45</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 对象流的使用</span><br><span class="hljs-comment">* 1、ObjectInputStream和ObjectOutputStream</span><br><span class="hljs-comment">* 2、用于存储和读取基本数据类型诗句或对象的处理流。可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来</span><br><span class="hljs-comment">* 3、自定义类实现序列化和反序列化的操作：需要实现Serializable接口，提供public static final long serialVersionUID</span><br><span class="hljs-comment">*   &gt; 凡是标识为Serializable的类，就表示该类是可序列化的</span><br><span class="hljs-comment">*   &gt; Serializable接口下没有具体要实现的方法</span><br><span class="hljs-comment">*   &gt; 如果不提供serialVersionUID，java运行环境会根据类的内部细节自动生成一个，但是若当前的类发生了变化，serialVersionUID</span><br><span class="hljs-comment">*     可能发生变化，导致在反序列化的时候出问题。所以建议显示声明</span><br><span class="hljs-comment">*   &gt; 除了被序列化的类声明为serializable，其内部所有属性也必须是可序列化的（基本数据类型默认都是可视化的）</span><br><span class="hljs-comment">*   &gt; 声明为static或transient的属性不能被序列化</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectStreamTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 序列化过程：将内存中的java对象保存到磁盘中或通过网络传输出去</span><br><span class="hljs-comment">    * 使用ObjectOutputStream</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ObjectOutputStream oos = <span class="hljs-keyword">null</span>;<span class="hljs-comment">//序列化过程</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//造对象</span><br>            oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;Object.dat&quot;</span>));<br>            <span class="hljs-comment">//写数据</span><br>            oos.writeObject(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;我爱浙江&quot;</span>));<br>            oos.writeObject(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>));<span class="hljs-comment">//自定义类的序列化</span><br>            oos.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (oos != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//关闭</span><br>                    oos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 反序列化：将磁盘文件中的对象还原为内存中的一个java对象</span><br><span class="hljs-comment">    * 使用ObjectInputStream来实现</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        ObjectInputStream ois = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//造对象</span><br>            ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;Object.dat&quot;</span>));<br>            <span class="hljs-comment">//读数据，写的时候是什么顺序，读的时候就是什么顺序。</span><br>            <span class="hljs-comment">//开发中，一般都是同一类数据</span><br>            String str = (String)ois.readObject();<br>            Person person = (Person)ois.readObject();<span class="hljs-comment">//自定义对象的反序列化</span><br>            System.out.println(str);<br>            System.out.println(person);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(ois != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//关闭流</span><br>                    ois.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/10 - 1:19</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 自定义类实现序列化和反序列化的操作：需要实现Serializable接口</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">453897528957842985L</span>;<br>    String name;<br>    <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        Person person = (Person) o;<br>        <span class="hljs-keyword">return</span> age == person.age &amp;&amp; Objects.equals(name, person.name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, age);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="随机存取文件流"><a class="markdownIt-Anchor" href="#随机存取文件流">#</a> 随机存取文件流</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.RandomAccessFile;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/10 - 2:33</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* RandomAccessFile类的使用</span><br><span class="hljs-comment">* 1、既可以作为输入流，又可以作为输出流（建议造两个对象，一个表示输入，一个表示输出）</span><br><span class="hljs-comment">* 2、mode</span><br><span class="hljs-comment">*   &gt; r 以只读的方式打开</span><br><span class="hljs-comment">*   &gt; rw 可以读也可以写</span><br><span class="hljs-comment">*   &gt; rws 可读写，同步文件内容和元数据的更新</span><br><span class="hljs-comment">*   &gt; rwd 可读写，同步文件内容的更新</span><br><span class="hljs-comment">* 3、作为输出流时，如果写入的文件不存在，则会自动创建</span><br><span class="hljs-comment">*    若写入的文件存在，则默认从头开始覆盖</span><br><span class="hljs-comment">* 4、seek(int pos)方法可以定位指针位置</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomAccessFileTest</span></span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        RandomAccessFile randomAccessFile = <span class="hljs-keyword">null</span>;<br>        RandomAccessFile randomAccessFile1 = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            randomAccessFile = <span class="hljs-keyword">new</span> RandomAccessFile(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;花.jpg&quot;</span>), <span class="hljs-string">&quot;r&quot;</span>);<br>            randomAccessFile1 = <span class="hljs-keyword">new</span> RandomAccessFile(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;花_randomCopy.jpg&quot;</span>), <span class="hljs-string">&quot;rw&quot;</span>);<br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-keyword">while</span> ((len = randomAccessFile.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                randomAccessFile1.write(buffer, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (randomAccessFile != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    randomAccessFile.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (randomAccessFile1 != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    randomAccessFile1.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        RandomAccessFile rw = <span class="hljs-keyword">new</span> RandomAccessFile(<span class="hljs-string">&quot;randomTest.txt&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>);<br>        rw.seek(<span class="hljs-number">3</span>);<span class="hljs-comment">//将指针调到角标为3的位置，角标是从0开始的</span><br>        <span class="hljs-comment">//其实write执行的就是覆盖的操作</span><br><span class="hljs-comment">//        rw.write(&quot;xyz&quot;.getBytes());//因为参数是byte[]，这里执行的是覆盖</span><br>        <span class="hljs-comment">//下面实现插入（而不是覆盖），先复制后面部分，然后执行写入，最后把复制好的再写入到文件后面</span><br>        <span class="hljs-comment">//1、保存指针3后面的数据到StringBuilder中</span><br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">20</span>];<br>        <span class="hljs-comment">//使用StringBuilder，长度设置为文件长度</span><br>        StringBuilder builder = <span class="hljs-keyword">new</span> StringBuilder((<span class="hljs-keyword">int</span>)<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;randomTest.txt&quot;</span>).length());<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = rw.read(buffer))!= -<span class="hljs-number">1</span>)&#123;<br>            builder.append(<span class="hljs-keyword">new</span> String(buffer, <span class="hljs-number">0</span> , len));<br>        &#125;<br>        <span class="hljs-comment">//读取完后，指针指向文件末尾，所以要重新定位</span><br>        rw.seek(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//写入要插入的字符串</span><br>        rw.write(<span class="hljs-string">&quot;xyz&quot;</span>.getBytes());<br>        <span class="hljs-comment">//写入刚才复制的字符串</span><br>        rw.write(builder.toString().getBytes());<span class="hljs-comment">//StringBuilder没有getBytes()方法，所以先转换成String再调用toString()</span><br>        <span class="hljs-comment">//关闭流</span><br>        rw.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="nio2中path-paths-files类的使用"><a class="markdownIt-Anchor" href="#nio2中path-paths-files类的使用">#</a> NIO.2 中 Path、Paths、Files 类的使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/10 - 14:51</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* Path、Paths、Files类的使用</span><br><span class="hljs-comment">* 1、Path类用于替换File类</span><br><span class="hljs-comment">* 2、Paths.get(String path)用于获取Path类的实例</span><br><span class="hljs-comment">* 3、Files是工具类，有一些操作文件目录的方法</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NIO2Test</span> </span>&#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="网络编程"><a class="markdownIt-Anchor" href="#网络编程">#</a> 网络编程</h2><h3 id="inetaddress类的使用"><a class="markdownIt-Anchor" href="#inetaddress类的使用">#</a> InetAddress 类的使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/10 - 15:29</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 一、网络编程中有两个主要的问题：</span><br><span class="hljs-comment">*   1、如何准确地定位网络上一台或多态主机；定位主机上的特定的应用</span><br><span class="hljs-comment">*   2、找到主机后如何可靠高效地进行数据传输</span><br><span class="hljs-comment">* 二、网络编程中的两个要素：</span><br><span class="hljs-comment">*   1、对应问题一：IP和端口号</span><br><span class="hljs-comment">*   2、对应问题二：提供网络通信协议：TCP/IP参考模型</span><br><span class="hljs-comment">* 三、通信要素一：IP和端口号</span><br><span class="hljs-comment">*   1、IP：唯一标识Internet上的计算机（通信实体）</span><br><span class="hljs-comment">*   2、在Java中使用InetAddress类代表IP</span><br><span class="hljs-comment">*   3、IP分类：IPv4和IPv6；万维网和局域网</span><br><span class="hljs-comment">*   4、本地回路地址：127.0.0.1，对应着localhost</span><br><span class="hljs-comment">*   6、如何实例化InetAddress：两个方法①getByName() ②getLocalHost</span><br><span class="hljs-comment">*       两个常用方法：①getHostName() ②getHostAddress()</span><br><span class="hljs-comment">*   7、端口号：标实正在计算机上运行的进程，要求不同的进程有不同的端口号</span><br><span class="hljs-comment">*      &gt; 系统端口号：0~1023，应用端口号：1023~49151，私有端口号：49152~65535</span><br><span class="hljs-comment">*   8、端口号与IP地址的组合得出一个网络套接字：Socket</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InetAddressTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            InetAddress inet1 = InetAddress.getByName(<span class="hljs-string">&quot;192.168.10.1&quot;</span>);<span class="hljs-comment">//通过IP地址</span><br>            System.out.println(inet1);<br>            InetAddress inet2 = InetAddress.getByName(<span class="hljs-string">&quot;www.baidu.com&quot;</span>);<span class="hljs-comment">//通过域名</span><br>            System.out.println(inet2);<br>            <span class="hljs-comment">//getHostName()：获取主机名</span><br>            System.out.println(inet2.getHostName());<span class="hljs-comment">//www.baidu.com</span><br>            <span class="hljs-comment">//getHostAddress()：获取IP地址</span><br>            System.out.println(inet2.getHostAddress());<span class="hljs-comment">//183.232.231.172</span><br>            InetAddress inet3 = InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<span class="hljs-comment">//本机地址</span><br>            System.out.println(inet3);<br>            InetAddress localHost = InetAddress.getLocalHost();<span class="hljs-comment">//获取本机</span><br>            System.out.println(localHost);<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="建立tcp连接"><a class="markdownIt-Anchor" href="#建立tcp连接">#</a> 建立 TCP 连接</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/13 - 23:31</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 实现TCP的网络编程</span><br><span class="hljs-comment">* 例子1：客户端发送信息给服务端，服务端将数据显示在控制台上</span><br><span class="hljs-comment">* 例子2：客户端发送文件给服务端，服务端把文件存储在本地</span><br><span class="hljs-comment">* 例子3：客户端发送文件给服务端，服务端把文件存储在本地，并返回“发送成功给客户端”</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TCPTest</span> </span>&#123;<br>    <span class="hljs-comment">//  例子1：客户端发送信息给服务端，服务端将数据显示在控制台上</span><br>    <span class="hljs-comment">//客户端</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">client</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<span class="hljs-comment">//记得用try-catch-finally,懒得写了。。。。</span><br>        <span class="hljs-comment">//1、创建Socket对象，指明服务器端的ip和端口号</span><br>        InetAddress inet = InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<span class="hljs-comment">//这里填写的是服务端的IP</span><br>        Socket socket = <span class="hljs-keyword">new</span> Socket(inet, <span class="hljs-number">64323</span>);<br>        <span class="hljs-comment">//2、获取一个输出流，用于输出数据</span><br>        OutputStream outputStream = socket.getOutputStream();<br>        <span class="hljs-comment">//3、写出数据，相当于向客户端发送数据</span><br>        outputStream.write(<span class="hljs-string">&quot;你好，我是客户端&quot;</span>.getBytes());<br>        <span class="hljs-comment">//4、关闭资源</span><br>        outputStream.close();<span class="hljs-comment">//记得关闭资源</span><br>        socket.close();<span class="hljs-comment">//记得关闭资源</span><br>    &#125;<br><br>    <span class="hljs-comment">//服务端</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">server</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<span class="hljs-comment">//记得用try-catch-finally,懒得写了。。。。</span><br>        <span class="hljs-comment">//1、创建服务器端的ServerSocket，指明自己的端口号</span><br>        ServerSocket serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">64323</span>);<span class="hljs-comment">//此处的端口号客户机连接的端口号</span><br>        <span class="hljs-comment">//2、调用accept()方法，表示接受来自客户端的socket</span><br>        Socket socket = serverSocket.accept();<span class="hljs-comment">//表示接受客户端连接</span><br>        <span class="hljs-comment">//3、获取输入流</span><br>        InputStream inputStream = socket.getInputStream();<br><span class="hljs-comment">//        byte[] buffer = new byte[20];</span><br><span class="hljs-comment">//        int len;</span><br><span class="hljs-comment">//        while((len = inputStream.read(buffer)) != -1)&#123;</span><br><span class="hljs-comment">//            String s = new String(buffer, 0, len);</span><br><span class="hljs-comment">//            System.out.print(s);</span><br><span class="hljs-comment">//        &#125; //用于处理中文字符会出错</span><br>        <span class="hljs-comment">//4、读取输入流的数据</span><br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">10</span>];<br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = inputStream.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//这个流类的write方法会写入自身内部的byte数组</span><br>            <span class="hljs-comment">//全部读取完后再toString()这样可以避免出现字节流读取中文字符的乱码问题</span><br>            baos.write(buffer, <span class="hljs-number">0</span> , len);<br>        &#125;<br>        <span class="hljs-comment">//这里调用baos的toString()方法，实际上是调用baos内部的数组的toString()方法</span><br>        System.out.println(baos.toString());<br>        <span class="hljs-comment">//5、所有资源都需要关闭</span><br>        baos.close();<br>        inputStream.close();<br>        socket.close();<br>        serverSocket.close();<br>    &#125;<br><br><br>    <span class="hljs-comment">//例子2：客户端发送文件给服务端，服务端把文件存储在本地</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">client1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<span class="hljs-comment">//记得用try-catch-finally</span><br>        Socket socket = <span class="hljs-keyword">new</span> Socket(InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<span class="hljs-number">9090</span>);<br>        OutputStream outputStream = socket.getOutputStream();<br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;flower.jpg&quot;</span>);<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = fis.read(buffer))!= -<span class="hljs-number">1</span>)&#123;<br>            outputStream.write(buffer, <span class="hljs-number">0</span> , len);<br>        &#125;<br>        fis.close();<br>        outputStream.close();<br>        socket.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">server1</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException</span>&#123;<span class="hljs-comment">//记得try-catch-finally</span><br>        ServerSocket serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">9090</span>);<br>        Socket socket = serverSocket.accept();<br>        InputStream inputStream = socket.getInputStream();<br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;flower_copy.jpg&quot;</span>);<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = inputStream.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            fos.write(buffer, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        fos.close();<br>        inputStream.close();<br>        socket.close();<br>        serverSocket.close();<br>    &#125;<br><br><span class="hljs-comment">//例子3：客户端发送文件给服务端，服务端把文件存储在本地，并返回“发送成功给客户端”</span><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">client2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<span class="hljs-comment">//记得用try-catch-finally</span><br>        Socket socket = <span class="hljs-keyword">new</span> Socket(InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<span class="hljs-number">9090</span>);<br>        OutputStream outputStream = socket.getOutputStream();<br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;flower.jpg&quot;</span>);<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = fis.read(buffer))!= -<span class="hljs-number">1</span>)&#123;<br>            outputStream.write(buffer, <span class="hljs-number">0</span> , len);<br>        &#125;<br>        <span class="hljs-comment">//关闭数据的输出</span><br>        socket.shutdownOutput();<span class="hljs-comment">//********************没有此语句的话，会报错******************</span><br>        InputStream inputStream = socket.getInputStream();<br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">5</span>];<br>        <span class="hljs-keyword">while</span>((len = inputStream.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            baos.write(buffer, <span class="hljs-number">0</span> ,len);<br>        &#125;<br>        System.out.println(baos.toString());<br>        inputStream.close();<br>        baos.close();<br>        fis.close();<br>        outputStream.close();<br>        socket.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">server2</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException</span>&#123;<span class="hljs-comment">//记得try-catch-finally</span><br>        ServerSocket serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">9090</span>);<br>        Socket socket = serverSocket.accept();<br>        InputStream inputStream = socket.getInputStream();<br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;flower_copy2.jpg&quot;</span>);<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = inputStream.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            fos.write(buffer, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        <span class="hljs-comment">//服务器向客户机发送数据</span><br>        OutputStream outputStream = socket.getOutputStream();<br>        outputStream.write(<span class="hljs-string">&quot;照片已收到&quot;</span>.getBytes());<br>        outputStream.close();<br>        fos.close();<br>        inputStream.close();<br>        socket.close();<br>        serverSocket.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="udp连接"><a class="markdownIt-Anchor" href="#udp连接">#</a> UDP 连接</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/15 - 14:40</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* UDP协议的例子</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UDPTest</span> </span>&#123;<br>    <span class="hljs-comment">//发送端</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sender</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        DatagramSocket socket = <span class="hljs-keyword">new</span> DatagramSocket();<span class="hljs-comment">//不使用参数</span><br>        String str = <span class="hljs-string">&quot;我是UDP方式发送的数据&quot;</span>;<br>        <span class="hljs-keyword">byte</span>[] data = str.getBytes();<br>        InetAddress inet = InetAddress.getLocalHost();<br>        <span class="hljs-comment">//将需要发送的数据封装在datagramPacket</span><br>        DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(data, <span class="hljs-number">0</span> , data.length, inet, <span class="hljs-number">9090</span>);<br>        socket.send(packet);<br>        socket.close();<br>    &#125;<br><br>    <span class="hljs-comment">//接收端</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiver</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        DatagramSocket socket = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">9090</span>);<span class="hljs-comment">//指明端口号</span><br>        <span class="hljs-keyword">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">100</span>];<br>        DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(data, <span class="hljs-number">0</span>, data.length);<br>        socket.receive(packet);<br>        <span class="hljs-comment">//packet中的getLength()方法可以返回长度</span><br>        <span class="hljs-comment">//getData()返回的其实就是byte[]</span><br>        System.out.println(<span class="hljs-keyword">new</span> String(packet.getData(), <span class="hljs-number">0</span>, packet.getLength()));<br>        socket.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="url网络编程"><a class="markdownIt-Anchor" href="#url网络编程">#</a> URL 网络编程</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLConnection;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/15 - 14:59</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* URL网络编程</span><br><span class="hljs-comment">* 1、URL：统一资源定位符，对应着互联网的某一资源地址</span><br><span class="hljs-comment">* 2、格式：</span><br><span class="hljs-comment">*   http://localhost:8080/examples/flower?uername=Tom&amp;id=1001</span><br><span class="hljs-comment">*   协议      主机名  端口号      资源地址        参数列表</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">URLTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://localhost:8080/examples/flower?uername=Tom&amp;id=1001&quot;</span>);<br>            <span class="hljs-comment">//获取协议</span><br>            System.out.println(url.getProtocol());<span class="hljs-comment">//http</span><br>            <span class="hljs-comment">//获取主机名</span><br>            System.out.println(url.getHost());<span class="hljs-comment">//localhost</span><br>            <span class="hljs-comment">//获取端口号</span><br>            System.out.println(url.getPort());<span class="hljs-comment">//8080</span><br>            <span class="hljs-comment">//获取文件路径</span><br>            System.out.println(url.getPath());<span class="hljs-comment">//    /examples/flower</span><br>            <span class="hljs-comment">//获取URL文件名</span><br>            System.out.println(url.getFile());<span class="hljs-comment">//    /examples/flower?uername=Tom&amp;id=1001</span><br>            <span class="hljs-comment">//获取URL的查询名（即参数）</span><br>            System.out.println(url.getQuery());<span class="hljs-comment">//uername=Tom&amp;id=1001</span><br>        &#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//通过URL下载文件</span><br>    <span class="hljs-comment">//因为未配置tomcat，此代码暂时无法运行</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">URLtest1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<span class="hljs-comment">//记得用try-catch-finally</span><br>        URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://localhost:8080/examples/flower.jpg?uername=Tom&amp;id=1001&quot;</span>);<br>        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();<span class="hljs-comment">//得到一个URL连接</span><br>        urlConnection.connect();<span class="hljs-comment">//连接</span><br>        InputStream is = urlConnection.getInputStream();<span class="hljs-comment">//获取输入流</span><br>        FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;flower_copy_3&quot;</span>);<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = is.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            fileOutputStream.write(buffer, <span class="hljs-number">0</span> ,len);<br>        &#125;<br>        <span class="hljs-comment">//关闭资源</span><br>        fileOutputStream.close();<br>        is.close();<br>        urlConnection.disconnect();<span class="hljs-comment">//断开连接</span><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="反射"><a class="markdownIt-Anchor" href="#反射">#</a> 反射</h2><h3 id="反射能做什么"><a class="markdownIt-Anchor" href="#反射能做什么">#</a> 反射能做什么</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/16 - 1:47</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1、反射机制与面向对象中的封装性是不是矛盾？如何看待两个技术？</span><br><span class="hljs-comment"> *  &gt; 不矛盾。（面试的时候必须这么说hhh）</span><br><span class="hljs-comment"> *  &gt; 封装性解决的是建议使用和不建议使用的问题，反射解决的是能不能调用的问题</span><br><span class="hljs-comment"> * 2、通过直接new的方式或反射的方式都可以调用公共的结构，开发中用哪个？</span><br><span class="hljs-comment"> *  &gt; 建议：直接new的方式</span><br><span class="hljs-comment"> *  &gt; 什么时候使用反射：编译的时候不能确定需要造什么类的对象</span><br><span class="hljs-comment"> * 3、关于java.lang.Class类的理解</span><br><span class="hljs-comment"> *  &gt; 类的加载过程：</span><br><span class="hljs-comment"> *      程序在经过javac.exe命令后，会生成一个或多个字节码文件(.class)，接着我们使用java.exe命令对某个字节码文件</span><br><span class="hljs-comment"> *      解释运行，相当于将某个字节码文件加载到内存中，此过程就称为类的加载。加载到内存中的类称为运行时类，就作为Class</span><br><span class="hljs-comment"> *      的一个实例。换句话说，Class的实例就对应着一个运行时类</span><br><span class="hljs-comment"> *  &gt; 哪些类型可以有Class对象？</span><br><span class="hljs-comment"> *      类，数组，接口，枚举，注解，基本数据类型，void</span><br><span class="hljs-comment"> *      注意:对于数组，只要数组的类型和维度一致，那么Class就是相同的。比如 int[] a = new int[10]; int[] b = new int[100]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectionTest</span> </span>&#123;<br>    <span class="hljs-comment">//反射之前，对于Person的操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//1、创建Person类的对象</span><br>        Person person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>);<br>        <span class="hljs-comment">//2、通过对象，调用其内部的属性、方法</span><br>        person.age = <span class="hljs-number">10</span>;<br>        System.out.println(person.toString());<br>        person.show();<br>        <span class="hljs-comment">//在Person类外部，不可以通过Person类对象调用其内部私有结构</span><br>        <span class="hljs-comment">//比如：name、showNation()以及私有构造器</span><br>    &#125;<br><br>    <span class="hljs-comment">//有了反射之后，对于Person的操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//1、通过反射，创建类的对象</span><br>        Class&lt;Person&gt; personClass = Person.class;<br>        Constructor&lt;Person&gt; constructor = personClass.getConstructor(String.class, <span class="hljs-keyword">int</span>.class);<br>        Person person = constructor.newInstance(<span class="hljs-string">&quot;Ton&quot;</span>, <span class="hljs-number">12</span>);<br>        System.out.println(person.toString());<br>        <span class="hljs-comment">//2、通过反射，调用对象指定的属性和方法</span><br>        <span class="hljs-comment">//调用属性</span><br>        Field age = personClass.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>        age.set(person, <span class="hljs-number">10</span>);<br>        System.out.println(person);<br>        <span class="hljs-comment">//调用方法</span><br>        Method show = personClass.getDeclaredMethod(<span class="hljs-string">&quot;show&quot;</span>);<br>        show.invoke(person);<br>        <span class="hljs-comment">//3、通过反射，调用类的私有结构，如私有属性、私有方法、私有构造器</span><br>        <span class="hljs-comment">//调用私有构造器</span><br>        Constructor&lt;Person&gt; declaredConstructor = personClass.getDeclaredConstructor(String.class);<br>        declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        Person person1 = declaredConstructor.newInstance(<span class="hljs-string">&quot;Jerry&quot;</span>);<br>        System.out.println(person1);<br>        <span class="hljs-comment">//调用私有属性</span><br>        Field name = personClass.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        name.setAccessible(<span class="hljs-keyword">true</span>);<br>        name.set(person1, <span class="hljs-string">&quot;Mike&quot;</span>);<br>        System.out.println(person1);<br>        <span class="hljs-comment">//调用私有方法</span><br>        Method showNation = personClass.getDeclaredMethod(<span class="hljs-string">&quot;showNation&quot;</span>, String.class);<br>        showNation.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//相当于String nation = person1.showNation(&quot;中国&quot;)</span><br>        String nation = (String) showNation.invoke(person1, <span class="hljs-string">&quot;中国&quot;</span>);<br>    &#125;<br><br><span class="hljs-comment">//    注意:对于数组，只要数组的类型和维度一致，那么Class就是相同的</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>];<br>        <span class="hljs-keyword">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>        System.out.println(a.getClass() == b.getClass());<span class="hljs-comment">//true</span><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="获取class实例的四种方式"><a class="markdownIt-Anchor" href="#获取class实例的四种方式">#</a> 获取 Class 实例的四种方式</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/16 - 2:44</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 获取Class实例的四种方式</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ToGetClass</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-comment">//方式一：类名.class</span><br>        Class&lt;Person&gt; personClass1 = Person.class;<br>        System.out.println(personClass1);<span class="hljs-comment">//class Person</span><br>        <span class="hljs-comment">//方式二：通过运行时类的对象</span><br>        Person person = <span class="hljs-keyword">new</span> Person();<br>        Class&lt;? extends Person&gt; personClass2 = person.getClass();<br>        <span class="hljs-comment">//方式三：调用Class的静态方法：forName(String classPath)，classPath需要带上包名</span><br>        Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;Person&quot;</span>);<br>        <span class="hljs-comment">//以下两行代码说明：加载到内存中的运行时类，会缓存一段时间，在此时间内，我们可以通过不同的方式来获取此运行时类</span><br>        System.out.println(personClass1 == personClass2);<span class="hljs-comment">//true</span><br>        System.out.println(personClass1 == clazz);<span class="hljs-comment">//true</span><br>        <span class="hljs-comment">//方式四：使用类的加载器ClassLoader,所在类名.class.getClassLoader</span><br>        ClassLoader classLoader = ToGetClass.class.getClassLoader();<br>        Class&lt;?&gt; clazz1 = classLoader.loadClass(<span class="hljs-string">&quot;Person&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="类加载器"><a class="markdownIt-Anchor" href="#类加载器">#</a> 类加载器</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/16 - 17:11</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 了解类的加载器</span><br><span class="hljs-comment">* 1、引导类加载器：加载Java核心库，该加载器无法直接获取</span><br><span class="hljs-comment">* 2、扩展类加载器：加载jre/lib/ext里面的jar包</span><br><span class="hljs-comment">* 3、系统类加载器：加载自己写的类，是最常用的加载器</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoaderTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//对于自定义类，使用系统类加载器进行加载</span><br>        ClassLoader classLoader = ClassLoaderTest.class.getClassLoader();<br>        System.out.println(classLoader);<span class="hljs-comment">//sun.misc.Launcher$AppClassLoader@18b4aac2，是系统类加载器</span><br>        <span class="hljs-comment">//调用系统加载器的getParent()，获取扩展类加载器</span><br>        System.out.println(classLoader.getParent());<span class="hljs-comment">//sun.misc.Launcher$ExtClassLoader@2ff4acd0，是扩展类加载器</span><br>        <span class="hljs-comment">//调用扩展类加载器的getParent()，无法获取引导类加载器</span><br>        <span class="hljs-comment">//引导类加载器无法直接获取，无法加载自定义类</span><br>        System.out.println(classLoader.getParent().getParent());<span class="hljs-comment">//null，因为引导类加载器无法加载</span><br>        <span class="hljs-comment">//String是核心类，由引导类加载器加载，所以无法获取</span><br>        ClassLoader classLoader1 = String.class.getClassLoader();<br>        System.out.println(classLoader1);<span class="hljs-comment">//null</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 使用ClassLoader加载配置文件</span><br><span class="hljs-comment">    * 注意方式一和方式二的文件默认位置</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-comment">//此时的文件默认在当前的module下</span><br>        <span class="hljs-comment">//读取配置文件的方向一：</span><br><span class="hljs-comment">//        FileInputStream fis = new FileInputStream(&quot;jdbc.properties&quot;);</span><br><span class="hljs-comment">//        properties.load(fis);</span><br>        <span class="hljs-comment">//方法二：</span><br>        ClassLoader classLoader = ClassLoaderTest.class.getClassLoader();<br>        <span class="hljs-comment">//此时的文件默认在当前module的src下</span><br>        InputStream is = classLoader.getResourceAsStream(<span class="hljs-string">&quot;jdbc1.properties&quot;</span>);<br>        properties.load(is);<br>        String user = properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        String password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        System.out.println(user);<br>        System.out.println(password);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="创建运行时类的对象"><a class="markdownIt-Anchor" href="#创建运行时类的对象">#</a> 创建运行时类的对象</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> java.util.Random;<span class="hljs-comment">/** * <span class="hljs-doctag">@author</span> DzcGood * <span class="hljs-doctag">@date</span> 2021/10/16 - 18:51 */</span><span class="hljs-comment">/** 通过反射创建运行时类的对象* */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewInstanceTest</span> </span>&#123;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<span class="hljs-comment">//记得用try-catch-finally        Class&lt;Person&gt; personClass = Person.class;        /*        * newInstance()：调用此方法，创建运行时类的对象。不鼓励使用。内部调用了Person的空参构造器        * 要想此方法正常地创建运行时类的对象，要求：        * 1、运行时类必须提供空参的构造器        * 2、空参的构造器的访问权限得够，通常设置为public        * 在JavaBean中，要求提供一个public的空参构造器。原因“        * 1、便于通过反射创建运行时类的对象        * 2、便于子类继承此运行时类时，默认调用super()空时，保证父类有此构造器        * */        Person person = personClass.newInstance();        System.out.println(person);    &#125;    //体会反射的动态性    @Test    public void test2() throws Exception&#123;        for (int i=0;i &lt; 100; i++) &#123;            int j = new Random().nextInt(3);//0,1,2            String classPath = &quot;&quot;;            switch (j)&#123;                case 0:                    classPath = &quot;java.util.Date&quot;;                    break;                case 1:                    classPath = &quot;java.lang.Object&quot;;                    break;                case 2:                    classPath = &quot;Person&quot;;                    break;            &#125;            System.out.println(getInstance(classPath));        &#125;    &#125;    /*    * 创建一个指定类的对象    * classPath：指定类的全类名    * */    public Object getInstance(String classPath) throws Exception&#123;        Class&lt;?&gt; aClass = Class.forName(classPath);        return aClass.newInstance();    &#125;&#125;</span><br></code></pre></div></td></tr></table></figure><h3 id="获取运行时类的完整结构"><a class="markdownIt-Anchor" href="#获取运行时类的完整结构">#</a> 获取运行时类的完整结构</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> src1.Person;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Annotation;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/16 - 19:43</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 获取运行时类的所有结构</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetAllElementsTest</span> </span>&#123;<br>    <span class="hljs-comment">//获取属性</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        Class&lt;Person&gt; personClass = Person.class;<br>        <span class="hljs-comment">//获取属性结构</span><br>        <span class="hljs-comment">//getFields()：获取当前运行时类及其所有父类中声明为public的属性</span><br>        Field[] fields = personClass.getFields();<span class="hljs-comment">//只能获取权限为public的属性</span><br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            System.out.println(field);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;/////////////////////////////////////&quot;</span>);<br>        <span class="hljs-comment">//getDeclaredFields()：获取当前运行时类中声明的所有属性（不包含父类）</span><br>        Field[] declaredFields = personClass.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field declaredField : declaredFields) &#123;<br>            System.out.println(declaredField);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//权限修饰符，数据类型，变量名</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Class&lt;Person&gt; personClass = Person.class;<br>        <span class="hljs-comment">//getDeclaredFields()：获取当前运行时类中声明的所有属性（不包含父类）</span><br>        Field[] declaredFields = personClass.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field declaredField : declaredFields) &#123;<br>            <span class="hljs-comment">//1、权限修饰符，public对应1，private是2,protected是4，default是0</span><br>            <span class="hljs-keyword">int</span> modifiers = declaredField.getModifiers();<br>            System.out.print(Modifier.toString(modifiers) + <span class="hljs-string">&quot;\t&quot;</span>);<span class="hljs-comment">//可以转换为字符串</span><br>            <span class="hljs-comment">//2、数据类型</span><br>            Class&lt;?&gt; type = declaredField.getType();<br>            System.out.print(type.getName() + <span class="hljs-string">&quot;\t&quot;</span>);<br>            <span class="hljs-comment">//3、变量名</span><br>            String name = declaredField.getName();<br>            System.out.println(name);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">//获取方法</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        Class&lt;Person&gt; personClass = Person.class;<br>        <span class="hljs-comment">//getMethods()：获取该运行类及其父类所有声明为public的方法</span><br>        Method[] methods = personClass.getMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            System.out.println(method);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;////////////////////////////////&quot;</span>);<br>        <span class="hljs-comment">//getDeclaredMethods()：获取当前类声明的所有方法（不包括父类）</span><br>        Method[] declaredMethods = personClass.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method declaredMethod : declaredMethods) &#123;<br>            System.out.println(declaredMethod);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    @Xxxx</span><br><span class="hljs-comment">    权限修饰符 返回值类型 方法名(参数类型1 形参名1, ...) throws XxxException</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        Class&lt;Person&gt; personClass = Person.class;<br>        Method[] declaredMethods = personClass.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method declaredMethod : declaredMethods) &#123;<br>            <span class="hljs-comment">//1、获取注解（只能获取Retention.RUNTIME的注解）</span><br>            Annotation[] annotations = declaredMethod.getAnnotations();<br>            <span class="hljs-keyword">for</span> (Annotation annotation : annotations) &#123;<br>                System.out.println(annotation);<br>            &#125;<br>            <span class="hljs-comment">//2、权限修饰符</span><br>            <span class="hljs-keyword">int</span> modifiers = declaredMethod.getModifiers();<br>            System.out.print(Modifier.toString(modifiers) + <span class="hljs-string">&quot;\t&quot;</span>);<br>            <span class="hljs-comment">//3、返回值</span><br>            System.out.print(declaredMethod.getReturnType().getName() + <span class="hljs-string">&quot;\t&quot;</span>);<br>            <span class="hljs-comment">//4、方法名</span><br>            System.out.print(declaredMethod.getName());<br>            <span class="hljs-comment">//5、形参列表</span><br>            System.out.print(<span class="hljs-string">&quot;( &quot;</span>);<br>            Class&lt;?&gt;[] parameterTypes = declaredMethod.getParameterTypes();<br>            <span class="hljs-keyword">if</span>(!(parameterTypes == <span class="hljs-keyword">null</span> || parameterTypes.length == <span class="hljs-number">0</span>))&#123;<br>                <span class="hljs-comment">//表示有参数</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; parameterTypes.length; i++)&#123;<br>                    System.out.print(parameterTypes[i].getName() + <span class="hljs-string">&quot; args_&quot;</span> + i);<br>                    <span class="hljs-keyword">if</span>(i &lt; parameterTypes.length -<span class="hljs-number">1</span>) System.out.print(<span class="hljs-string">&quot;, &quot;</span>);<br>                &#125;<br>            &#125;<br>            System.out.print(<span class="hljs-string">&quot; )&quot;</span>);<br>            <span class="hljs-comment">//6、抛出的异常</span><br>            Class&lt;?&gt;[] exceptionTypes = declaredMethod.getExceptionTypes();<br>            <span class="hljs-keyword">if</span>(!(exceptionTypes == <span class="hljs-keyword">null</span> || exceptionTypes.length == <span class="hljs-number">0</span>))&#123;<br>                <span class="hljs-comment">//有抛出异常</span><br>                System.out.print(<span class="hljs-string">&quot;throws &quot;</span>);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; exceptionTypes.length; i++) &#123;<br>                    System.out.print(exceptionTypes[i].getName());<br>                    <span class="hljs-keyword">if</span>(i != exceptionTypes.length -<span class="hljs-number">1</span>)&#123;<br>                        System.out.print(<span class="hljs-string">&quot;, &quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取构造器结构</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span>&#123;<br>        Class&lt;Person&gt; personClass = Person.class;<br>        <span class="hljs-comment">//getConstructors()：获取当前运行时类中声明为public的构造器（不包含父类）</span><br>        Constructor&lt;?&gt;[] constructors = personClass.getConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;<br>            System.out.println(constructor);<br>        &#125;<br>        <span class="hljs-comment">//getDeclaredConstructors()：获取当前运行时类中声明的所有构造器（不包含父类）</span><br>        Constructor&lt;?&gt;[] declaredConstructors = personClass.getDeclaredConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;<br>            System.out.println(declaredConstructor);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 获取运行时类的父类</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span></span>&#123;<br>        Class&lt;Person&gt; personClass = Person.class;<br>        Class&lt;? <span class="hljs-keyword">super</span> Person&gt; superclass = personClass.getSuperclass();<br>        System.out.println(superclass);<span class="hljs-comment">//class src1.Creature</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 获取运行时类的带泛型的父类</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test7</span><span class="hljs-params">()</span></span>&#123;<br>        Class&lt;Person&gt; personClass = Person.class;<br>        Type genericSuperclass = personClass.getGenericSuperclass();<br>        System.out.println(genericSuperclass);<span class="hljs-comment">//src1.Creature&lt;java.lang.String&gt;</span><br>    &#125;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 获取运行时类的带泛型的父类的泛型</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test8</span><span class="hljs-params">()</span></span>&#123;<br>        Class&lt;Person&gt; personClass = Person.class;<br>        Type genericSuperclass = personClass.getGenericSuperclass();<br>        <span class="hljs-comment">//强转</span><br>        ParameterizedType parameterizedType = (ParameterizedType)genericSuperclass;<br>        <span class="hljs-comment">//获取泛型类型</span><br>        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();<br>        System.out.println(actualTypeArguments[<span class="hljs-number">0</span>]);<span class="hljs-comment">//class java.lang.String</span><br>        System.out.println(actualTypeArguments[<span class="hljs-number">0</span>].getTypeName());<span class="hljs-comment">//java.lang.String</span><br>        System.out.println(((Class)(actualTypeArguments[<span class="hljs-number">0</span>])).getName());<span class="hljs-comment">//java.lang.String</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 获取运行时类的接口</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test9</span><span class="hljs-params">()</span></span>&#123;<br>        Class&lt;Person&gt; personClass = Person.class;<br>        <span class="hljs-comment">//返回当前运行时类的接口（不包括父类）</span><br>        Class&lt;?&gt;[] interfaces = personClass.getInterfaces();<br>        <span class="hljs-keyword">for</span> (Class&lt;?&gt; anInterface : interfaces) &#123;<br>            System.out.println(anInterface);<br>        &#125;<br>        <span class="hljs-comment">//获取运行时类父类的接口</span><br>        Class&lt;?&gt;[] interfaces1 = personClass.getSuperclass().getInterfaces();<br>        <span class="hljs-keyword">for</span> (Class&lt;?&gt; aClass : interfaces1) &#123;<br>            System.out.println(aClass);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 获取运行时类所在的包</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test10</span><span class="hljs-params">()</span></span>&#123;<br>        Class&lt;Person&gt; personClass = Person.class;<br>        Package aPackage = personClass.getPackage();<br>        System.out.println(aPackage);<span class="hljs-comment">//package src1</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 获取运行时类声明的注解</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test11</span><span class="hljs-params">()</span></span>&#123;<br>        Class&lt;Person&gt; personClass = Person.class;<br>        Annotation[] annotations = personClass.getAnnotations();<br>        <span class="hljs-keyword">for</span> (Annotation annotation : annotations) &#123;<br>            System.out.print(annotation + <span class="hljs-string">&quot;\t&quot;</span>);<span class="hljs-comment">//@src1.MyAnnotation(value=[hi])</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="调用运行时类的指定结构"><a class="markdownIt-Anchor" href="#调用运行时类的指定结构">#</a> 调用运行时类的指定结构</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> src1.Person;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/18 - 8:39</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 调用运行时类中指定的结构：属性、方法、构造器</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectionTest1</span> </span>&#123;<br>    <span class="hljs-comment">//属性</span><br>    <span class="hljs-comment">//不理想，只能获取public</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testField</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        Class&lt;Person&gt; personClass = Person.class;<br>        <span class="hljs-comment">//创建运行时类的对象</span><br>        Person person = personClass.newInstance();<br>        <span class="hljs-comment">//获取指定的属性：要求获取的属性声明为public</span><br>        Field id = personClass.getField(<span class="hljs-string">&quot;id&quot;</span>);<br>        <span class="hljs-comment">//设置当前属性的值</span><br>        <span class="hljs-comment">//set()：参数1：指明设置哪个对象的属性，参数2：将此属性值设置为多少</span><br>        id.set(person, <span class="hljs-number">10</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 获取当前对象属性值</span><br><span class="hljs-comment">        * get()：参数1：获取哪个对象的当前属性值</span><br><span class="hljs-comment">        * */</span><br>        <span class="hljs-keyword">int</span> i = (<span class="hljs-keyword">int</span>)id.get(person);<br>        System.out.println(i);<span class="hljs-comment">//10</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 获取属性的方法2，可以获取所有权限的属性。 开发中使用这种</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testField1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<span class="hljs-comment">//</span><br>        Class&lt;Person&gt; personClass = Person.class;<br>        Person person = personClass.newInstance();<br>        <span class="hljs-comment">//获取属性</span><br>        Field name = personClass.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-comment">//将accessible权限设置为true,保证当前属性是可访问的</span><br>        name.setAccessible(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//对于private属性，默认是false，不可访问</span><br>        <span class="hljs-comment">//设置属性</span><br>        name.set(person, <span class="hljs-string">&quot;Tom&quot;</span>);<br>        <span class="hljs-comment">//获取属性</span><br>        System.out.println(name.get(person));<span class="hljs-comment">//Tom</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        Class&lt;Person&gt; personClass = Person.class;<br>        Person person = personClass.newInstance();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 1、获取指定的某个方法</span><br><span class="hljs-comment">        *   &gt; 参数1：方法名称</span><br><span class="hljs-comment">        *   &gt; 参数2：要获取的方法的形参列表</span><br><span class="hljs-comment">        * */</span><br>        Method showInterest = personClass.getDeclaredMethod(<span class="hljs-string">&quot;showInterest&quot;</span>, String.class, <span class="hljs-keyword">int</span>.class);<br>        <span class="hljs-comment">//保证当前方法是可访问的</span><br>        showInterest.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//方法调用，invoke()：参数1：调用者。 参数2：实参列表</span><br>        String nation = (String)showInterest.invoke(person, <span class="hljs-string">&quot;China&quot;</span>, <span class="hljs-number">10</span>);<span class="hljs-comment">// String showInterest()</span><br>        System.out.println(nation);<br>        <span class="hljs-comment">//////////////////////调用静态方法///////////////////////////////</span><br>        Method showDesc = personClass.getDeclaredMethod(<span class="hljs-string">&quot;showDesc&quot;</span>);<br>        showDesc.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object returnVal = showDesc.invoke(Person.class);<span class="hljs-comment">//静态方法，调用者是当前类</span><br>        showDesc.invoke(<span class="hljs-keyword">null</span>);<span class="hljs-comment">//静态方法，调用者写成null也可以</span><br>        System.out.println(returnVal);<span class="hljs-comment">//因为返回值是void，所以returnVal是null</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 调用运行时类中指定的构造器</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testConstructor</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        Class&lt;Person&gt; personClass = Person.class;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * getDeclaredConstructor()参数1：构造器的形参列表</span><br><span class="hljs-comment">        * */</span><br>        Constructor&lt;Person&gt; constructor = personClass.getDeclaredConstructor(String.class, <span class="hljs-keyword">int</span>.class);<br>        <span class="hljs-comment">//保证构造器是可访问的</span><br>        constructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//创建运行时类的对象</span><br>        Person tom = constructor.newInstance(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="关于class的理解"><a class="markdownIt-Anchor" href="#关于class的理解">#</a> 关于 Class 的理解</h3><blockquote><p>程序经过 javac.exe 命令后，会生成一个或多个字节码文件 (.class 结尾)。接着我们使用 java.exe 命令对某个字节码文件进行解释运行，相当于将某个字节码文件加载到内存中。此过程就成为类的加载。加载到内存中的类，我们就成为内存中的类，此运行时类，就作为 Class 类的一个实例。</p></blockquote><blockquote><p>新建运行时类的对象时，Object obj = clazz.newInstance () 有如下要求：</p><ul><li>必须有空参的构造器</li><li>权限修饰符的权限要够，通常设置成 public</li></ul></blockquote><h3 id="反射的应用动态代理"><a class="markdownIt-Anchor" href="#反射的应用动态代理">#</a> 反射的应用：动态代理</h3><h4 id="静态代理"><a class="markdownIt-Anchor" href="#静态代理">#</a> 静态代理</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/18 - 19:19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 静态代理示例：被代理类和代理类在编译期就已经确定下来了</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticProxyTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建被代理类的对象</span><br>        NikeClothFactory nike = <span class="hljs-keyword">new</span> NikeClothFactory();<br>        <span class="hljs-comment">//创建代理类的对象</span><br>        ProxyClothFactory proxy = <span class="hljs-keyword">new</span> ProxyClothFactory(nike);<br>        <span class="hljs-comment">//调用代理类的方法</span><br>        proxy.produceCloth();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ClothFactory</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">produceCloth</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//代理类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyClothFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ClothFactory</span></span>&#123;<br>    <span class="hljs-keyword">private</span> ClothFactory factory;<span class="hljs-comment">//用被代理类的对象进行实例化</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyClothFactory</span><span class="hljs-params">(ClothFactory factory)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.factory = factory;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">produceCloth</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;代理工厂准备一些工作&quot;</span>);<br>        factory.produceCloth();<br>        System.out.println(<span class="hljs-string">&quot;代理工厂做后续工作&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NikeClothFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ClothFactory</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">produceCloth</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Nike工厂生产一批运动服&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="动态代理"><a class="markdownIt-Anchor" href="#动态代理">#</a> 动态代理</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/18 - 19:26</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 动态代理的示例</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SuperMan superMan = <span class="hljs-keyword">new</span> SuperMan();<br>        <span class="hljs-comment">//proxyInstance：代理类的对象</span><br>        Human proxyInstance = (Human)ProxyFactory.getProxyInstance(superMan);<br>        <span class="hljs-comment">//通过代理类对象调用方法时，会自动调用被代理类中同名的方法</span><br>        System.out.println(proxyInstance.getBelief());<br>        proxyInstance.eat(<span class="hljs-string">&quot;麻辣烫&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Human</span></span>&#123;<br>    <span class="hljs-function">String <span class="hljs-title">getBelief</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">(String food)</span></span>;<br>&#125;<br><br><span class="hljs-comment">//被代理类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SuperMan</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Human</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBelief</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I believe I can fly&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">(String food)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我喜欢吃&quot;</span> + food);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 要想实现动态代理，需要解决的问题？</span><br><span class="hljs-comment">* 1、如何根据加载到内存中的被代理类，动态地创建一个代理类及其对象？</span><br><span class="hljs-comment">* 2、当通过代理类的对象调用方法时，如何动态地调用被代理类中的同名方法？</span><br><span class="hljs-comment">* */</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyFactory</span></span>&#123;<br><br>    <span class="hljs-comment">//调用此方法，返回一个代理类的对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">getProxyInstance</span><span class="hljs-params">(Object obj)</span></span>&#123;<span class="hljs-comment">//obj：被代理类的对象</span><br>        MyInvocationHandler handler = <span class="hljs-keyword">new</span> MyInvocationHandler();<br>        handler.bind(obj);<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), handler);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span></span>&#123;<br>    <span class="hljs-keyword">private</span> Object obj;<span class="hljs-comment">//赋值时，需要使用被代理类对象进行赋值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bind</span><span class="hljs-params">(Object obj)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.obj = obj;<br>    &#125;<br>    <span class="hljs-comment">//当我们通过代理类的对象调用方法a时，就会自动调用如下的方法invoke()</span><br>    <span class="hljs-comment">//将被代理类要执行的方法a的功能就声明在invoke()方法中</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span><span class="hljs-keyword">throws</span> Throwable</span>&#123;<br>        <span class="hljs-comment">//method:即为代理类对象调用的方法，此方法也就作为了被代理类要调用的方法</span><br>        <span class="hljs-comment">//obj:被代理类的对象</span><br>        Object returnVal = method.invoke(obj, args);<br>        <span class="hljs-comment">//上述方法的返回值就作为当前类中invoke()方法的返回值</span><br>        <span class="hljs-keyword">return</span> returnVal;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="jdk8新特性"><a class="markdownIt-Anchor" href="#jdk8新特性">#</a> JDK8 新特性</h2><h3 id="lambda表达式"><a class="markdownIt-Anchor" href="#lambda表达式">#</a> lambda 表达式</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/19 - 16:36</span><br><span class="hljs-comment"> * lambda表达式的使用</span><br><span class="hljs-comment"> * 1、举例：(o1, o2) -&gt; Integer.compare(o1,o2);</span><br><span class="hljs-comment"> * 2、格式：</span><br><span class="hljs-comment"> *      (形参列表) -&gt; lambda体(其实就是方法体)</span><br><span class="hljs-comment"> * 3、使用：分六种情况介绍</span><br><span class="hljs-comment"> * 4、lambda表达式本质：作为接口的具体实现类的对象。简化了接口的实现过程。如Comparator实现类子类的创建</span><br><span class="hljs-comment"> * 5、要求实现的接口是函数式接口：只有一个方法的接口</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LambdaTest</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 语法格式一：无参，无返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        Runnable r1 = <span class="hljs-keyword">new</span> Runnable()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;I Love You&quot;</span>);<br>            &#125;<br>        &#125;;<br>        r1.run();<br>        System.out.println(<span class="hljs-string">&quot;..........................&quot;</span>);<br>        Runnable r2 = () -&gt; &#123;System.out.print(<span class="hljs-string">&quot;I Love You Too, &quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;骗你的&quot;</span>);&#125;;<br>        r2.run();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * lambda需要一个参数，但没有返回值</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//原型</span><br>        Consumer&lt;String&gt; con = <span class="hljs-keyword">new</span> Consumer&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(String s)</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;爱你哦&quot;</span>);<br>            &#125;<br>        &#125;;<br>        con.accept(<span class="hljs-string">&quot;sssss&quot;</span>);<br>        <span class="hljs-comment">//lambda表达式形式</span><br>        Consumer&lt;String&gt; con1 = (String s) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;我不爱&quot;</span>);<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 情况三：参数类型可省略，由编译器自动推断</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//原型</span><br>        Consumer&lt;Integer&gt; con = <span class="hljs-keyword">new</span> Consumer&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(Integer s)</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;爱你哦&quot;</span>);<br>            &#125;<br>        &#125;;<br>        con.accept(<span class="hljs-number">123</span>);<br>        <span class="hljs-comment">//lambda表达式形式</span><br>        Consumer&lt;String&gt; con1 = s -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;我不爱&quot;</span>);<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 情况四：只有一个参数时，括号可以省略</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//原型</span><br>        Consumer&lt;Integer&gt; con = <span class="hljs-keyword">new</span> Consumer&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(Integer s)</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;爱你哦&quot;</span>);<br>            &#125;<br>        &#125;;<br>        con.accept(<span class="hljs-number">123</span>);<br>        <span class="hljs-comment">//lambda表达式形式</span><br>        Consumer&lt;String&gt; con1 = (s) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;我不爱&quot;</span>);<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 情况五：需要两个以上参数，有多条语句，有返回值</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span>&#123;<br>        Comparator&lt;Integer&gt; com1 = <span class="hljs-keyword">new</span> Comparator&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> Integer.compare(o1, o2);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">int</span> compare1 = com1.compare(<span class="hljs-number">12</span>,<span class="hljs-number">21</span>);<br>        System.out.println(compare1);<br>        System.out.println(<span class="hljs-string">&quot;////////////////////////////&quot;</span>);<br>        <span class="hljs-comment">//lambda表达式</span><br>        Comparator&lt;Integer&gt; com2 = (o1, o2) -&gt; &#123;<br>            System.out.println(o1);<br>            System.out.println(o2);<br>            <span class="hljs-keyword">return</span> Integer.compare(o1, o2);<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 情况六：lambda体只有一条语句时，若有Return和大括号，则都可以省略</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span></span>&#123;<br>        Comparator&lt;Integer&gt; com1 = (o1, o2) -&gt; o1.compareTo(o2);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="函数式接口"><a class="markdownIt-Anchor" href="#函数式接口">#</a> 函数式接口</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义函数式接口</span><br><span class="hljs-comment"> * 说明：lambda表达式是对象，而不是函数，它们必须依附于一类特别的对象类型--函数式接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/19 - 19:09</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyInterface</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 函数式接口的示例</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><span class="hljs-keyword">import</span> java.util.function.Predicate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Java内置的4大核心函数式接口</span><br><span class="hljs-comment"> * 消费型接口 Consumer&lt;T&gt; void accept(T t)</span><br><span class="hljs-comment"> * 供给型接口 Supplier&lt;T&gt; T get()</span><br><span class="hljs-comment"> * 函数型接口 Function&lt;T, R&gt;  R apply(T t)</span><br><span class="hljs-comment"> * 断定型接口 Predicate&lt;T&gt; boolean test(T t)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/19 - 19:22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FunctionalInterfaceTest</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试函数式接口Consumer，所有类似于void accept(T t)的函数都可以用lambda表达式代替</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//使用lambda表达式创建函数式接口Consumer&lt;Double&gt;的实例</span><br>        happyTime(<span class="hljs-number">500</span>, (o) -&gt; System.out.println(<span class="hljs-string">&quot;消费&quot;</span> + o + <span class="hljs-string">&quot;元&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">happyTime</span><span class="hljs-params">(<span class="hljs-keyword">double</span> money, Consumer&lt;Double&gt; con)</span></span>&#123;<br>        con.accept(money);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试predicate&lt;T&gt;接口</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;String&gt; aList = Arrays.asList(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;hi&quot;</span>, <span class="hljs-string">&quot;why&quot;</span>&#125;);<br>        <span class="hljs-comment">//表示如果字符串是&quot;hello&quot;，就会被过滤</span><br>        List&lt;String&gt; list = filterString(aList, s -&gt; !s.equals(<span class="hljs-string">&quot;hello&quot;</span>));<br>        <span class="hljs-comment">//输出结果为[hi, why]</span><br>        System.out.println(list);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据给定的规则，过滤list中符合条件的字符串，此规则由Predicate的方法决定</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">filterString</span><span class="hljs-params">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span></span>&#123;<br>        ArrayList&lt;String&gt; filterList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            <span class="hljs-keyword">if</span>(pre.test(s))&#123;<br>                filterList.add(s);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> filterList;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="方法引用与构造器引用"><a class="markdownIt-Anchor" href="#方法引用与构造器引用">#</a> 方法引用与构造器引用</h3><h4 id="方法引用"><a class="markdownIt-Anchor" href="#方法引用">#</a> 方法引用</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.function.BiPredicate;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.function.Supplier;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法引用的使用：</span><br><span class="hljs-comment"> * 1、使用的情景：当要传递给lambda体的操作已经有实现的方法了，可以使用方法引用。</span><br><span class="hljs-comment"> * 2、方法引用，本质上就是lambda表达式，而lambda表达式作为函数式接口的实例，所以方法引用也是函数式接口</span><br><span class="hljs-comment"> * 3、使用格式： 类（或对象）:: 方法名</span><br><span class="hljs-comment"> *      &gt; 类 :: 非静态方法</span><br><span class="hljs-comment"> *      &gt; 类(对象) :: 静态方法</span><br><span class="hljs-comment"> *      &gt; 类 :: 非静态方法  ******</span><br><span class="hljs-comment"> * 4、什么时候使用方法引用？要求？</span><br><span class="hljs-comment"> *  &gt; 要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型一致（针对情况一和二）</span><br><span class="hljs-comment"> *  &gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/19 - 19:56</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodRefTest</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 情况一：对象::实例方法</span><br><span class="hljs-comment">     * Consumer中的void accept(T t)</span><br><span class="hljs-comment">     * PrintStream中的void println(T t)</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        Consumer&lt;String&gt; con1 = str -&gt; System.out.println(str);<br>        con1.accept(<span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;................&quot;</span>);<br>        <span class="hljs-comment">//这两个lambda表达式效果一致</span><br>        Consumer&lt;String&gt; con2 = System.out::println;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Supplier的 T get()</span><br><span class="hljs-comment">     * Employee中的String getName()</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//lambda表达式形式</span><br>        Employee emp = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">10</span>);<br>        Supplier&lt;String&gt; s =  () -&gt; emp.getName();<br>        <span class="hljs-comment">//方法引用形式</span><br>        Supplier&lt;Integer&gt; s1 = emp::getAge;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 类名 :: 静态方法名</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//lambda表达式的写法</span><br>        Comparator&lt;Integer&gt; con = (t1, t2) -&gt; Integer.compare(t1, t2);<br>        <span class="hljs-comment">//方法引用的写法</span><br>        Comparator&lt;Double&gt; con1 = Double::compare;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Function中的 R apply(T t)</span><br><span class="hljs-comment">     * Math中的Long round(Double d)</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//lambda表达式写法</span><br>        Function&lt;Double, Long&gt; func = (d) -&gt; Math.round(d);<br>        func.apply(<span class="hljs-number">12.3</span>);<br>        <span class="hljs-comment">//方法引用写法</span><br>        Function&lt;Double, Long&gt; func1 = Math::round;<br>        func1.apply(<span class="hljs-number">12.6</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 情况三： 类名 :: 实例方法</span><br><span class="hljs-comment">     * Comparator中的int compare(T t1, T t2)</span><br><span class="hljs-comment">     * String中的boolean t1.equals(t2)</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//lambda表达式写法</span><br>        Comparator&lt;String&gt; con1 = (s1, s2) -&gt; s1.compareTo(s2);<br>        <span class="hljs-comment">//方法引用写法</span><br>        Comparator&lt;String&gt; con2 = String::compareTo;<br>        <span class="hljs-comment">////////////////////////////////////////////</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * BiPredicate中的 boolean test(T t1, T t2)</span><br><span class="hljs-comment">        * String中的 boolean t1.equals(t2)</span><br><span class="hljs-comment">        * */</span><br>        <span class="hljs-comment">//lambda表达式写法</span><br>        BiPredicate&lt;String, String&gt; bp = (t1, t2) -&gt; t1.equals(t2);<br>        System.out.println(bp.test(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>));<br>        <span class="hljs-comment">//方法引用写法</span><br>        BiPredicate&lt;String, String&gt; bp2 = String::equals;<br>        System.out.println(bp2.test(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Employee中的String getName()</span><br><span class="hljs-comment">     * Function中的 R apply(T t)</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//lambda表达式写法</span><br>        Function&lt;Employee, String&gt; func = (e) -&gt; e.getName();<br>        <span class="hljs-comment">//方法引用写法</span><br>        Function&lt;Employee, String&gt; func1 = Employee::getName;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="构造器引用和数组引用"><a class="markdownIt-Anchor" href="#构造器引用和数组引用">#</a> 构造器引用和数组引用</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.function.BiFunction;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.function.Supplier;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 一、构造器引用</span><br><span class="hljs-comment"> *  和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致，抽象方法的返回值就是构造器的返回值</span><br><span class="hljs-comment"> * 二、数组引用</span><br><span class="hljs-comment"> *  把数组看成一个类，那么数组引用就是构造器引用了</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/20 - 1:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConstructorRef</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器引用</span><br><span class="hljs-comment">     * Supplier中的 T get()</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//lambda表达式</span><br>        Supplier&lt;Employee&gt; supplier = () -&gt; <span class="hljs-keyword">new</span> Employee();<br>        <span class="hljs-comment">//构造器引用</span><br>        Supplier&lt;Employee&gt; supplier1 = Employee::<span class="hljs-keyword">new</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Function中的T apply(T t)</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//lambda表达式</span><br>        Function&lt;Integer, Employee&gt; fun1 = (age) -&gt; <span class="hljs-keyword">new</span> Employee(age);<br>        <span class="hljs-comment">//构造器引用</span><br>        Function&lt;Integer, Employee&gt; fun2 = Employee::<span class="hljs-keyword">new</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * BiFunction的 R apply(T t, U u)</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//lambda表达式</span><br>        BiFunction&lt;String, Integer, Employee&gt; func = (str, age) -&gt; <span class="hljs-keyword">new</span> Employee(str, age);<br>        <span class="hljs-comment">//构造器引用</span><br>        BiFunction&lt;String, Integer, Employee&gt; func1 = Employee::<span class="hljs-keyword">new</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数组引用</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//lambda表达式</span><br>        Function&lt;Integer, String[]&gt; func = (length) -&gt; <span class="hljs-keyword">new</span> String[length];<br>        <span class="hljs-comment">//数组引用</span><br>        Function&lt;Integer, String[]&gt; func1 = String[]::<span class="hljs-keyword">new</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="string-api"><a class="markdownIt-Anchor" href="#string-api">#</a> String API</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Optional;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><span class="hljs-keyword">import</span> java.util.stream.IntStream;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Stream API的使用</span><br><span class="hljs-comment"> * 1、Stream关注的是数据的运算，与CPU打交道</span><br><span class="hljs-comment"> *    集合讲的是数据的存储，与内存打交道</span><br><span class="hljs-comment"> * 2、Stream不会自己存储数据，不会改变源对象，相反，他们会返回一个持有结果的新Stream</span><br><span class="hljs-comment"> * 3、Stream是延迟执行的，这意味着他们会等到需要结果的时候才执行</span><br><span class="hljs-comment"> * 4、操作步骤</span><br><span class="hljs-comment"> *  &gt; 创建Stream</span><br><span class="hljs-comment"> *  &gt; 一系列的中间操作</span><br><span class="hljs-comment"> *  &gt; 终止操作（一旦执行终止操作，就会开始执行中间操作并产生结果），之后，就不能再被使用</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/20 - 20:45</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StreamTest</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建Stream实例的方法一：通过集合</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;hi&quot;</span>, <span class="hljs-string">&quot;why&quot;</span>);<br>        <span class="hljs-comment">// default Stream&lt;E&gt; stream()：返回一个顺序流</span><br>        Stream&lt;String&gt; stream = list.stream();<br>        <span class="hljs-comment">// default Stream&lt;E&gt; parallelStream()：返回一个并行流</span><br>        Stream&lt;String&gt; stringStream = list.parallelStream();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建Stream实例的方法二：通过数组</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//调用static &lt;T&gt;  Stream&lt;T&gt; Arrays.stream(T[] array)：返回一个流</span><br>        IntStream stream = Arrays.stream(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">123</span>, <span class="hljs-number">4</span>, <span class="hljs-number">54</span>, <span class="hljs-number">232</span>, <span class="hljs-number">6</span>&#125;);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建Stream实例的方法三：通过Stream.of()</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        Stream&lt;Integer&gt; integerStream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建Stream实例的方法四：通过Stream.iterate() 和 Stream.generate()</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//迭代</span><br>        <span class="hljs-comment">//public static &lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span><br>        <span class="hljs-comment">//遍历前10个偶数</span><br>        Stream.iterate(<span class="hljs-number">0</span>, t -&gt; t + <span class="hljs-number">2</span>).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br>        <span class="hljs-comment">//生成</span><br>        <span class="hljs-comment">//public static &lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span><br>        <span class="hljs-comment">//产生十个随机数</span><br>        Stream.generate(Math::random).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br>    &#125;<br><br><br>    <span class="hljs-comment">//接下来介绍中间操作</span><br><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Stream中间操作一：筛选与切片</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * filter(Predicate p)：接受lambda，从流中删除一些元素</span><br><span class="hljs-comment">        * */</span><br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;hi&quot;</span>, <span class="hljs-string">&quot;why&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>, <span class="hljs-string">&quot;but&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br>        Stream&lt;String&gt; stream = list.stream();<br>        <span class="hljs-comment">//实例：删除流中字符串hi</span><br>        stream.filter(e -&gt; !e.equals(<span class="hljs-string">&quot;hi&quot;</span>)).forEach(System.out::println);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * limit(n) 截断流，使元素不超过给定数量</span><br><span class="hljs-comment">        * */</span><br>        <span class="hljs-comment">//因为stream已经执行终止操作，所以得重新造一个</span><br>        <span class="hljs-comment">//筛选出前三条数据</span><br>        list.stream().limit(<span class="hljs-number">3</span>).forEach(System.out::println);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * skip(n) 跳过前n个元素，若元素个数不足n，则返回空流</span><br><span class="hljs-comment">        * */</span><br>        list.stream().skip(<span class="hljs-number">3</span>).forEach(System.out::println);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * distinct() 筛选，通过流所生成的元素的hashCode()和equals()去除重复元素</span><br><span class="hljs-comment">        * */</span><br>        list.stream().distinct().forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 中间操作之映射</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//map(Function f)：按照f将元素转换成其他形式</span><br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>, <span class="hljs-string">&quot;dd&quot;</span>);<br>        <span class="hljs-comment">//转换成大写</span><br>        list.stream().map(String::toUpperCase).forEach(System.out::println);<br>        <span class="hljs-comment">//flatMap(Function f)接受一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流合成一个流</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * map和flatMap的区别：</span><br><span class="hljs-comment">        * map相当于List.add</span><br><span class="hljs-comment">        * flatMap相当于List.addAll</span><br><span class="hljs-comment">        * */</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 中间操作之排序</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test7</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//sorted() 自然排序</span><br>        List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">12</span>, <span class="hljs-number">43</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">46</span>, <span class="hljs-number">32</span>);<br>        list.stream().sorted().forEach(System.out::println);<br>        System.out.println(<span class="hljs-string">&quot;.......................&quot;</span>);<br>        <span class="hljs-comment">//sorted(Comparator com)：定制排序</span><br>        <span class="hljs-comment">//这里实现从大到小排序</span><br>        list.stream().sorted((n1, n2) -&gt; -Integer.compare(n1, n2)).forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 终止操作：匹配与查找</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test8</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//boolean allMatch(Predicate p) 检查是否匹配所有元素</span><br>        <span class="hljs-comment">// 判断是否所有元素的长度都大于3</span><br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;avf&quot;</span>, <span class="hljs-string">&quot;dfgr&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        Stream&lt;String&gt; stream = list.stream();<br>        <span class="hljs-keyword">boolean</span> b = stream.allMatch(s -&gt; s.length() &gt; <span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//false</span><br>        System.out.println(b);<br>        <span class="hljs-comment">//boolean anyMatch(Predicate p) 检查是否有元素匹配该规则</span><br>        <span class="hljs-comment">//true</span><br>        list.stream().anyMatch(s -&gt; s.length() &gt; <span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//boolean noneMatch(Predicate p) 如果没有任何元素符合，就返回true</span><br>        <span class="hljs-comment">//true</span><br>        list.stream().noneMatch(s -&gt; s.length() &gt; <span class="hljs-number">5</span>);<br>        <span class="hljs-comment">//Optional&lt;T&gt; findFirst() 返回第一个元素</span><br>        Optional&lt;String&gt; first = list.stream().findFirst();<br>        <span class="hljs-comment">//Optional&lt;T&gt; findAny() 返回任意元素，</span><br>        Optional&lt;String&gt; any = list.stream().findAny();<br>        <span class="hljs-comment">//long count()返回流中元素总数</span><br>        <span class="hljs-keyword">long</span> count = list.stream().count();<br>        <span class="hljs-comment">//Optional&lt;T&gt; max(Comparator c) 返回最大值</span><br>        <span class="hljs-comment">//Optional&lt;T&gt; min(Comparator c) 返回最小值</span><br>        <span class="hljs-comment">//forEach(Consumer c) 内部迭代</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 终止操作之归约</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test9</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//reduce(T identity BinaryOperator) 将流中元素反复结合起来，得到一个值并返回</span><br>        <span class="hljs-comment">//identity是初始值</span><br>        <span class="hljs-comment">//计算1-10的自然数之和</span><br>        List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>);<br>        list.stream().reduce(<span class="hljs-number">0</span>, Integer::sum);<br>        <span class="hljs-comment">//reduce(BinaryOperator)，返回Optional&lt;T&gt;</span><br>        <span class="hljs-comment">//计算list中所有元素之和</span><br>        Optional&lt;Integer&gt; reduce = list.stream().reduce(Integer::sum);<br>        <span class="hljs-comment">//也可以这样写</span><br>        Optional&lt;Integer&gt; reduce1 = list.stream().reduce((n1, n2) -&gt; n1 + n2);<br>        System.out.println(reduce1.toString());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 终止操作之收集</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test10</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//collect(Collector c) ：c决定了如何对流执行收集的操作（如收集到List，Set，Map）</span><br>        List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">//找到大于5的数字并返回一个List</span><br>        List&lt;Integer&gt; list1 = list.stream().filter(e -&gt; e &gt; <span class="hljs-number">5</span>).collect(Collectors.toList());<br>        <span class="hljs-keyword">for</span> (Integer integer : list1) &#123;<br>            System.out.print(integer + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="optional类"><a class="markdownIt-Anchor" href="#optional类">#</a> Optional 类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Optional;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Optional类的使用：为了避免程序中空指针异常而创建的类</span><br><span class="hljs-comment"> * 1、常用方法</span><br><span class="hljs-comment"> *  &gt; ofNullable(T t)</span><br><span class="hljs-comment"> *  &gt; T orElse(T t)</span><br><span class="hljs-comment"> *  &gt; T get() 如果Optional内部value不为空，返回该值，否则，抛异常</span><br><span class="hljs-comment"> *  &gt; T getOrElse(Supplier&lt;? super T&gt; consumer) 如果有值，就返回值，没有就返回Supplier接口提供的返回值</span><br><span class="hljs-comment"> *  &gt; boolean isPresent() 判断是否包含对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/21 - 1:19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OptionalTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//Optional.of(T t) 要求t必须不为null</span><br>        Optional&lt;Employee&gt; employee = Optional.of(<span class="hljs-keyword">new</span> Employee());<br>        <span class="hljs-comment">//Optional.empty() 创建一个空的Optional实例</span><br>        Optional&lt;Object&gt; empty = Optional.empty();<br>        <span class="hljs-comment">//Optional.ofNullable(T t) 允许t为空</span><br>        Optional&lt;Object&gt; o = Optional.ofNullable(<span class="hljs-keyword">null</span>);<br>        Employee e = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//这里会报空指针</span><br><span class="hljs-comment">//        getEmployeeName(e);</span><br>        <span class="hljs-comment">//这里调用使用了Optional的getName()，虽然e是空，但是避免了空指针</span><br>        System.out.println(OptionalTest.getName(e));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 假设我想获取Employee的姓名，如果不适用Optional，传入null的时候就会空指针异常</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEmployeeName</span><span class="hljs-params">(Employee e)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> e.getName();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 假设我想获取Employee的姓名，如果不适用Optional，传入null的时候就会空指针异常</span><br><span class="hljs-comment">     * 按照以往逻辑，可以这样优化</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEmployeeName1</span><span class="hljs-params">(Employee e)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(e == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> e.getName();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用Optional后</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getName</span><span class="hljs-params">(Employee e)</span></span>&#123;<br>        <span class="hljs-comment">//这里的e有可能是null，有可能不是</span><br>        Optional&lt;Employee&gt; e1 = Optional.ofNullable(e);<br>        <span class="hljs-comment">// T orElse(T other) 如果Optional内部的value有值就返回value，没有就返回other</span><br>        <span class="hljs-comment">//如果e1内部的T是空，就会返回新创建的employee，如果e1不为空，就会返回e1</span><br>        <span class="hljs-comment">//这样，获取的Employee对象就一定不是null，可以避免空指针</span><br>        <span class="hljs-keyword">return</span> e1.orElse(<span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;我是空值&quot;</span>,<span class="hljs-number">12</span>)).getName();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="jdk9-11新特性"><a class="markdownIt-Anchor" href="#jdk9-11新特性">#</a> JDK9-11 新特性</h2><h3 id="jdk9新特性"><a class="markdownIt-Anchor" href="#jdk9新特性">#</a> JDK9 新特性</h3><h4 id="模块化系统"><a class="markdownIt-Anchor" href="#模块化系统">#</a> 模块化系统</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> dzc.good.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如果在一个模块需要用到另外一个模块的类，就需要：</span><br><span class="hljs-comment"> * ①在两个类的src目录下都建立module-info.java文件夹</span><br><span class="hljs-comment"> * ②被引用类module-info.java中，将被使用的类所在的包名exports，格式： exports 包名;</span><br><span class="hljs-comment"> * ③在引用别的模块的类的module-info.java中，格式为：requires 模块名;</span><br><span class="hljs-comment"> * ④最后，在project structures的使用者module下配置依赖dependencies</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/22 - 16:32</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ModuleTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//使用者的module-info.java</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/22 - 16:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">module</span> day27 &#123;<br>    <span class="hljs-keyword">requires</span> day27test; <span class="hljs-comment">// 格式： requires 被使用模块名</span><br>&#125;<br><br><span class="hljs-comment">//被使用的类声明在模块day27test下</span><br><span class="hljs-comment">//被使用类的声明(声明在dzc.good包下)：</span><br><span class="hljs-keyword">package</span> dzc.good;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/22 - 16:40</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//被使用模块的module-info.java</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/22 - 16:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">module</span> day27test &#123;<br>    <span class="hljs-keyword">exports</span> dzc.good; <span class="hljs-comment">// 格式： exports 被使用类所在的包名</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="java的repl工具jshell命令"><a class="markdownIt-Anchor" href="#java的repl工具jshell命令">#</a> Java 的 REPL 工具：jShell 命令</h4><blockquote><p>REPL: 读取、求值、打印、循环</p><p>通俗地讲，jShell 命名使得 java 可以像 python 一样成为脚本语言，在命令行下一行一行地执行</p><p>JShell 环境下，语句末尾的’;' 是可选的，但推荐还是最好加上，提高代码的可读性</p></blockquote><p><img src="https://gitee.com/dzcgood/img-bed/raw/master/img/image-20211022165818755.png" alt="jShell使用举例">)</p><h4 id="接口的私有方法"><a class="markdownIt-Anchor" href="#接口的私有方法">#</a> 接口的私有方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/22 - 17:18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyInterface</span> </span>&#123;<br>    <span class="hljs-comment">//如下的三个方法的权限修饰符都是public</span><br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接口中的普通方法</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodAbstract</span><span class="hljs-params">()</span></span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接口中的静态方法</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodStatic</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是接口中的静态方法&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接口中的default方法</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodDefault</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是接口中的默认方法&quot;</span>);<br>        <span class="hljs-comment">//接口内部可以调用私有接口的方法</span><br>        <span class="hljs-keyword">this</span>.methodPrivate();<br>    &#125;<br>    <br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接口中的私有方法</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodPrivate</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是接口中的私有方法&quot;</span>);<br>    &#125;<br>    <br>&#125;<br><br><br><br><span class="hljs-comment">//下面是接口的实现类</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 此类实现接口MyInterface</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/22 - 17:22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterfaceImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MyInterface</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodAbstract</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodDefault</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;实现类重写了接口的缺省方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//接口中的静态方法只能由接口自己调用</span><br>        MyInterface.methodStatic();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 实现类不能调用接口的静态方法</span><br><span class="hljs-comment">        * MyInterfaceImp.methodStatic();</span><br><span class="hljs-comment">        * */</span><br><br>        MyInterfaceImp myInterfaceImp = <span class="hljs-keyword">new</span> MyInterfaceImp();<br>        <span class="hljs-comment">//接口的私有方法不能在接口外使用</span><br>        myInterfaceImp.methodDefault();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="钻石操作符的升级"><a class="markdownIt-Anchor" href="#钻石操作符的升级">#</a> 钻石操作符的升级</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新特性：在匿名内部类中也可以使用泛型的自动推断&lt;&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/22 - 17:28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiamondOperator</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//匿名内部类中也可以使用泛型了的自动推断了</span><br>        <span class="hljs-comment">//JDK8中，是不允许的</span><br>        <span class="hljs-comment">//JDK8中，必须写成Comparator&lt;Object&gt; com = new Comparator&lt;Object&gt;&#123;&#125;;</span><br>        Comparator&lt;Object&gt; com = <span class="hljs-keyword">new</span> Comparator&lt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="try语句优化"><a class="markdownIt-Anchor" href="#try语句优化">#</a> try 语句优化</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * try语句的升级</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/22 - 17:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TryTest</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * JDK8之前的情况</span><br><span class="hljs-comment">     * 资源关闭操作在finally中</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        InputStreamReader inputStreamReader = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            inputStreamReader = <span class="hljs-keyword">new</span> InputStreamReader(System.in);<br>            <span class="hljs-keyword">char</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">20</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-keyword">if</span>((len = inputStreamReader.read(buf)) != -<span class="hljs-number">1</span>)&#123;<br>                String str = <span class="hljs-keyword">new</span> String(buf, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(inputStreamReader != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    inputStreamReader.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * jdk8中的资源关闭操作</span><br><span class="hljs-comment">     * 可以把资源的声明写在try()&#123;&#125;的小括号中，小括号内的资源可以自动关闭</span><br><span class="hljs-comment">     * 要求执行后必须关闭的资源必须在try子句的小括号中声明并实例化，否则编译不通过</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">try</span>(InputStreamReader inputStreamReader = <span class="hljs-keyword">new</span> InputStreamReader(System.in);)&#123;<br>            inputStreamReader = <br>            <span class="hljs-keyword">char</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">20</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-keyword">if</span>((len = inputStreamReader.read(buf)) != -<span class="hljs-number">1</span>)&#123;<br>                String str = <span class="hljs-keyword">new</span> String(buf, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * jdk9中的资源关闭</span><br><span class="hljs-comment">     * 可以把资源声明在try外面，然后在try子句中放入资源对象即可</span><br><span class="hljs-comment">     * 要求：try子句中的对象是默认为final的，如果修改它，就会报错</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        InputStreamReader inputStreamReader = <span class="hljs-keyword">new</span> InputStreamReader(System.in);<br>        <span class="hljs-keyword">try</span>(inputStreamReader )&#123;<br><span class="hljs-comment">//            reader = null; //会报错，reader默认是final的，不能修改</span><br>            <span class="hljs-keyword">char</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">20</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-keyword">if</span>((len = inputStreamReader.read(buf)) != -<span class="hljs-number">1</span>)&#123;<br>                String str = <span class="hljs-keyword">new</span> String(buf, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="string存储结构的变更"><a class="markdownIt-Anchor" href="#string存储结构的变更">#</a> String 存储结构的变更</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//底层的存储结构由两字节的char[]改成了一字节的byte[]和编码标记,如果是latin类的字符，则一字节表示一个字符，如果是中文类字符，</span><br><span class="hljs-comment">//则用两个字节表示一个字符</span><br></code></pre></div></td></tr></table></figure><h4 id="集合工厂方法创建只读集合"><a class="markdownIt-Anchor" href="#集合工厂方法创建只读集合">#</a> 集合工厂方法：创建只读集合</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK9新特性：集合工厂方法：创建只读集合</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/22 - 22:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollectionFactoryTest</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在JDK8中创建只读集合的方法，缺点：比较麻烦</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;String&gt; nameList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        nameList.add(<span class="hljs-string">&quot;Tom&quot;</span>);<br>        nameList.add(<span class="hljs-string">&quot;Mike&quot;</span>);<br>        nameList.add(<span class="hljs-string">&quot;Jerry&quot;</span>);<br>        <span class="hljs-comment">//创建只读集合</span><br>        nameList = Collections.unmodifiableList(nameList);<br>        <span class="hljs-comment">//以下语句会报错，因为nameList是只读集合</span><br><span class="hljs-comment">//        nameList.add(&quot;Tommy&quot;);</span><br>        System.out.println(nameList);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * JDK9中提供的of()方法，可以快速得到只读集合</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//此时得到的list是只读的，JDK8可以做到</span><br>        List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>        <span class="hljs-comment">//此时得到的list是只读的，JDK9之后才有</span><br>        List&lt;String&gt; nameList = List.of(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;Mike&quot;</span>, <span class="hljs-string">&quot;Jerry&quot;</span>);<br>        <span class="hljs-comment">//此时得到的set是只读的，JDK9之后才有</span><br>        Set&lt;Integer&gt; integers = Set.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//此时得到的map是只读的，JDK9之后才有</span><br>        Map&lt;String, Integer&gt; myMap = Map.of(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>, <span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-number">13</span>, <span class="hljs-string">&quot;Otis&quot;</span>, <span class="hljs-number">16</span>);<br>        <span class="hljs-comment">//以下语句会报错</span><br><span class="hljs-comment">//        nameList.add(&quot;hello&quot;);</span><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="inputstream加强"><a class="markdownIt-Anchor" href="#inputstream加强">#</a> InputStream 加强</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK9中InputStream的新方法：transferTo()</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/22 - 22:20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InputStreamTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-keyword">try</span>(InputStream is = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;test/hello.txt&quot;</span>);<br>            OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;test/hello1.txt&quot;</span>);)&#123;<br>            is.transferTo(os);<span class="hljs-comment">//把输入流中的所有数据直接自动地赋值到输出流中</span><br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="增强的stream-api"><a class="markdownIt-Anchor" href="#增强的stream-api">#</a> 增强的 Stream API</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK9新特性：Stream API的加强</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/22 - 22:40</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StreamAPITest</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * takeWhile()</span><br><span class="hljs-comment">     * dropWhile()</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">11</span>, <span class="hljs-number">65</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3235</span>, <span class="hljs-number">63</span>, <span class="hljs-number">856</span>);<br>        <span class="hljs-comment">//takeWhile(Predicate p)会返回从开头开始尽可能多的元素，一旦遇到不符合条件的，即使后面有符合条件的，也会被忽略</span><br>        list.stream().takeWhile(x -&gt; x &lt; <span class="hljs-number">60</span>).forEach(System.out::println);<br>        <span class="hljs-comment">//dropWhile(Predicate p)：将符合条件的丢弃，直到遇见不符合条件的</span><br>        list.stream().dropWhile(x -&gt; x &lt; <span class="hljs-number">60</span>).forEach(System.out :: println);<br>        <span class="hljs-comment">//</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ofNullable()</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//实例化方法一</span><br>        Stream&lt;Integer&gt; integerStream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//允许某个值是null</span><br>        Stream&lt;Integer&gt; integerStream1 = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-keyword">null</span>);<br>        System.out.println(integerStream1.count());<span class="hljs-comment">//元素个数被认为是4个</span><br>        <span class="hljs-comment">//不允许只有null</span><br><span class="hljs-comment">//        Stream&lt;Integer&gt; integerStream2 = Stream.of(null);</span><br>        <span class="hljs-comment">//允许是多个null</span><br>        Stream&lt;Integer&gt; integerStream3 = Stream.of(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>        System.out.println(integerStream3.count());<span class="hljs-comment">//元素个数被认为是3个</span><br><br>        <span class="hljs-comment">//ofNullable() 允许只有null</span><br>        Stream&lt;Integer&gt; integerStream4 = Stream.ofNullable(<span class="hljs-keyword">null</span>);<br>        System.out.println(integerStream4.count());<span class="hljs-comment">//元素个数被认为是0个</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * iterate()</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//JDK8已经有了</span><br>        Stream.iterate(<span class="hljs-number">0</span>, x -&gt; x + <span class="hljs-number">1</span>).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br>        <span class="hljs-comment">//JDK9新增：可以自定义终止条件，下面的终止条件是 x &lt; 100</span><br>        Stream.iterate(<span class="hljs-number">0</span>, x -&gt; x &lt; <span class="hljs-number">100</span>, x -&gt; x + <span class="hljs-number">1</span>).forEach(System.out::println);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="optional获取stream的方法"><a class="markdownIt-Anchor" href="#optional获取stream的方法">#</a> Optional 获取 Stream 的方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Optional;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK9新特性：Optional的stream()方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/22 - 23:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OptionalTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-string">&quot;Otis&quot;</span>);<br>        Optional&lt;List&lt;String&gt;&gt; optional = Optional.ofNullable(list);<br>        <span class="hljs-comment">//stream()方法会返回一个流。</span><br>        <span class="hljs-comment">//下面的例子中，会返回一个流，流内只有一个list对象</span><br>        Stream&lt;List&lt;String&gt;&gt; stream = optional.stream();<br>        stream.flatMap(x -&gt; x.stream()).forEach(System.out::println);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="javascript引擎升级nashorn"><a class="markdownIt-Anchor" href="#javascript引擎升级nashorn">#</a> Javascript 引擎升级：Nashorn</h4><p>它为 Java 提供轻量级的 Javascript 运行时，使得 Java 应用能够嵌入 Javascript。它在 JDK11 中就被废弃了。。。。。</p><h3 id="jdk10新特性"><a class="markdownIt-Anchor" href="#jdk10新特性">#</a> JDK10 新特性</h3><h4 id="局部变量类型推断"><a class="markdownIt-Anchor" href="#局部变量类型推断">#</a> 局部变量类型推断</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><span class="hljs-keyword">import</span> java.util.function.Supplier;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * JDK10新特性：局部变量类型推断</span><br><span class="hljs-comment"> * 1、工作原理</span><br><span class="hljs-comment"> *  var是根据右边的类型来推断左边的类型的，如果右边的不确定，左边就不能用var</span><br><span class="hljs-comment"> *  推断完成后，会把原来的类型写入字节码文件，var不会出现在字节码文件中</span><br><span class="hljs-comment"> * 2、var不是关键字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/23 - 13:36</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK10Test</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//以前的写法</span><br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">//1、声明变量时，根据所赋的值，推断变量的类型</span><br>        <span class="hljs-keyword">var</span> num1 = <span class="hljs-number">11</span>;<br>        <span class="hljs-keyword">var</span> list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        list.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-comment">//2、遍历</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> str : list)&#123;<br>            System.out.println(str + <span class="hljs-string">&quot; &quot;</span> + str.getClass());<br>        &#125;<br>        <span class="hljs-comment">//普通的遍历操作</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 不能使用类型推断的场景</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//情况一：没有赋初始值的情况</span><br>        <span class="hljs-keyword">int</span> num;<br><span class="hljs-comment">//        var num;</span><br>        <span class="hljs-comment">//情况二：lambda表达式中，左边的接口不能省略</span><br>        Supplier&lt;Double&gt; sup = () -&gt; Math.random();<br>        <span class="hljs-comment">//lambda表达式是作为实例赋值给接口的，你现在把接口都省略了，我怎么知道赋值给谁啊。。。</span><br><span class="hljs-comment">//        var sup1 = () -&gt; Math.random();</span><br>        <span class="hljs-comment">//情况三：方法引用中，左边的接口不能省略</span><br>        Consumer&lt;String&gt; con = System.out::println;<br><span class="hljs-comment">//        var con1 = System.out::println;</span><br>        <span class="hljs-comment">//情况四：数组的静态初始化中</span><br><span class="hljs-comment">//        var arr = &#123;1,2,3,4&#125;;</span><br>        <span class="hljs-comment">//以下是可以的</span><br>        <span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 其他不可使用的情况</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//没有初始化的局部变量声明</span><br><span class="hljs-comment">//        var num = null;</span><br>        <span class="hljs-comment">//方法的返回类型：原则是由返回值类型判断return语句是不是合法，而不是根据return推断返回值类型</span><br>        <span class="hljs-comment">//方法的参数类型： public void method(var a, var b)，理由同上。 如果写成var，什么牛马都可以往里面塞</span><br>        <span class="hljs-comment">//构造器的参数类型：理由同上</span><br>        <span class="hljs-comment">//属性：属性涉及到构造函数，构造函数就会涉及到参数类型</span><br>        <span class="hljs-comment">//catch块</span><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="集合新增的copyof创建只读集合"><a class="markdownIt-Anchor" href="#集合新增的copyof创建只读集合">#</a> 集合新增的 copyOf ()：创建只读集合</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK10新特性：集合中新增的copyOf()方法，用于创建只读集合</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/23 - 14:02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CopyOfTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">var</span> list = List.of(<span class="hljs-string">&quot;Java&quot;</span>, <span class="hljs-string">&quot;Python&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>);<br>        <span class="hljs-keyword">var</span> copy1 = List.copyOf(list);<br>        <span class="hljs-comment">//true</span><br>        System.out.println(list == copy1);<br><br>        <span class="hljs-keyword">var</span> alist = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">var</span> copy2 = List.copyOf(alist);<br>        <span class="hljs-comment">//false</span><br>        System.out.println(alist == copy2);<br><br>        <span class="hljs-comment">//两个代码基本一致，为什么一个为true，一个为false？</span><br>        <span class="hljs-comment">//答：如果copyOf()的实际参数是只读的，则没必要再造一个，直接返回实际参数</span><br>        <span class="hljs-comment">//如果copyOf()的实际参数不是只读的，就会新造一个。</span><br>        <span class="hljs-comment">//所以copy1实际上就是list，而copy2是新造的</span><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="jdk11新特性"><a class="markdownIt-Anchor" href="#jdk11新特性">#</a> JDK11 新特性</h3><h4 id="string新增的方法"><a class="markdownIt-Anchor" href="#string新增的方法">#</a> String 新增的方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK11新特性：String新增的方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/23 - 14:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringAPITest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//isBlank()：没有实际的字符的，就返回true（\t,\n，空格，空字符都不算实际字符）</span><br>        System.out.println(<span class="hljs-string">&quot; \t \n   &quot;</span>.isBlank());<br>        <span class="hljs-comment">//strip()：去除前后的空格、\t、\n等空白</span><br>        System.out.println(<span class="hljs-string">&quot;  hello  &quot;</span>.strip());<br><br>        <span class="hljs-comment">//stripTrailing()：去除尾部空白</span><br>        <span class="hljs-comment">//stripLeading()：去除首部空白</span><br><br>        <span class="hljs-comment">//repeat(int count)：将字符串重复n次</span><br>        System.out.println(<span class="hljs-string">&quot;5&quot;</span>.repeat(<span class="hljs-number">5</span>));<br>        <span class="hljs-comment">//lines().count()：返回行数</span><br>        <span class="hljs-comment">//首尾的\n是不被算进去的</span><br>        String str = <span class="hljs-string">&quot;abc\nde\nfg&quot;</span>;<br>        System.out.println(str.lines().count());<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="optional加强"><a class="markdownIt-Anchor" href="#optional加强">#</a> Optional 加强</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Optional;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK11新特性：Optional加强</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/23 - 14:34</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK11OptionalTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * boolean isEmpty() ：value为空，就返回true。 注意和isPresent()区别</span><br><span class="hljs-comment">        * ifPresentOrElse(Consumer c, Runnable r) : value存在，执行c，不存在，执行r</span><br><span class="hljs-comment">        * orElseThrow()：value存在，就返回value，不存在，就抛异常</span><br><span class="hljs-comment">        * stream() ：value为空，就返回一个空stream，value存在，就返回value的stream</span><br><span class="hljs-comment">        * or(Optional o)：value存在，就返回对应的optional，value不存在，就返回参数指定的optional</span><br><span class="hljs-comment">        * */</span><br>        <span class="hljs-keyword">var</span> op = Optional.of(<span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-keyword">var</span> op1 = Optional.of(<span class="hljs-string">&quot;hi&quot;</span>);<br>        <span class="hljs-comment">//因为op里面的value非空，所以返回的是op</span><br>        Optional&lt;String&gt; op2 = op.or(() -&gt; op1);<br>        <span class="hljs-comment">//因为op里面的value为空，所以返回的是op1</span><br>        op = Optional.empty();<br>        op2= op.or(() -&gt; op1);<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="局部变量类型推断的升级"><a class="markdownIt-Anchor" href="#局部变量类型推断的升级">#</a> 局部变量类型推断的升级</h4><p>允许在 var 局部变量上添加注解</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> DzcGood</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/23 - 14:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK11OtherstEST</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//在lambda表达式如果想用注解，就不能省略类型</span><br>        Consumer&lt;String&gt; con = (<span class="hljs-meta">@Deprecated</span> String t) -&gt; System.out.println(t.toUpperCase());<br>        <span class="hljs-comment">//以下是错误的，没有加类型</span><br><span class="hljs-comment">//        Consumer&lt;String&gt; con1 = (@Deprecated t) -&gt; System.out.println(t.toUpperCase());</span><br>        <span class="hljs-comment">//JDK11中，可以用var这样写</span><br>        Consumer&lt;String&gt; con2 = (<span class="hljs-meta">@Deprecated</span> <span class="hljs-keyword">var</span> t) -&gt; System.out.println(t.toUpperCase());<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="http-client"><a class="markdownIt-Anchor" href="#http-client">#</a> HTTP Client</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//HttpClient替换原有的HttpURLConnection</span><br><span class="hljs-comment">//具体的在JavaWeb学吧。。。</span><br></code></pre></div></td></tr></table></figure><h4 id="更简化的编译运行程序"><a class="markdownIt-Anchor" href="#更简化的编译运行程序">#</a> 更简化的编译运行程序</h4><blockquote><p>在 JDK11 之前，执行 Java 程序需要两个步骤：javac classname.java 和 java clasname</p><p>现在，只需要一个命令： java classname.java 就可以完成编译和执行的操作了</p><p>但是这样做有一些要求：</p><blockquote><p>1、可以调用同一个文件的其它类</p></blockquote><blockquote><p>2、不能调用别的文件的类</p></blockquote><blockquote><p>3、只会调用当前源文件中第一个类的 main 方法</p></blockquote></blockquote><p>总结：这个功能玩玩就可以了。。。。。</p><h4 id="其他新特性"><a class="markdownIt-Anchor" href="#其他新特性">#</a> 其他新特性</h4><ul><li>废弃 Nashorn 引擎（太鸡肋了，刚刚出来没多久就被 Deprecated 了）</li><li>ZGC：一个并发、基于 region，压缩型的垃圾收集器（反正是一个很牛的东西，以后再学。。。）</li><li>……</li></ul><h2 id="完结撒花"><a class="markdownIt-Anchor" href="#完结撒花">#</a> 完结撒花</h2><p>撒花撒花撒花。。。。。。</p><p>Next Step ------ MySql</p>]]></content>
    
    
    <categories>
      
      <category>面向Offer学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>JavaSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分查找</title>
    <link href="/2021/11/02/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2021/11/02/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-t704-二分查找"><a class="markdownIt-Anchor" href="#leetcode-t704-二分查找">#</a> Leetcode T704 二分查找</h1><h2 id="关于"><a class="markdownIt-Anchor" href="#关于">#</a> 关于</h2><p>第一篇刷题<s>水文</s>当然要从最简单的数组开始啦～</p><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述">#</a> 题目描述</h2><blockquote><p>一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p>示例 1:</p><blockquote><p>输入: nums = [-1,0,3,5,9,12], target = 9<br> 输出: 4<br> 解释: 9 出现在 nums 中并且下标为 4</p></blockquote><p>示例 2:</p><blockquote><p>输入: nums = [-1,0,3,5,9,12], target = 2<br> 输出: -1<br> 解释: 2 不存在 nums 中因此返回 -1</p></blockquote><p>提示：</p><blockquote><p>你可以假设 nums 中的所有元素是不重复的。<br>n 将在 [1, 10000] 之间。<br>nums 的每个元素都将在 [-9999, 9999] 之间。</p></blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-search">https://leetcode-cn.com/problems/binary-search</a></p></blockquote><h2 id="分析"><a class="markdownIt-Anchor" href="#分析">#</a> 分析</h2><p>这是一个数组的题，考察的知识点是二分查找，<s>这不是废话吗？题目明摆写着呢。</s></p><p>还是好好分析一下，这类题目如果直接暴力遍历的话，时间复杂度为 O (n)，数组元素比较多的情况下，应该会超时吧</p><p>这时要关注一下题目给的条件：</p><ul><li>有序的（升序）整型数组</li><li>可以假设 nums 中的所有元素是不重复的</li></ul><p>这两个条件就是为二分查找量身打造的，对于二分查找，一定要满足<em><strong>元素有序</strong></em>的条件，不然得到的结果<s>肯定</s>是错的，那这题当然是用<strong>二分查找</strong>啦</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路">#</a> 思路</h2><p>先定义两个整型变量 left，right 和 mid，约定要查找的目标 index 的索引位置在区间 [left, right] 内（注意，这里是闭区间，如果是左闭右开的话，对应的算法有所不同）。对于每一对 left 和 right 值，始终让 mid =  (left + right) / 2，比较 nums [mid] 和 target 的大小：</p><ul><li>target &lt;nums [mid]：说明 target 的索引位置在 [left, mid)，此时更新 right 为 mid - 1</li><li>target = nums [mid]：此时的 mid 就是所求值</li><li>target &gt; nums [mid]：说明 target 的索引位置在 (mid, right]，此时更新 left 为 mid + 1</li></ul><h2 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析">#</a> 复杂度分析</h2><ul><li>时间复杂度：O (logn)，其中 n 是数组的长度</li><li>空间复杂度：O (1)</li></ul><h2 id="代码java语言描述"><a class="markdownIt-Anchor" href="#代码java语言描述">#</a> 代码（Java 语言描述）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> T704;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 简单地不能再简单的二分查找</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-comment">//这里假设nums[target]的索引在区间[left, right]内，注意这里是闭区间</span><br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = nums.length;<br>        <span class="hljs-keyword">int</span> mid;<br>        <span class="hljs-keyword">while</span>(left &lt;= right)&#123;<br>            mid = (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-comment">//找到</span><br>            <span class="hljs-keyword">if</span>(nums[mid] == target)&#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target &lt; nums[mid])&#123;<br>                <span class="hljs-comment">//说明target在左边</span><br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//说明target在右边</span><br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//没找到，返回-1</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="算法对比"><a class="markdownIt-Anchor" href="#算法对比">#</a> 算法对比</h2><p>这么简单的二分查找肯定是标准答案啦（<s>等到别的题我就知道错了</s>）</p><p><img src="https://gitee.com/dzcgood/img-bed/raw/master/img/image-20211102010323501.png" alt="执行用时分布图表"></p><p><img src="https://gitee.com/dzcgood/img-bed/raw/master/img/image-20211102010414508.png" alt="执行消耗内存分布图表"></p>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>数组</tag>
      
      <tag>二分查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理实验二 XLEX</title>
    <link href="/2021/10/31/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%BA%8C-XLEX/"/>
    <url>/2021/10/31/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%BA%8C-XLEX/</url>
    
    <content type="html"><![CDATA[<h1 id="xlex软件文档"><a class="markdownIt-Anchor" href="#xlex软件文档">#</a> XLEX 软件文档</h1><h2 id="关于"><a class="markdownIt-Anchor" href="#关于">#</a> 关于</h2><blockquote><p>SCNU-CS 编译原理实验二，本来想好好写一写的，但是时间紧迫，先水一水吧，以后有时间再改一改。（还有 bug 没改）</p></blockquote><h2 id="作者"><a class="markdownIt-Anchor" href="#作者">#</a> 作者</h2><blockquote><p><a href = https://github.com/dzcgood>@dzcgood</a></p></blockquote><h2 id="开发环境"><a class="markdownIt-Anchor" href="#开发环境">#</a> 开发环境</h2><blockquote><p>Qt Creator 4.11.1(Community)</p></blockquote><h2 id="顶层程序流程图"><a class="markdownIt-Anchor" href="#顶层程序流程图">#</a> 顶层程序流程图</h2><p><img src="/img/%E9%A1%B6%E5%B1%82%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="顶层流程图"></p><h2 id="实现思路"><a class="markdownIt-Anchor" href="#实现思路">#</a> 实现思路</h2><h3 id="this-nfa-选择"><a class="markdownIt-Anchor" href="#this-nfa-选择">#</a> this | nfa  选择</h3><blockquote><p>设 this 和 nfa 都代表一个 nfa 图，则执行‘|’操作只需要新建 startNode 和 endNode 和四条边，将二者连接即可。</p></blockquote><p><img src="/img/%E9%80%89%E6%8B%A9%E6%93%8D%E4%BD%9C.jpg" alt="选择操作"></p><h3 id="thisnfa连接"><a class="markdownIt-Anchor" href="#thisnfa连接">#</a> thisnfa 连接</h3><blockquote><p>直接把 this-&gt;endNode 和 nfa -&gt; startNode 之间加一条 NFAEdge 连起来</p></blockquote><p><img src="/img/%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C.jpg" alt="连接操作"></p><h3 id="a-闭包"><a class="markdownIt-Anchor" href="#a-闭包">#</a> a* 闭包</h3><blockquote><p>需要新建 startNode 和 endNode，和 nfa 前后连起来，然后把 nfa 的 startNode 和 endNode 连起来。总结一下，就是新建两个结点和四条边。</p></blockquote><p><img src="/img/%E9%97%AD%E5%8C%85.jpg" alt="闭包"></p><h3 id="生成nfa"><a class="markdownIt-Anchor" href="#生成nfa">#</a> 生成 NFA</h3><blockquote><p>获取 NFA 图，由输入的正则表达式产生 NFA</p><p>正则表达式转 NFA 递归方法思路： 首先把 (…) 看成一个单元素 NFA, 和 a 等价，把单个 NFA 看成一个或数个元素的 Union，即 NFA = a [|b|c…]。扫描正则表达式，首先扫描 | 进行拆分递归，逐项建立 NFA 后，用 ‘|’ 连接，对于括号要进行进行递归处理</p></blockquote><p><img src="/img/%E7%94%9F%E6%88%90NFA.jpg" alt="生成NFA"></p><h3 id="生成dfa"><a class="markdownIt-Anchor" href="#生成dfa">#</a> 生成 DFA</h3><blockquote><p>分为两个步骤：</p><ul><li>给 NFA 的结点编号并建立初始 DFA 结点</li><li>确定结点与结点之间的关系，建立 DFA 的边</li></ul></blockquote><h5 id="nfa结点编号建立dfa结点"><a class="markdownIt-Anchor" href="#nfa结点编号建立dfa结点">#</a> NFA 结点编号，建立 DFA 结点</h5><p><img src="/img/serializeNFA.jpg" alt="serializeNFA"></p><h5 id="建立dfa的边"><a class="markdownIt-Anchor" href="#建立dfa的边">#</a> 建立 DFA 的边</h5><p><img src="/img/%E5%BB%BA%E7%AB%8BDFA%E7%9A%84%E8%BE%B9.jpg" alt="建立DFA的边"></p><h3 id="最小化dfa"><a class="markdownIt-Anchor" href="#最小化dfa">#</a> 最小化 DFA</h3><blockquote><p>分为两个步骤：</p><ul><li>求初态集合、终态集合并对这些集合进行划分，建立最后的 DFANode</li><li>建立 DFANode 之间的边，形成最小 DFA 图</li></ul></blockquote><h5 id="集合划分建立dfanode"><a class="markdownIt-Anchor" href="#集合划分建立dfanode">#</a> 集合划分，建立 DFANode</h5><p><img src="/img/%E9%9B%86%E5%90%88%E5%88%92%E5%88%86%EF%BC%8C%E7%94%9F%E6%88%90DFANode.jpg" alt="集合划分，生成DFANode"></p><h5 id="建立dfanode的边"><a class="markdownIt-Anchor" href="#建立dfanode的边">#</a> 建立 DFANode 的边</h5><p><img src="/img/%E5%BB%BA%E7%AB%8B%E6%9C%80%E5%B0%8FDFA%E7%9A%84%E8%BE%B9.jpg" alt="建立最小DFA的边"></p><h3 id="生成c语言代码"><a class="markdownIt-Anchor" href="#生成c语言代码">#</a> 生成 c 语言代码</h3><blockquote><p>对于从个某结点出发的每一条边，分为两类，指向自己的，以及指向下一个结点的。对于指向自己的边，生成 while 语句；对于指向下一个结点的边，生成 if 语句，并且需要递归进入下一个结点，直到当前结点的状态为 END 时，结束递归，并回调。</p></blockquote><p><img src="/img/%E7%94%9F%E6%88%90c%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81.jpg" alt="生成c语言代码"></p><h2 id="枚举-结构体-类设计"><a class="markdownIt-Anchor" href="#枚举-结构体-类设计">#</a> 枚举、结构体、类设计</h2><h3 id="枚举"><a class="markdownIt-Anchor" href="#枚举">#</a> 枚举</h3><blockquote><p>定义了一个枚举 State，用于标记每个结点的状态，包括 START（开始节点）, END（结束结点）, NORMAL（其他结点）</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    定义各个结点的状态：开始，结束，普通</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">State</span>&#123;</span><br>    START,END,NORMAL<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="结构体"><a class="markdownIt-Anchor" href="#结构体">#</a> 结构体</h3><blockquote><p>共四个结构体，NFANode，NFAEdge，DFANode，DFAEdge，分别代表一个 NFA 图的结点、一条 NFA 图的边、一个 DFA 图的结点、一个 DFA 图的边。接下来详细说明四个结构体的具体定义。</p></blockquote><h4 id="nfanode"><a class="markdownIt-Anchor" href="#nfanode">#</a> NFANode</h4><blockquote><p>DFANode 用来描述一个 NFA 图的结点，其属性包括编号（id），状态 (state)，入边 (inEdges)，出边 (outEdges)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    NFA的结点</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NFANode</span>&#123;</span><br>    <span class="hljs-comment">//唯一标记结点</span><br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-comment">//标实该结点是否为开始结点或结束结点</span><br>    State state;<br>    <span class="hljs-comment">//入边</span><br>    vector&lt;NFAEdge&gt; inEdges;<br>    <span class="hljs-comment">//出边</span><br>    vector&lt;NFAEdge&gt; outEdges;<br>    <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-built_in">NFANode</span>(<span class="hljs-keyword">int</span> i, State s) : <span class="hljs-built_in">id</span>(i), <span class="hljs-built_in">state</span>(s)&#123;&#125;<br>    <span class="hljs-comment">//空参构造函数</span><br>    <span class="hljs-built_in">NFANode</span>(): <span class="hljs-built_in">id</span>(DEFAULT_ID), <span class="hljs-built_in">state</span>(NORMAL)&#123;&#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h4 id="nfaedge"><a class="markdownIt-Anchor" href="#nfaedge">#</a> NFAEdge</h4><blockquote><p>NFAEdge 用于描述一条 NFA 图中的边，其属性包括开始结点 (startNode)，结束结点 (endNode)，处理的字符 (word)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    NFA的边</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NFAEdge</span>&#123;</span><br>    <span class="hljs-comment">//该边由startNode指向endNode</span><br>    NFANode * startNode;<br>    NFANode * endNode;<br>    <span class="hljs-comment">//该边处理字符word</span><br>    <span class="hljs-keyword">char</span> word;<br>    <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-built_in">NFAEdge</span>(NFANode * s, NFANode * e, <span class="hljs-keyword">char</span> c): <span class="hljs-built_in">startNode</span>(s), <span class="hljs-built_in">endNode</span>(e), <span class="hljs-built_in">word</span>(c)&#123;&#125;<br>    <span class="hljs-comment">//空参构造函数</span><br>    <span class="hljs-built_in">NFAEdge</span>(): <span class="hljs-built_in">startNode</span>(<span class="hljs-literal">NULL</span>), <span class="hljs-built_in">endNode</span>(<span class="hljs-literal">NULL</span>), <span class="hljs-built_in">word</span>(<span class="hljs-string">&#x27;\0&#x27;</span>)&#123;&#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h4 id="dfanode"><a class="markdownIt-Anchor" href="#dfanode">#</a> DFANode</h4><blockquote><p>DFANode 用于描述一个 DFA 图的结点，其属性包括该结点的 EPSILION 闭包 (nodes)，由该结点出发的边 (edges)，结点名 (minName)，状态 (state)，还有一系列的操作，如插入边，插入结点，输出结点信息等</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//DFA结点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DFANode</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">//该结点的EPSILION闭包</span><br>    set&lt;<span class="hljs-keyword">int</span>&gt; nodes;<br>    <span class="hljs-comment">//由该结点出发的边</span><br>    vector&lt;DFAEdge&gt; edges;<br>    <span class="hljs-comment">//给这个结点取个名字，A, B, C, D</span><br>    string minName;<br>    <span class="hljs-comment">//该结点在DFA图中的状态</span><br>    State state = NORMAL;<br>    <span class="hljs-comment">//判断结点id是否在该结点中</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">contains</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>    <span class="hljs-comment">//在该结点插入id</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>    <span class="hljs-comment">//在该结点插入边</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(DFAEdge edge)</span></span>;<br>    <span class="hljs-comment">//将两个结点合成一个结点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unionNode</span><span class="hljs-params">(DFANode * node)</span></span>;<br>    <span class="hljs-comment">//该结点处理字符c后转变为的结点</span><br>    <span class="hljs-function">DFANode * <span class="hljs-title">process</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span></span>;<br>    <span class="hljs-comment">//输出该结点信息 如： &#123;1，2，4，6&#125;</span><br>    <span class="hljs-function">string <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h4 id="dfaedge"><a class="markdownIt-Anchor" href="#dfaedge">#</a> DFAEdge</h4><blockquote><p>DFAEdge 用于描述一条 DFA 图的边，其属性包括指向的结点（next）和处理的字符（word）</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//DFA边</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DFAEdge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">//边指向的结点</span><br>    DFANode * next;<br>    <span class="hljs-comment">//处理的字符</span><br>    <span class="hljs-keyword">char</span> word;<br>    <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-built_in">DFAEdge</span>(DFANode *n, <span class="hljs-keyword">char</span> c): <span class="hljs-built_in">next</span>(n), <span class="hljs-built_in">word</span>(c)&#123;&#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="类"><a class="markdownIt-Anchor" href="#类">#</a> 类</h3><blockquote><p>一共定义了三个类，分别是 NFA, DFA, Proxy，其中 NFA 和 DFA 类分别代表一个 NFA 图和 DFA 图，Proxy 是代理类，用于代理有关 NFA 和 DFA 类的操作，具体包括生成 NFA 图、给 NFA 图编号并生成 DFA 图、最小化 DFA 图、生成 c 语言代码等操作。</p></blockquote><h4 id="nfa"><a class="markdownIt-Anchor" href="#nfa">#</a> NFA</h4><blockquote><p>主要涉及到选择（a | b）闭包（a*），连接（ab）操作</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    NFA类，集成构建NFA图的操作</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NFA</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//NFA图的开始结点</span><br>    NFANode * startNode;<br>    <span class="hljs-comment">//NFA图的结束结点</span><br>    NFANode * endNode;<br>    <span class="hljs-comment">//结点个数</span><br>    <span class="hljs-keyword">int</span> nodeNumber;<br>    <span class="hljs-comment">//空参构造函数</span><br>    <span class="hljs-built_in">NFA</span>():<span class="hljs-built_in">startNode</span>(<span class="hljs-literal">NULL</span>), <span class="hljs-built_in">endNode</span>(<span class="hljs-literal">NULL</span>), <span class="hljs-built_in">nodeNumber</span>(<span class="hljs-number">2</span>)&#123;&#125;<br>    <span class="hljs-comment">//初始化一个处理字符c的NFA图</span><br>    <span class="hljs-comment">//这里原作者id的类型是char ？？？ 暂时没看懂，，先改成 int</span><br>    <span class="hljs-built_in">NFA</span>(<span class="hljs-keyword">char</span> c, <span class="hljs-keyword">int</span> id1, <span class="hljs-keyword">int</span> id2);<br>    <span class="hljs-comment">//初始化一个识别c的标号未定的NFA图</span><br>    <span class="hljs-built_in">NFA</span>(<span class="hljs-keyword">char</span> c);<br>    <span class="hljs-comment">//已知开始结点和结束结点</span><br>    <span class="hljs-built_in">NFA</span>(NFANode * s, NFANode * e): <span class="hljs-built_in">startNode</span>(s), <span class="hljs-built_in">endNode</span>(e)&#123;&#125;<br>    <span class="hljs-comment">//浅复制</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> NFA &amp;nfa);<br>    <span class="hljs-comment">// a | b 选择</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Or</span><span class="hljs-params">(<span class="hljs-keyword">const</span> NFA &amp;nfa)</span></span>;<br>    <span class="hljs-comment">// ab 连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">And</span><span class="hljs-params">(<span class="hljs-keyword">const</span> NFA &amp;nfa)</span></span>;<br>    <span class="hljs-comment">// a* 闭包</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Star</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">//当前NFA图是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-comment">//id对应的结点是不是endNode</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isEnd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-comment">//获取endNode的id</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getEndId</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-comment">//获取startNode的id</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getStartId</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h4 id="dfa"><a class="markdownIt-Anchor" href="#dfa">#</a> DFA</h4><blockquote><p>用于描述一个 DFA 图，其主要操作涉及到由该结点生成该结点对应的 c 语言代码</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//DFA类</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DFA</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//DFA图的结点</span><br>    vector&lt;DFANode*&gt; graph;<br>    <span class="hljs-comment">//通过id返回图的结点</span><br>    <span class="hljs-function">vector&lt;DFANode*&gt; <span class="hljs-title">getNodes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>    <span class="hljs-comment">//DFA图最小开始结点</span><br>    DFANode *minStartNode;<br>    <span class="hljs-comment">//DFA图最小结束结点</span><br>    vector&lt;DFANode*&gt; minEndNodes;<br>    <span class="hljs-comment">//能处理的字符</span><br>    set&lt;<span class="hljs-keyword">char</span>&gt; wordList;<br>    <span class="hljs-comment">//建一个新结点</span><br>    <span class="hljs-function">DFANode* <span class="hljs-title">crateNewNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>    <span class="hljs-comment">//判断两个结点的转化是否等价，若转化后是同一个结点，则等价</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">equals</span><span class="hljs-params">(DFANode *node1, DFANode *node2, set&lt;<span class="hljs-keyword">char</span>&gt; words)</span></span>;<br>    <span class="hljs-comment">//判断该结点是否为结束结点</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isEndNode</span><span class="hljs-params">(DFANode *node)</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-comment">//从当前DFA中删除某个结点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delNode</span><span class="hljs-params">(DFANode *node)</span></span>;<br>    <span class="hljs-comment">//获取该结点的c语言代码，n是结点指针，lines是生成的代码，tabNumber是缩进数</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getCode</span><span class="hljs-params">(DFANode *n, vector&lt;string&gt; &amp;lines, <span class="hljs-keyword">int</span> tabNumber)</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">//获取缩进的空格</span><br>    <span class="hljs-function">string <span class="hljs-title">getTabs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> tabNumber)</span></span>;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h4 id="proxy"><a class="markdownIt-Anchor" href="#proxy">#</a> Proxy</h4><blockquote><p>代理 NFA 和 DFA 的操作，包括产生 NFA，产生 DFA，最小化 DFA</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//正则表达式</span><br>    string regularExpression;<br>    <span class="hljs-comment">//NFA图</span><br>    NFA nfa;<br>    <span class="hljs-comment">//最初始的DFA图</span><br>    DFA dfa;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        经过处理后的DFA图</span><br><span class="hljs-comment">        因为有好几个结点最后会合成一个结点，所以minDFA其实是有好多个vector组成的，</span><br><span class="hljs-comment">        每个vector元素又包含了好几个结点，这写结点最后会被合成一个结点</span><br><span class="hljs-comment">        例子： minDFA = &#123;&#123;1&#125;， &#123;3，5，7&#125;, &#123;2,4&#125;, &#123;6,8&#125;&#125;</span><br><span class="hljs-comment">     */</span><br>    vector&lt;vector&lt;DFANode *&gt;&gt; minDFA;<br>    <span class="hljs-comment">//最终的DFA</span><br>    DFA finalDFA;<br>    <span class="hljs-comment">//DFA最小化生成的表格</span><br>    <span class="hljs-keyword">char</span> chart[MAX_NODE_NUMBER][MAX_NODE_NUMBER];<br>    <span class="hljs-comment">//最后生成的代码</span><br>    string code;<br>    <span class="hljs-comment">//能处理的字符集</span><br>    set&lt;<span class="hljs-keyword">char</span>&gt; wordList;<br>    <span class="hljs-comment">//构造函数，用正则表达式来初始化Proxy代理类</span><br>    <span class="hljs-built_in">Proxy</span>(<span class="hljs-keyword">const</span> string regExp);<br>    <span class="hljs-comment">//给NFA的结点编号并建立初始DFA结点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">serializeNFA</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">//初始DFA图后处理</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">processDFA</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">//最小化DFA</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">minimizeDFA</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">//最小DFA图后处理</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">processMinDFA</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">//生成c语言代码</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">generateCode</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">//获取NFA图，由输入的正则表达式产生NFA</span><br>    <span class="hljs-function">NFA <span class="hljs-title">getNFA</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string regExp)</span></span>;<br>    <span class="hljs-comment">//把正则表达式看成 a | b | c的形式，以&#x27;|&#x27;为分隔符号，所以要先获取&#x27;|&#x27; 的索引</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">getOrOperatorIndex</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string regExp)</span></span>;<br>    <span class="hljs-comment">//判断ch是不是字符（字母或数字）</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isLetter</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span></span>;<br>    <span class="hljs-comment">//获取索引为index的左括号对应的右括号的索引，在初始化NFA的时候会用到</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getRightBracketIndex</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string regExp, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> leftIndex)</span></span>;<br>    <span class="hljs-comment">//用于得知id号结点可以有哪些转化</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">getConnections</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
      <tag>SCNU-CS</tag>
      
      <tag>XLEX</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
