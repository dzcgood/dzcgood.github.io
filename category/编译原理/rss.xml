<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>DzcGood • Posts by &#34;编译原理&#34; category</title>
        <link>http://example.com</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Sun, 31 Oct 2021 14:33:54 +0800</pubDate>
        <lastBuildDate>Sun, 31 Oct 2021 14:33:54 +0800</lastBuildDate>
        <category>编译原理</category>
        <category>SCNU-CS</category>
        <category>XLEX</category>
        <category>leetcode</category>
        <category>数组</category>
        <category>二分查找</category>
        <category>JavaSE</category>
        <category>学习笔记</category>
        <item>
            <guid isPermalink="true">http://example.com/2021/10/31/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%BA%8C-XLEX/</guid>
            <title>编译原理实验二 XLEX</title>
            <link>http://example.com/2021/10/31/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C%E4%BA%8C-XLEX/</link>
            <category>编译原理</category>
            <category>SCNU-CS</category>
            <category>XLEX</category>
            <pubDate>Sun, 31 Oct 2021 14:33:54 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;xlex软件文档&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#xlex软件文档&#34;&gt;#&lt;/a&gt; XLEX 软件文档&lt;/h1&gt;
&lt;h2 id=&#34;关于&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关于&#34;&gt;#&lt;/a&gt; 关于&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;SCNU-CS 编译原理实验二，本来想好好写一写的，但是时间紧迫，先水一水吧，以后有时间再改一改。（还有 bug 没改）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;作者&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作者&#34;&gt;#&lt;/a&gt; 作者&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href = https://github.com/dzcgood&gt;@dzcgood&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;开发环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开发环境&#34;&gt;#&lt;/a&gt; 开发环境&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Qt Creator 4.11.1(Community)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;顶层程序流程图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#顶层程序流程图&#34;&gt;#&lt;/a&gt; 顶层程序流程图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/img/%E9%A1%B6%E5%B1%82%E6%B5%81%E7%A8%8B%E5%9B%BE.png&#34; alt=&#34;顶层流程图&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;实现思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实现思路&#34;&gt;#&lt;/a&gt; 实现思路&lt;/h2&gt;
&lt;h3 id=&#34;this-nfa-选择&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#this-nfa-选择&#34;&gt;#&lt;/a&gt; this | nfa  选择&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;设 this 和 nfa 都代表一个 nfa 图，则执行‘|’操作只需要新建 startNode 和 endNode 和四条边，将二者连接即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/img/%E9%80%89%E6%8B%A9%E6%93%8D%E4%BD%9C.jpg&#34; alt=&#34;选择操作&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;thisnfa连接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#thisnfa连接&#34;&gt;#&lt;/a&gt; thisnfa 连接&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;直接把 this-&amp;gt;endNode 和 nfa -&amp;gt; startNode 之间加一条 NFAEdge 连起来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/img/%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C.jpg&#34; alt=&#34;连接操作&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;a-闭包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#a-闭包&#34;&gt;#&lt;/a&gt; a* 闭包&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;需要新建 startNode 和 endNode，和 nfa 前后连起来，然后把 nfa 的 startNode 和 endNode 连起来。总结一下，就是新建两个结点和四条边。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/img/%E9%97%AD%E5%8C%85.jpg&#34; alt=&#34;闭包&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;生成nfa&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生成nfa&#34;&gt;#&lt;/a&gt; 生成 NFA&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;获取 NFA 图，由输入的正则表达式产生 NFA&lt;/p&gt;
&lt;p&gt;正则表达式转 NFA 递归方法思路： 首先把 (…) 看成一个单元素 NFA, 和 a 等价，把单个 NFA 看成一个或数个元素的 Union，即 NFA = a [|b|c…]。扫描正则表达式，首先扫描 | 进行拆分递归，逐项建立 NFA 后，用 ‘|’ 连接，对于括号要进行进行递归处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/img/%E7%94%9F%E6%88%90NFA.jpg&#34; alt=&#34;生成NFA&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;生成dfa&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生成dfa&#34;&gt;#&lt;/a&gt; 生成 DFA&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;分为两个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给 NFA 的结点编号并建立初始 DFA 结点&lt;/li&gt;
&lt;li&gt;确定结点与结点之间的关系，建立 DFA 的边&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;nfa结点编号建立dfa结点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nfa结点编号建立dfa结点&#34;&gt;#&lt;/a&gt; NFA 结点编号，建立 DFA 结点&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;/img/serializeNFA.jpg&#34; alt=&#34;serializeNFA&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;建立dfa的边&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#建立dfa的边&#34;&gt;#&lt;/a&gt; 建立 DFA 的边&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;/img/%E5%BB%BA%E7%AB%8BDFA%E7%9A%84%E8%BE%B9.jpg&#34; alt=&#34;建立DFA的边&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;最小化dfa&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最小化dfa&#34;&gt;#&lt;/a&gt; 最小化 DFA&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;分为两个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;求初态集合、终态集合并对这些集合进行划分，建立最后的 DFANode&lt;/li&gt;
&lt;li&gt;建立 DFANode 之间的边，形成最小 DFA 图&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;集合划分建立dfanode&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集合划分建立dfanode&#34;&gt;#&lt;/a&gt; 集合划分，建立 DFANode&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;/img/%E9%9B%86%E5%90%88%E5%88%92%E5%88%86%EF%BC%8C%E7%94%9F%E6%88%90DFANode.jpg&#34; alt=&#34;集合划分，生成DFANode&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;建立dfanode的边&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#建立dfanode的边&#34;&gt;#&lt;/a&gt; 建立 DFANode 的边&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;/img/%E5%BB%BA%E7%AB%8B%E6%9C%80%E5%B0%8FDFA%E7%9A%84%E8%BE%B9.jpg&#34; alt=&#34;建立最小DFA的边&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;生成c语言代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生成c语言代码&#34;&gt;#&lt;/a&gt; 生成 c 语言代码&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;对于从个某结点出发的每一条边，分为两类，指向自己的，以及指向下一个结点的。对于指向自己的边，生成 while 语句；对于指向下一个结点的边，生成 if 语句，并且需要递归进入下一个结点，直到当前结点的状态为 END 时，结束递归，并回调。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/img/%E7%94%9F%E6%88%90c%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81.jpg&#34; alt=&#34;生成c语言代码&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;枚举-结构体-类设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#枚举-结构体-类设计&#34;&gt;#&lt;/a&gt; 枚举、结构体、类设计&lt;/h2&gt;
&lt;h3 id=&#34;枚举&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#枚举&#34;&gt;#&lt;/a&gt; 枚举&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;定义了一个枚举 State，用于标记每个结点的状态，包括 START（开始节点）, END（结束结点）, NORMAL（其他结点）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    定义各个结点的状态：开始，结束，普通&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;State&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    START,END,NORMAL&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;结构体&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#结构体&#34;&gt;#&lt;/a&gt; 结构体&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;共四个结构体，NFANode，NFAEdge，DFANode，DFAEdge，分别代表一个 NFA 图的结点、一条 NFA 图的边、一个 DFA 图的结点、一个 DFA 图的边。接下来详细说明四个结构体的具体定义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;nfanode&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nfanode&#34;&gt;#&lt;/a&gt; NFANode&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;DFANode 用来描述一个 NFA 图的结点，其属性包括编号（id），状态 (state)，入边 (inEdges)，出边 (outEdges)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    NFA的结点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;NFANode&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//唯一标记结点&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; id;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//标实该结点是否为开始结点或结束结点&lt;/span&gt;&lt;br&gt;    State state;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//入边&lt;/span&gt;&lt;br&gt;    vector&amp;lt;NFAEdge&amp;gt; inEdges;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//出边&lt;/span&gt;&lt;br&gt;    vector&amp;lt;NFAEdge&amp;gt; outEdges;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//构造函数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;NFANode&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; i, State s) : &lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;(i), &lt;span class=&#34;hljs-built_in&#34;&gt;state&lt;/span&gt;(s)&amp;#123;&amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//空参构造函数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;NFANode&lt;/span&gt;(): &lt;span class=&#34;hljs-built_in&#34;&gt;id&lt;/span&gt;(DEFAULT_ID), &lt;span class=&#34;hljs-built_in&#34;&gt;state&lt;/span&gt;(NORMAL)&amp;#123;&amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;nfaedge&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nfaedge&#34;&gt;#&lt;/a&gt; NFAEdge&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;NFAEdge 用于描述一条 NFA 图中的边，其属性包括开始结点 (startNode)，结束结点 (endNode)，处理的字符 (word)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    NFA的边&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;NFAEdge&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//该边由startNode指向endNode&lt;/span&gt;&lt;br&gt;    NFANode * startNode;&lt;br&gt;    NFANode * endNode;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//该边处理字符word&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; word;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//构造函数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;NFAEdge&lt;/span&gt;(NFANode * s, NFANode * e, &lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; c): &lt;span class=&#34;hljs-built_in&#34;&gt;startNode&lt;/span&gt;(s), &lt;span class=&#34;hljs-built_in&#34;&gt;endNode&lt;/span&gt;(e), &lt;span class=&#34;hljs-built_in&#34;&gt;word&lt;/span&gt;(c)&amp;#123;&amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//空参构造函数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;NFAEdge&lt;/span&gt;(): &lt;span class=&#34;hljs-built_in&#34;&gt;startNode&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;), &lt;span class=&#34;hljs-built_in&#34;&gt;endNode&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;), &lt;span class=&#34;hljs-built_in&#34;&gt;word&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;\0&amp;#x27;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;dfanode&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dfanode&#34;&gt;#&lt;/a&gt; DFANode&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;DFANode 用于描述一个 DFA 图的结点，其属性包括该结点的 EPSILION 闭包 (nodes)，由该结点出发的边 (edges)，结点名 (minName)，状态 (state)，还有一系列的操作，如插入边，插入结点，输出结点信息等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//DFA结点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;DFANode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//该结点的EPSILION闭包&lt;/span&gt;&lt;br&gt;    set&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt; nodes;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//由该结点出发的边&lt;/span&gt;&lt;br&gt;    vector&amp;lt;DFAEdge&amp;gt; edges;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//给这个结点取个名字，A, B, C, D&lt;/span&gt;&lt;br&gt;    string minName;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//该结点在DFA图中的状态&lt;/span&gt;&lt;br&gt;    State state = NORMAL;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//判断结点id是否在该结点中&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//在该结点插入id&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//在该结点插入边&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(DFAEdge edge)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//将两个结点合成一个结点&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;unionNode&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(DFANode * node)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//该结点处理字符c后转变为的结点&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;DFANode * &lt;span class=&#34;hljs-title&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; c)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//输出该结点信息 如： &amp;#123;1，2，4，6&amp;#125;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;string &lt;span class=&#34;hljs-title&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;dfaedge&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dfaedge&#34;&gt;#&lt;/a&gt; DFAEdge&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;DFAEdge 用于描述一条 DFA 图的边，其属性包括指向的结点（next）和处理的字符（word）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//DFA边&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;DFAEdge&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//边指向的结点&lt;/span&gt;&lt;br&gt;    DFANode * next;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//处理的字符&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; word;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//构造函数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;DFAEdge&lt;/span&gt;(DFANode *n, &lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; c): &lt;span class=&#34;hljs-built_in&#34;&gt;next&lt;/span&gt;(n), &lt;span class=&#34;hljs-built_in&#34;&gt;word&lt;/span&gt;(c)&amp;#123;&amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类&#34;&gt;#&lt;/a&gt; 类&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一共定义了三个类，分别是 NFA, DFA, Proxy，其中 NFA 和 DFA 类分别代表一个 NFA 图和 DFA 图，Proxy 是代理类，用于代理有关 NFA 和 DFA 类的操作，具体包括生成 NFA 图、给 NFA 图编号并生成 DFA 图、最小化 DFA 图、生成 c 语言代码等操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;nfa&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nfa&#34;&gt;#&lt;/a&gt; NFA&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;主要涉及到选择（a | b）闭包（a*），连接（ab）操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    NFA类，集成构建NFA图的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;NFA&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//NFA图的开始结点&lt;/span&gt;&lt;br&gt;    NFANode * startNode;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//NFA图的结束结点&lt;/span&gt;&lt;br&gt;    NFANode * endNode;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//结点个数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; nodeNumber;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//空参构造函数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;NFA&lt;/span&gt;():&lt;span class=&#34;hljs-built_in&#34;&gt;startNode&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;), &lt;span class=&#34;hljs-built_in&#34;&gt;endNode&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;), &lt;span class=&#34;hljs-built_in&#34;&gt;nodeNumber&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&amp;#123;&amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//初始化一个处理字符c的NFA图&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//这里原作者id的类型是char ？？？ 暂时没看懂，，先改成 int&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;NFA&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; c, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; id1, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; id2);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//初始化一个识别c的标号未定的NFA图&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;NFA&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; c);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//已知开始结点和结束结点&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;NFA&lt;/span&gt;(NFANode * s, NFANode * e): &lt;span class=&#34;hljs-built_in&#34;&gt;startNode&lt;/span&gt;(s), &lt;span class=&#34;hljs-built_in&#34;&gt;endNode&lt;/span&gt;(e)&amp;#123;&amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//浅复制&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;operator&lt;/span&gt;=(&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; NFA &amp;amp;nfa);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// a | b 选择&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Or&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; NFA &amp;amp;nfa)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ab 连接&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;And&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; NFA &amp;amp;nfa)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// a* 闭包&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Star&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//当前NFA图是否为空&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//id对应的结点是不是endNode&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;isEnd&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//获取endNode的id&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;getEndId&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//获取startNode的id&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;getStartId&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;dfa&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dfa&#34;&gt;#&lt;/a&gt; DFA&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;用于描述一个 DFA 图，其主要操作涉及到由该结点生成该结点对应的 c 语言代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//DFA类&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;DFA&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//DFA图的结点&lt;/span&gt;&lt;br&gt;    vector&amp;lt;DFANode*&amp;gt; graph;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//通过id返回图的结点&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;vector&amp;lt;DFANode*&amp;gt; &lt;span class=&#34;hljs-title&#34;&gt;getNodes&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//DFA图最小开始结点&lt;/span&gt;&lt;br&gt;    DFANode *minStartNode;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//DFA图最小结束结点&lt;/span&gt;&lt;br&gt;    vector&amp;lt;DFANode*&amp;gt; minEndNodes;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//能处理的字符&lt;/span&gt;&lt;br&gt;    set&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt;&amp;gt; wordList;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//建一个新结点&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;DFANode* &lt;span class=&#34;hljs-title&#34;&gt;crateNewNode&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//判断两个结点的转化是否等价，若转化后是同一个结点，则等价&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(DFANode *node1, DFANode *node2, set&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt;&amp;gt; words)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//判断该结点是否为结束结点&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;isEndNode&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(DFANode *node)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//从当前DFA中删除某个结点&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;delNode&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(DFANode *node)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//获取该结点的c语言代码，n是结点指针，lines是生成的代码，tabNumber是缩进数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;getCode&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(DFANode *n, vector&amp;lt;string&amp;gt; &amp;amp;lines, &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; tabNumber)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//获取缩进的空格&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;string &lt;span class=&#34;hljs-title&#34;&gt;getTabs&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; tabNumber)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;proxy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#proxy&#34;&gt;#&lt;/a&gt; Proxy&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;代理 NFA 和 DFA 的操作，包括产生 NFA，产生 DFA，最小化 DFA&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter hljs&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;hljs code-wrapper&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c++&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//正则表达式&lt;/span&gt;&lt;br&gt;    string regularExpression;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//NFA图&lt;/span&gt;&lt;br&gt;    NFA nfa;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//最初始的DFA图&lt;/span&gt;&lt;br&gt;    DFA dfa;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;        经过处理后的DFA图&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;        因为有好几个结点最后会合成一个结点，所以minDFA其实是有好多个vector组成的，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;        每个vector元素又包含了好几个结点，这写结点最后会被合成一个结点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;        例子： minDFA = &amp;#123;&amp;#123;1&amp;#125;， &amp;#123;3，5，7&amp;#125;, &amp;#123;2,4&amp;#125;, &amp;#123;6,8&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    vector&amp;lt;vector&amp;lt;DFANode *&amp;gt;&amp;gt; minDFA;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//最终的DFA&lt;/span&gt;&lt;br&gt;    DFA finalDFA;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//DFA最小化生成的表格&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; chart[MAX_NODE_NUMBER][MAX_NODE_NUMBER];&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//最后生成的代码&lt;/span&gt;&lt;br&gt;    string code;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//能处理的字符集&lt;/span&gt;&lt;br&gt;    set&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt;&amp;gt; wordList;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//构造函数，用正则表达式来初始化Proxy代理类&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;Proxy&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; string regExp);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//给NFA的结点编号并建立初始DFA结点&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;serializeNFA&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//初始DFA图后处理&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;processDFA&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//最小化DFA&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;minimizeDFA&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//最小DFA图后处理&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;processMinDFA&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//生成c语言代码&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;generateCode&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//获取NFA图，由输入的正则表达式产生NFA&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;NFA &lt;span class=&#34;hljs-title&#34;&gt;getNFA&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; string regExp)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//把正则表达式看成 a | b | c的形式，以&amp;#x27;|&amp;#x27;为分隔符号，所以要先获取&amp;#x27;|&amp;#x27; 的索引&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-title&#34;&gt;getOrOperatorIndex&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; string regExp)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//判断ch是不是字符（字母或数字）&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;isLetter&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;char&lt;/span&gt; ch)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//获取索引为index的左括号对应的右括号的索引，在初始化NFA的时候会用到&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;getRightBracketIndex&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; string regExp, &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; leftIndex)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//用于得知id号结点可以有哪些转化&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-function&#34;&gt;vector&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-title&#34;&gt;getConnections&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
